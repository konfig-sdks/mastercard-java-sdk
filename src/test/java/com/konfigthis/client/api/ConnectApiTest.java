/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Borrower;
import com.konfigthis.client.model.ConnectEmailParameters;
import com.konfigthis.client.model.ConnectEmailUrl;
import com.konfigthis.client.model.ConnectJointBorrowerEmailParameters;
import com.konfigthis.client.model.ConnectJointBorrowerParameters;
import com.konfigthis.client.model.ConnectParameters;
import com.konfigthis.client.model.ConnectUrl;
import com.konfigthis.client.model.ConsumerInfo;
import com.konfigthis.client.model.EmailOptions;
import com.konfigthis.client.model.FixConnectParameters;
import com.konfigthis.client.model.LiteConnectParameters;
import com.konfigthis.client.model.MicroEntryVerifyRequestParameter;
import com.konfigthis.client.model.ReportCustomField;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectApi
 */
@Disabled
public class ConnectApiTest {

    private static ConnectApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ConnectApi(apiClient);
    }

    /**
     * Generate Fix Connect URL
     *
     * Use the Connect Fix API when the following conditions occur: * The connection to the user&#39;s financial institution is lost * The user&#39;s credentials were updated (for any number of reasons) * The user&#39;s MFA challenge has expired  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fixUrlGenerationTest() throws ApiException {
        String partnerId = null;
        String customerId = null;
        String institutionLoginId = null;
        String language = null;
        String redirectUri = null;
        String webhook = null;
        String webhookContentType = null;
        Object webhookData = null;
        Object webhookHeaders = null;
        String experience = null;
        Boolean singleUseUrl = null;
        Boolean isWebView = null;
        ConnectUrl response = api.fixUrlGeneration(partnerId, customerId, institutionLoginId)
                .language(language)
                .redirectUri(redirectUri)
                .webhook(webhook)
                .webhookContentType(webhookContentType)
                .webhookData(webhookData)
                .webhookHeaders(webhookHeaders)
                .experience(experience)
                .singleUseUrl(singleUseUrl)
                .isWebView(isWebView)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate Connect URL - Joint Borrower
     *
     * Same as Connect Full (&#x60;POST /connect/v2/generate&#x60;) but for joint borrowers.  MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateJointBorrowerUrlTest() throws ApiException {
        String partnerId = null;
        List<Borrower> borrowers = null;
        String language = null;
        String redirectUri = null;
        String webhook = null;
        String webhookContentType = null;
        Object webhookData = null;
        Object webhookHeaders = null;
        Object institutionSettings = null;
        String experience = null;
        Long fromDate = null;
        List<ReportCustomField> reportCustomFields = null;
        Boolean singleUseUrl = null;
        ConnectUrl response = api.generateJointBorrowerUrl(partnerId, borrowers)
                .language(language)
                .redirectUri(redirectUri)
                .webhook(webhook)
                .webhookContentType(webhookContentType)
                .webhookData(webhookData)
                .webhookHeaders(webhookHeaders)
                .institutionSettings(institutionSettings)
                .experience(experience)
                .fromDate(fromDate)
                .reportCustomFields(reportCustomFields)
                .singleUseUrl(singleUseUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate Lite Connect URL
     *
     * Connect Lite is a variation of Connect Full (&#x60;POST /connect/v2/generate&#x60;), which has a limited set of features. * Sign in, user&#39;s credentials, and Multi-Factor Authentication (MFA) * No user account management  The Connect Web SDK isn&#39;t a requirement when using Connect lite. However, if you want to use the SDK events, routes, and user events, then you must integrate with the Connect Web SDK.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateLiteUrlTest() throws ApiException {
        String partnerId = null;
        String customerId = null;
        Long institutionId = null;
        String language = null;
        String redirectUri = null;
        String webhook = null;
        String webhookContentType = null;
        Object webhookData = null;
        Object webhookHeaders = null;
        String experience = null;
        Boolean singleUseUrl = null;
        Boolean isWebView = null;
        ConnectUrl response = api.generateLiteUrl(partnerId, customerId, institutionId)
                .language(language)
                .redirectUri(redirectUri)
                .webhook(webhook)
                .webhookContentType(webhookContentType)
                .webhookData(webhookData)
                .webhookHeaders(webhookHeaders)
                .experience(experience)
                .singleUseUrl(singleUseUrl)
                .isWebView(isWebView)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate Connect URL
     *
     * Generate a Connect 2.0 URL link to add within your own applications.  Optional Parameters: * &#x60;experience&#x60;: Configure different customer experiences per Connect session by changing the brand, color, logo, icon, the type of credit decisioning report to generate after the session ends, and more. * &#x60;language&#x60;: By default, the Connect application is in English. You don&#39;t need to pass  this parameter unless you want to translate Connect into one of our supported languages.    * Spanish (United States)   * French (Canada)   MVS Developers: You can pre-populate the consumer&#39;s SSN on the Find employment records page at the beginning of the MVS payroll app. Pass the SSN value for the consumer in the body of the request call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateUrlTest() throws ApiException {
        String partnerId = null;
        String customerId = null;
        String language = null;
        String consumerId = null;
        String redirectUri = null;
        String webhook = null;
        String webhookContentType = null;
        Object webhookData = null;
        Object webhookHeaders = null;
        ConsumerInfo optionalConsumerInfo = null;
        Boolean singleUseUrl = null;
        String experience = null;
        Object institutionSettings = null;
        Long fromDate = null;
        List<ReportCustomField> reportCustomFields = null;
        Boolean isWebView = null;
        ConnectUrl response = api.generateUrl(partnerId, customerId)
                .language(language)
                .consumerId(consumerId)
                .redirectUri(redirectUri)
                .webhook(webhook)
                .webhookContentType(webhookContentType)
                .webhookData(webhookData)
                .webhookHeaders(webhookHeaders)
                .optionalConsumerInfo(optionalConsumerInfo)
                .singleUseUrl(singleUseUrl)
                .experience(experience)
                .institutionSettings(institutionSettings)
                .fromDate(fromDate)
                .reportCustomFields(reportCustomFields)
                .isWebView(isWebView)
                .execute();
        // TODO: test validations
    }

    /**
     * Send Connect Email
     *
     * Same as Connect Full (&#x60;POST /connect/v2/generate&#x60;) but send a Connect email to a consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendConnectEmailTest() throws ApiException {
        String partnerId = null;
        String customerId = null;
        String consumerId = null;
        EmailOptions email = null;
        String language = null;
        String redirectUri = null;
        String webhook = null;
        String webhookContentType = null;
        Object webhookData = null;
        Object webhookHeaders = null;
        Object institutionSettings = null;
        String experience = null;
        Boolean singleUseUrl = null;
        Long fromDate = null;
        List<ReportCustomField> reportCustomFields = null;
        ConsumerInfo optionalConsumerInfo = null;
        ConnectEmailUrl response = api.sendConnectEmail(partnerId, customerId, consumerId, email)
                .language(language)
                .redirectUri(redirectUri)
                .webhook(webhook)
                .webhookContentType(webhookContentType)
                .webhookData(webhookData)
                .webhookHeaders(webhookHeaders)
                .institutionSettings(institutionSettings)
                .experience(experience)
                .singleUseUrl(singleUseUrl)
                .fromDate(fromDate)
                .reportCustomFields(reportCustomFields)
                .optionalConsumerInfo(optionalConsumerInfo)
                .execute();
        // TODO: test validations
    }

    /**
     * Send Connect Email - Joint Borrower
     *
     * Same as Connect Joint Borrower (&#x60;POST /connect/v2/generate/jointBorrower&#x60;) but send a Connect email  to at least one of the joint borrower&#39;s email addresses.  When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailJointBorrowerTest() throws ApiException {
        String partnerId = null;
        List<Borrower> borrowers = null;
        EmailOptions email = null;
        String experience = null;
        String language = null;
        String redirectUri = null;
        String webhook = null;
        String webhookContentType = null;
        Object webhookData = null;
        Object webhookHeaders = null;
        Object institutionSettings = null;
        Long fromDate = null;
        List<ReportCustomField> reportCustomFields = null;
        Boolean singleUseUrl = null;
        ConnectEmailUrl response = api.sendEmailJointBorrower(partnerId, borrowers, email, experience)
                .language(language)
                .redirectUri(redirectUri)
                .webhook(webhook)
                .webhookContentType(webhookContentType)
                .webhookData(webhookData)
                .webhookHeaders(webhookHeaders)
                .institutionSettings(institutionSettings)
                .fromDate(fromDate)
                .reportCustomFields(reportCustomFields)
                .singleUseUrl(singleUseUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Account Validation Assistant User verification of microdeposits
     *
     * The UI re-engages the consumer to enter two microdeposit amounts found in their account and validates them.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyMicroEntryMicrodepositsTest() throws ApiException {
        String partnerId = null;
        String customerId = null;
        String redirectUri = null;
        String webhook = null;
        String webhookContentType = null;
        Object webhookData = null;
        Object webhookHeaders = null;
        String experience = null;
        String accountId = null;
        ConnectUrl response = api.verifyMicroEntryMicrodeposits()
                .partnerId(partnerId)
                .customerId(customerId)
                .redirectUri(redirectUri)
                .webhook(webhook)
                .webhookContentType(webhookContentType)
                .webhookData(webhookData)
                .webhookHeaders(webhookHeaders)
                .experience(experience)
                .accountId(accountId)
                .execute();
        // TODO: test validations
    }

}
