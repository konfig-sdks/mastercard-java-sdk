/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Customer-level summary of transactions in a month
 */
@ApiModel(description = "Customer-level summary of transactions in a month")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentHistoryCustomerMonthlySummary {
  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private String month;

  public static final String SERIALIZED_NAME_AVERAGE_BALANCE = "averageBalance";
  @SerializedName(SERIALIZED_NAME_AVERAGE_BALANCE)
  private Double averageBalance;

  public static final String SERIALIZED_NAME_CLOSING_BALANCE = "closingBalance";
  @SerializedName(SERIALIZED_NAME_CLOSING_BALANCE)
  private Double closingBalance;

  public static final String SERIALIZED_NAME_OPENING_BALANCE = "openingBalance";
  @SerializedName(SERIALIZED_NAME_OPENING_BALANCE)
  private Double openingBalance;

  public static final String SERIALIZED_NAME_TOTAL_DEPOSITS = "totalDeposits";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEPOSITS)
  private Double totalDeposits;

  public static final String SERIALIZED_NAME_TOTAL_WITHDRAWALS = "totalWithdrawals";
  @SerializedName(SERIALIZED_NAME_TOTAL_WITHDRAWALS)
  private Double totalWithdrawals;

  public static final String SERIALIZED_NAME_NON_SUFFICIENT_FUNDS = "nonSufficientFunds";
  @SerializedName(SERIALIZED_NAME_NON_SUFFICIENT_FUNDS)
  private Double nonSufficientFunds;

  public static final String SERIALIZED_NAME_INSURANCE_PAYMENTS = "insurancePayments";
  @SerializedName(SERIALIZED_NAME_INSURANCE_PAYMENTS)
  private Double insurancePayments;

  public static final String SERIALIZED_NAME_TAX_PAYMENTS = "taxPayments";
  @SerializedName(SERIALIZED_NAME_TAX_PAYMENTS)
  private Double taxPayments;

  public static final String SERIALIZED_NAME_RECURRING_EXPENSE_PAYMENTS = "recurringExpensePayments";
  @SerializedName(SERIALIZED_NAME_RECURRING_EXPENSE_PAYMENTS)
  private Double recurringExpensePayments;

  public static final String SERIALIZED_NAME_MISSED_RECURRING_EXPENSE_PAYMENTS = "missedRecurringExpensePayments";
  @SerializedName(SERIALIZED_NAME_MISSED_RECURRING_EXPENSE_PAYMENTS)
  private Double missedRecurringExpensePayments;

  public static final String SERIALIZED_NAME_RECURRING_LOAN_PAYMENTS = "recurringLoanPayments";
  @SerializedName(SERIALIZED_NAME_RECURRING_LOAN_PAYMENTS)
  private Double recurringLoanPayments;

  public static final String SERIALIZED_NAME_MISSED_RECURRING_LOAN_PAYMENTS = "missedRecurringLoanPayments";
  @SerializedName(SERIALIZED_NAME_MISSED_RECURRING_LOAN_PAYMENTS)
  private Double missedRecurringLoanPayments;

  public PaymentHistoryCustomerMonthlySummary() {
  }

  public PaymentHistoryCustomerMonthlySummary month(String month) {
    
    
    
    
    this.month = month;
    return this;
  }

   /**
   * Date of the month
   * @return month
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2023-06-01", required = true, value = "Date of the month")

  public String getMonth() {
    return month;
  }


  public void setMonth(String month) {
    
    
    
    this.month = month;
  }


  public PaymentHistoryCustomerMonthlySummary averageBalance(Double averageBalance) {
    
    
    
    
    this.averageBalance = averageBalance;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary averageBalance(Integer averageBalance) {
    
    
    
    
    this.averageBalance = averageBalance.doubleValue();
    return this;
  }

   /**
   * Average balance for the month
   * @return averageBalance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123.45", required = true, value = "Average balance for the month")

  public Double getAverageBalance() {
    return averageBalance;
  }


  public void setAverageBalance(Double averageBalance) {
    
    
    
    this.averageBalance = averageBalance;
  }


  public PaymentHistoryCustomerMonthlySummary closingBalance(Double closingBalance) {
    
    
    
    
    this.closingBalance = closingBalance;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary closingBalance(Integer closingBalance) {
    
    
    
    
    this.closingBalance = closingBalance.doubleValue();
    return this;
  }

   /**
   * Closing balance for the month
   * @return closingBalance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123.45", required = true, value = "Closing balance for the month")

  public Double getClosingBalance() {
    return closingBalance;
  }


  public void setClosingBalance(Double closingBalance) {
    
    
    
    this.closingBalance = closingBalance;
  }


  public PaymentHistoryCustomerMonthlySummary openingBalance(Double openingBalance) {
    
    
    
    
    this.openingBalance = openingBalance;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary openingBalance(Integer openingBalance) {
    
    
    
    
    this.openingBalance = openingBalance.doubleValue();
    return this;
  }

   /**
   * Opening balance for the month
   * @return openingBalance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123.45", required = true, value = "Opening balance for the month")

  public Double getOpeningBalance() {
    return openingBalance;
  }


  public void setOpeningBalance(Double openingBalance) {
    
    
    
    this.openingBalance = openingBalance;
  }


  public PaymentHistoryCustomerMonthlySummary totalDeposits(Double totalDeposits) {
    
    
    
    
    this.totalDeposits = totalDeposits;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary totalDeposits(Integer totalDeposits) {
    
    
    
    
    this.totalDeposits = totalDeposits.doubleValue();
    return this;
  }

   /**
   * Total of deposit transactions for the month
   * @return totalDeposits
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123.45", required = true, value = "Total of deposit transactions for the month")

  public Double getTotalDeposits() {
    return totalDeposits;
  }


  public void setTotalDeposits(Double totalDeposits) {
    
    
    
    this.totalDeposits = totalDeposits;
  }


  public PaymentHistoryCustomerMonthlySummary totalWithdrawals(Double totalWithdrawals) {
    
    
    
    
    this.totalWithdrawals = totalWithdrawals;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary totalWithdrawals(Integer totalWithdrawals) {
    
    
    
    
    this.totalWithdrawals = totalWithdrawals.doubleValue();
    return this;
  }

   /**
   * Total of withdrawal transactions for the month
   * @return totalWithdrawals
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123.45", required = true, value = "Total of withdrawal transactions for the month")

  public Double getTotalWithdrawals() {
    return totalWithdrawals;
  }


  public void setTotalWithdrawals(Double totalWithdrawals) {
    
    
    
    this.totalWithdrawals = totalWithdrawals;
  }


  public PaymentHistoryCustomerMonthlySummary nonSufficientFunds(Double nonSufficientFunds) {
    
    
    
    
    this.nonSufficientFunds = nonSufficientFunds;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary nonSufficientFunds(Integer nonSufficientFunds) {
    
    
    
    
    this.nonSufficientFunds = nonSufficientFunds.doubleValue();
    return this;
  }

   /**
   * Total of NSF transactions for the month
   * @return nonSufficientFunds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3", required = true, value = "Total of NSF transactions for the month")

  public Double getNonSufficientFunds() {
    return nonSufficientFunds;
  }


  public void setNonSufficientFunds(Double nonSufficientFunds) {
    
    
    
    this.nonSufficientFunds = nonSufficientFunds;
  }


  public PaymentHistoryCustomerMonthlySummary insurancePayments(Double insurancePayments) {
    
    
    
    
    this.insurancePayments = insurancePayments;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary insurancePayments(Integer insurancePayments) {
    
    
    
    
    this.insurancePayments = insurancePayments.doubleValue();
    return this;
  }

   /**
   * Total of insurance payment transactions for the month
   * @return insurancePayments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123.45", required = true, value = "Total of insurance payment transactions for the month")

  public Double getInsurancePayments() {
    return insurancePayments;
  }


  public void setInsurancePayments(Double insurancePayments) {
    
    
    
    this.insurancePayments = insurancePayments;
  }


  public PaymentHistoryCustomerMonthlySummary taxPayments(Double taxPayments) {
    
    
    
    
    this.taxPayments = taxPayments;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary taxPayments(Integer taxPayments) {
    
    
    
    
    this.taxPayments = taxPayments.doubleValue();
    return this;
  }

   /**
   * Total of tax payment transactions for the month
   * @return taxPayments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123.45", required = true, value = "Total of tax payment transactions for the month")

  public Double getTaxPayments() {
    return taxPayments;
  }


  public void setTaxPayments(Double taxPayments) {
    
    
    
    this.taxPayments = taxPayments;
  }


  public PaymentHistoryCustomerMonthlySummary recurringExpensePayments(Double recurringExpensePayments) {
    
    
    
    
    this.recurringExpensePayments = recurringExpensePayments;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary recurringExpensePayments(Integer recurringExpensePayments) {
    
    
    
    
    this.recurringExpensePayments = recurringExpensePayments.doubleValue();
    return this;
  }

   /**
   * Total of recurring expense payment transactions for the month
   * @return recurringExpensePayments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "543.21", required = true, value = "Total of recurring expense payment transactions for the month")

  public Double getRecurringExpensePayments() {
    return recurringExpensePayments;
  }


  public void setRecurringExpensePayments(Double recurringExpensePayments) {
    
    
    
    this.recurringExpensePayments = recurringExpensePayments;
  }


  public PaymentHistoryCustomerMonthlySummary missedRecurringExpensePayments(Double missedRecurringExpensePayments) {
    
    
    
    
    this.missedRecurringExpensePayments = missedRecurringExpensePayments;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary missedRecurringExpensePayments(Integer missedRecurringExpensePayments) {
    
    
    
    
    this.missedRecurringExpensePayments = missedRecurringExpensePayments.doubleValue();
    return this;
  }

   /**
   * Total of missed recurring expense payment transactions for the month
   * @return missedRecurringExpensePayments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123.45", required = true, value = "Total of missed recurring expense payment transactions for the month")

  public Double getMissedRecurringExpensePayments() {
    return missedRecurringExpensePayments;
  }


  public void setMissedRecurringExpensePayments(Double missedRecurringExpensePayments) {
    
    
    
    this.missedRecurringExpensePayments = missedRecurringExpensePayments;
  }


  public PaymentHistoryCustomerMonthlySummary recurringLoanPayments(Double recurringLoanPayments) {
    
    
    
    
    this.recurringLoanPayments = recurringLoanPayments;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary recurringLoanPayments(Integer recurringLoanPayments) {
    
    
    
    
    this.recurringLoanPayments = recurringLoanPayments.doubleValue();
    return this;
  }

   /**
   * Total of recurring loan payment transactions for the month
   * @return recurringLoanPayments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "543.21", required = true, value = "Total of recurring loan payment transactions for the month")

  public Double getRecurringLoanPayments() {
    return recurringLoanPayments;
  }


  public void setRecurringLoanPayments(Double recurringLoanPayments) {
    
    
    
    this.recurringLoanPayments = recurringLoanPayments;
  }


  public PaymentHistoryCustomerMonthlySummary missedRecurringLoanPayments(Double missedRecurringLoanPayments) {
    
    
    
    
    this.missedRecurringLoanPayments = missedRecurringLoanPayments;
    return this;
  }

  public PaymentHistoryCustomerMonthlySummary missedRecurringLoanPayments(Integer missedRecurringLoanPayments) {
    
    
    
    
    this.missedRecurringLoanPayments = missedRecurringLoanPayments.doubleValue();
    return this;
  }

   /**
   * Total of missed recurring loan payment transactions for the month
   * @return missedRecurringLoanPayments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123.45", required = true, value = "Total of missed recurring loan payment transactions for the month")

  public Double getMissedRecurringLoanPayments() {
    return missedRecurringLoanPayments;
  }


  public void setMissedRecurringLoanPayments(Double missedRecurringLoanPayments) {
    
    
    
    this.missedRecurringLoanPayments = missedRecurringLoanPayments;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentHistoryCustomerMonthlySummary instance itself
   */
  public PaymentHistoryCustomerMonthlySummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentHistoryCustomerMonthlySummary paymentHistoryCustomerMonthlySummary = (PaymentHistoryCustomerMonthlySummary) o;
    return Objects.equals(this.month, paymentHistoryCustomerMonthlySummary.month) &&
        Objects.equals(this.averageBalance, paymentHistoryCustomerMonthlySummary.averageBalance) &&
        Objects.equals(this.closingBalance, paymentHistoryCustomerMonthlySummary.closingBalance) &&
        Objects.equals(this.openingBalance, paymentHistoryCustomerMonthlySummary.openingBalance) &&
        Objects.equals(this.totalDeposits, paymentHistoryCustomerMonthlySummary.totalDeposits) &&
        Objects.equals(this.totalWithdrawals, paymentHistoryCustomerMonthlySummary.totalWithdrawals) &&
        Objects.equals(this.nonSufficientFunds, paymentHistoryCustomerMonthlySummary.nonSufficientFunds) &&
        Objects.equals(this.insurancePayments, paymentHistoryCustomerMonthlySummary.insurancePayments) &&
        Objects.equals(this.taxPayments, paymentHistoryCustomerMonthlySummary.taxPayments) &&
        Objects.equals(this.recurringExpensePayments, paymentHistoryCustomerMonthlySummary.recurringExpensePayments) &&
        Objects.equals(this.missedRecurringExpensePayments, paymentHistoryCustomerMonthlySummary.missedRecurringExpensePayments) &&
        Objects.equals(this.recurringLoanPayments, paymentHistoryCustomerMonthlySummary.recurringLoanPayments) &&
        Objects.equals(this.missedRecurringLoanPayments, paymentHistoryCustomerMonthlySummary.missedRecurringLoanPayments)&&
        Objects.equals(this.additionalProperties, paymentHistoryCustomerMonthlySummary.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(month, averageBalance, closingBalance, openingBalance, totalDeposits, totalWithdrawals, nonSufficientFunds, insurancePayments, taxPayments, recurringExpensePayments, missedRecurringExpensePayments, recurringLoanPayments, missedRecurringLoanPayments, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentHistoryCustomerMonthlySummary {\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    averageBalance: ").append(toIndentedString(averageBalance)).append("\n");
    sb.append("    closingBalance: ").append(toIndentedString(closingBalance)).append("\n");
    sb.append("    openingBalance: ").append(toIndentedString(openingBalance)).append("\n");
    sb.append("    totalDeposits: ").append(toIndentedString(totalDeposits)).append("\n");
    sb.append("    totalWithdrawals: ").append(toIndentedString(totalWithdrawals)).append("\n");
    sb.append("    nonSufficientFunds: ").append(toIndentedString(nonSufficientFunds)).append("\n");
    sb.append("    insurancePayments: ").append(toIndentedString(insurancePayments)).append("\n");
    sb.append("    taxPayments: ").append(toIndentedString(taxPayments)).append("\n");
    sb.append("    recurringExpensePayments: ").append(toIndentedString(recurringExpensePayments)).append("\n");
    sb.append("    missedRecurringExpensePayments: ").append(toIndentedString(missedRecurringExpensePayments)).append("\n");
    sb.append("    recurringLoanPayments: ").append(toIndentedString(recurringLoanPayments)).append("\n");
    sb.append("    missedRecurringLoanPayments: ").append(toIndentedString(missedRecurringLoanPayments)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("month");
    openapiFields.add("averageBalance");
    openapiFields.add("closingBalance");
    openapiFields.add("openingBalance");
    openapiFields.add("totalDeposits");
    openapiFields.add("totalWithdrawals");
    openapiFields.add("nonSufficientFunds");
    openapiFields.add("insurancePayments");
    openapiFields.add("taxPayments");
    openapiFields.add("recurringExpensePayments");
    openapiFields.add("missedRecurringExpensePayments");
    openapiFields.add("recurringLoanPayments");
    openapiFields.add("missedRecurringLoanPayments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("month");
    openapiRequiredFields.add("averageBalance");
    openapiRequiredFields.add("closingBalance");
    openapiRequiredFields.add("openingBalance");
    openapiRequiredFields.add("totalDeposits");
    openapiRequiredFields.add("totalWithdrawals");
    openapiRequiredFields.add("nonSufficientFunds");
    openapiRequiredFields.add("insurancePayments");
    openapiRequiredFields.add("taxPayments");
    openapiRequiredFields.add("recurringExpensePayments");
    openapiRequiredFields.add("missedRecurringExpensePayments");
    openapiRequiredFields.add("recurringLoanPayments");
    openapiRequiredFields.add("missedRecurringLoanPayments");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentHistoryCustomerMonthlySummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentHistoryCustomerMonthlySummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentHistoryCustomerMonthlySummary is not found in the empty JSON string", PaymentHistoryCustomerMonthlySummary.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentHistoryCustomerMonthlySummary.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentHistoryCustomerMonthlySummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentHistoryCustomerMonthlySummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentHistoryCustomerMonthlySummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentHistoryCustomerMonthlySummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentHistoryCustomerMonthlySummary>() {
           @Override
           public void write(JsonWriter out, PaymentHistoryCustomerMonthlySummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentHistoryCustomerMonthlySummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentHistoryCustomerMonthlySummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentHistoryCustomerMonthlySummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentHistoryCustomerMonthlySummary
  * @throws IOException if the JSON string is invalid with respect to PaymentHistoryCustomerMonthlySummary
  */
  public static PaymentHistoryCustomerMonthlySummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentHistoryCustomerMonthlySummary.class);
  }

 /**
  * Convert an instance of PaymentHistoryCustomerMonthlySummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

