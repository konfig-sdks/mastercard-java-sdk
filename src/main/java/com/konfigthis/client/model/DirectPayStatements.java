/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Deductions;
import com.konfigthis.client.model.DirectDeposits;
import com.konfigthis.client.model.Earnings;
import com.konfigthis.client.model.MainPayStatementFields;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DirectPayStatements
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DirectPayStatements {
  public static final String SERIALIZED_NAME_PAYROLL_PAY_HISTORY_ID = "payrollPayHistoryId";
  @SerializedName(SERIALIZED_NAME_PAYROLL_PAY_HISTORY_ID)
  private String payrollPayHistoryId;

  public static final String SERIALIZED_NAME_LAST_PAY_PERIOD_INDICATOR = "lastPayPeriodIndicator";
  @SerializedName(SERIALIZED_NAME_LAST_PAY_PERIOD_INDICATOR)
  private Boolean lastPayPeriodIndicator;

  public static final String SERIALIZED_NAME_MAIN_PAY_STATEMENT_FIELDS = "mainPayStatementFields";
  @SerializedName(SERIALIZED_NAME_MAIN_PAY_STATEMENT_FIELDS)
  private MainPayStatementFields mainPayStatementFields;

  public static final String SERIALIZED_NAME_EARNINGS = "earnings";
  @SerializedName(SERIALIZED_NAME_EARNINGS)
  private List<Earnings> earnings = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEDUCTIONS = "deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private List<Deductions> deductions = null;

  public static final String SERIALIZED_NAME_DIRECT_DEPOSITS = "directDeposits";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEPOSITS)
  private List<DirectDeposits> directDeposits = null;

  public DirectPayStatements() {
  }

  public DirectPayStatements payrollPayHistoryId(String payrollPayHistoryId) {
    
    
    
    
    this.payrollPayHistoryId = payrollPayHistoryId;
    return this;
  }

   /**
   * An ID for the income and employment details for the given pay period
   * @return payrollPayHistoryId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "qsrt2hmjnf", required = true, value = "An ID for the income and employment details for the given pay period")

  public String getPayrollPayHistoryId() {
    return payrollPayHistoryId;
  }


  public void setPayrollPayHistoryId(String payrollPayHistoryId) {
    
    
    
    this.payrollPayHistoryId = payrollPayHistoryId;
  }


  public DirectPayStatements lastPayPeriodIndicator(Boolean lastPayPeriodIndicator) {
    
    
    
    
    this.lastPayPeriodIndicator = lastPayPeriodIndicator;
    return this;
  }

   /**
   * Most recent available pay check
   * @return lastPayPeriodIndicator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Most recent available pay check")

  public Boolean getLastPayPeriodIndicator() {
    return lastPayPeriodIndicator;
  }


  public void setLastPayPeriodIndicator(Boolean lastPayPeriodIndicator) {
    
    
    
    this.lastPayPeriodIndicator = lastPayPeriodIndicator;
  }


  public DirectPayStatements mainPayStatementFields(MainPayStatementFields mainPayStatementFields) {
    
    
    
    
    this.mainPayStatementFields = mainPayStatementFields;
    return this;
  }

   /**
   * Get mainPayStatementFields
   * @return mainPayStatementFields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public MainPayStatementFields getMainPayStatementFields() {
    return mainPayStatementFields;
  }


  public void setMainPayStatementFields(MainPayStatementFields mainPayStatementFields) {
    
    
    
    this.mainPayStatementFields = mainPayStatementFields;
  }


  public DirectPayStatements earnings(List<Earnings> earnings) {
    
    
    
    
    this.earnings = earnings;
    return this;
  }

  public DirectPayStatements addEarningsItem(Earnings earningsItem) {
    this.earnings.add(earningsItem);
    return this;
  }

   /**
   * Categorization of pay, for the pay period
   * @return earnings
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Categorization of pay, for the pay period")

  public List<Earnings> getEarnings() {
    return earnings;
  }


  public void setEarnings(List<Earnings> earnings) {
    
    
    
    this.earnings = earnings;
  }


  public DirectPayStatements deductions(List<Deductions> deductions) {
    
    
    
    
    this.deductions = deductions;
    return this;
  }

  public DirectPayStatements addDeductionsItem(Deductions deductionsItem) {
    if (this.deductions == null) {
      this.deductions = new ArrayList<>();
    }
    this.deductions.add(deductionsItem);
    return this;
  }

   /**
   * Deductions from the pay check
   * @return deductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deductions from the pay check")

  public List<Deductions> getDeductions() {
    return deductions;
  }


  public void setDeductions(List<Deductions> deductions) {
    
    
    
    this.deductions = deductions;
  }


  public DirectPayStatements directDeposits(List<DirectDeposits> directDeposits) {
    
    
    
    
    this.directDeposits = directDeposits;
    return this;
  }

  public DirectPayStatements addDirectDepositsItem(DirectDeposits directDepositsItem) {
    if (this.directDeposits == null) {
      this.directDeposits = new ArrayList<>();
    }
    this.directDeposits.add(directDepositsItem);
    return this;
  }

   /**
   * Direct deposit information for the paycheck
   * @return directDeposits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Direct deposit information for the paycheck")

  public List<DirectDeposits> getDirectDeposits() {
    return directDeposits;
  }


  public void setDirectDeposits(List<DirectDeposits> directDeposits) {
    
    
    
    this.directDeposits = directDeposits;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DirectPayStatements instance itself
   */
  public DirectPayStatements putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectPayStatements directPayStatements = (DirectPayStatements) o;
    return Objects.equals(this.payrollPayHistoryId, directPayStatements.payrollPayHistoryId) &&
        Objects.equals(this.lastPayPeriodIndicator, directPayStatements.lastPayPeriodIndicator) &&
        Objects.equals(this.mainPayStatementFields, directPayStatements.mainPayStatementFields) &&
        Objects.equals(this.earnings, directPayStatements.earnings) &&
        Objects.equals(this.deductions, directPayStatements.deductions) &&
        Objects.equals(this.directDeposits, directPayStatements.directDeposits)&&
        Objects.equals(this.additionalProperties, directPayStatements.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payrollPayHistoryId, lastPayPeriodIndicator, mainPayStatementFields, earnings, deductions, directDeposits, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectPayStatements {\n");
    sb.append("    payrollPayHistoryId: ").append(toIndentedString(payrollPayHistoryId)).append("\n");
    sb.append("    lastPayPeriodIndicator: ").append(toIndentedString(lastPayPeriodIndicator)).append("\n");
    sb.append("    mainPayStatementFields: ").append(toIndentedString(mainPayStatementFields)).append("\n");
    sb.append("    earnings: ").append(toIndentedString(earnings)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    directDeposits: ").append(toIndentedString(directDeposits)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payrollPayHistoryId");
    openapiFields.add("lastPayPeriodIndicator");
    openapiFields.add("mainPayStatementFields");
    openapiFields.add("earnings");
    openapiFields.add("deductions");
    openapiFields.add("directDeposits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("payrollPayHistoryId");
    openapiRequiredFields.add("lastPayPeriodIndicator");
    openapiRequiredFields.add("mainPayStatementFields");
    openapiRequiredFields.add("earnings");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DirectPayStatements
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DirectPayStatements.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectPayStatements is not found in the empty JSON string", DirectPayStatements.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DirectPayStatements.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("payrollPayHistoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payrollPayHistoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payrollPayHistoryId").toString()));
      }
      // validate the required field `mainPayStatementFields`
      MainPayStatementFields.validateJsonObject(jsonObj.getAsJsonObject("mainPayStatementFields"));
      // ensure the json data is an array
      if (!jsonObj.get("earnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `earnings` to be an array in the JSON string but got `%s`", jsonObj.get("earnings").toString()));
      }

      JsonArray jsonArrayearnings = jsonObj.getAsJsonArray("earnings");
      // validate the required field `earnings` (array)
      for (int i = 0; i < jsonArrayearnings.size(); i++) {
        Earnings.validateJsonObject(jsonArrayearnings.get(i).getAsJsonObject());
      };
      if (jsonObj.get("deductions") != null && !jsonObj.get("deductions").isJsonNull()) {
        JsonArray jsonArraydeductions = jsonObj.getAsJsonArray("deductions");
        if (jsonArraydeductions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deductions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deductions` to be an array in the JSON string but got `%s`", jsonObj.get("deductions").toString()));
          }

          // validate the optional field `deductions` (array)
          for (int i = 0; i < jsonArraydeductions.size(); i++) {
            Deductions.validateJsonObject(jsonArraydeductions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("directDeposits") != null && !jsonObj.get("directDeposits").isJsonNull()) {
        JsonArray jsonArraydirectDeposits = jsonObj.getAsJsonArray("directDeposits");
        if (jsonArraydirectDeposits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("directDeposits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `directDeposits` to be an array in the JSON string but got `%s`", jsonObj.get("directDeposits").toString()));
          }

          // validate the optional field `directDeposits` (array)
          for (int i = 0; i < jsonArraydirectDeposits.size(); i++) {
            DirectDeposits.validateJsonObject(jsonArraydirectDeposits.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectPayStatements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectPayStatements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectPayStatements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectPayStatements.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectPayStatements>() {
           @Override
           public void write(JsonWriter out, DirectPayStatements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectPayStatements read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DirectPayStatements instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DirectPayStatements given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DirectPayStatements
  * @throws IOException if the JSON string is invalid with respect to DirectPayStatements
  */
  public static DirectPayStatements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectPayStatements.class);
  }

 /**
  * Convert an instance of DirectPayStatements to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

