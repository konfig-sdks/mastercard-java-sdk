/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PayrollEmployeeRecord;
import com.konfigthis.client.model.PayrollEmploymentRecord;
import com.konfigthis.client.model.PayrollVOEIncomeRecord;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PayrollEmploymentHistoryVOE
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayrollEmploymentHistoryVOE {
  public static final String SERIALIZED_NAME_AS_OF_DATE = "asOfDate";
  @SerializedName(SERIALIZED_NAME_AS_OF_DATE)
  private Long asOfDate;

  public static final String SERIALIZED_NAME_EMPLOYER_NAME = "employerName";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_NAME)
  private String employerName;

  public static final String SERIALIZED_NAME_PAYROLL_SOURCE = "payrollSource";
  @SerializedName(SERIALIZED_NAME_PAYROLL_SOURCE)
  private String payrollSource;

  public static final String SERIALIZED_NAME_EMPLOYEE = "employee";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE)
  private PayrollEmployeeRecord employee;

  public static final String SERIALIZED_NAME_EMPLOYMENT = "employment";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT)
  private PayrollEmploymentRecord employment;

  public static final String SERIALIZED_NAME_INCOME = "income";
  @SerializedName(SERIALIZED_NAME_INCOME)
  private PayrollVOEIncomeRecord income;

  public PayrollEmploymentHistoryVOE() {
  }

  public PayrollEmploymentHistoryVOE asOfDate(Long asOfDate) {
    
    
    
    
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * The last time the payroll data was updated in the payroll provider&#39;s system
   * @return asOfDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1596175200", required = true, value = "The last time the payroll data was updated in the payroll provider's system")

  public Long getAsOfDate() {
    return asOfDate;
  }


  public void setAsOfDate(Long asOfDate) {
    
    
    
    this.asOfDate = asOfDate;
  }


  public PayrollEmploymentHistoryVOE employerName(String employerName) {
    
    
    
    
    this.employerName = employerName;
    return this;
  }

   /**
   * Name of the employer as stated by the employer in the payroll system
   * @return employerName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ACME INC", required = true, value = "Name of the employer as stated by the employer in the payroll system")

  public String getEmployerName() {
    return employerName;
  }


  public void setEmployerName(String employerName) {
    
    
    
    this.employerName = employerName;
  }


  public PayrollEmploymentHistoryVOE payrollSource(String payrollSource) {
    
    
    
    
    this.payrollSource = payrollSource;
    return this;
  }

   /**
   * The name of the payroll source where the data was retrieved
   * @return payrollSource
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "finPayroll", required = true, value = "The name of the payroll source where the data was retrieved")

  public String getPayrollSource() {
    return payrollSource;
  }


  public void setPayrollSource(String payrollSource) {
    
    
    
    this.payrollSource = payrollSource;
  }


  public PayrollEmploymentHistoryVOE employee(PayrollEmployeeRecord employee) {
    
    
    
    
    this.employee = employee;
    return this;
  }

   /**
   * Get employee
   * @return employee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PayrollEmployeeRecord getEmployee() {
    return employee;
  }


  public void setEmployee(PayrollEmployeeRecord employee) {
    
    
    
    this.employee = employee;
  }


  public PayrollEmploymentHistoryVOE employment(PayrollEmploymentRecord employment) {
    
    
    
    
    this.employment = employment;
    return this;
  }

   /**
   * Get employment
   * @return employment
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PayrollEmploymentRecord getEmployment() {
    return employment;
  }


  public void setEmployment(PayrollEmploymentRecord employment) {
    
    
    
    this.employment = employment;
  }


  public PayrollEmploymentHistoryVOE income(PayrollVOEIncomeRecord income) {
    
    
    
    
    this.income = income;
    return this;
  }

   /**
   * Get income
   * @return income
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PayrollVOEIncomeRecord getIncome() {
    return income;
  }


  public void setIncome(PayrollVOEIncomeRecord income) {
    
    
    
    this.income = income;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayrollEmploymentHistoryVOE instance itself
   */
  public PayrollEmploymentHistoryVOE putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayrollEmploymentHistoryVOE payrollEmploymentHistoryVOE = (PayrollEmploymentHistoryVOE) o;
    return Objects.equals(this.asOfDate, payrollEmploymentHistoryVOE.asOfDate) &&
        Objects.equals(this.employerName, payrollEmploymentHistoryVOE.employerName) &&
        Objects.equals(this.payrollSource, payrollEmploymentHistoryVOE.payrollSource) &&
        Objects.equals(this.employee, payrollEmploymentHistoryVOE.employee) &&
        Objects.equals(this.employment, payrollEmploymentHistoryVOE.employment) &&
        Objects.equals(this.income, payrollEmploymentHistoryVOE.income)&&
        Objects.equals(this.additionalProperties, payrollEmploymentHistoryVOE.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asOfDate, employerName, payrollSource, employee, employment, income, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayrollEmploymentHistoryVOE {\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    employerName: ").append(toIndentedString(employerName)).append("\n");
    sb.append("    payrollSource: ").append(toIndentedString(payrollSource)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    employment: ").append(toIndentedString(employment)).append("\n");
    sb.append("    income: ").append(toIndentedString(income)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asOfDate");
    openapiFields.add("employerName");
    openapiFields.add("payrollSource");
    openapiFields.add("employee");
    openapiFields.add("employment");
    openapiFields.add("income");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asOfDate");
    openapiRequiredFields.add("employerName");
    openapiRequiredFields.add("payrollSource");
    openapiRequiredFields.add("employee");
    openapiRequiredFields.add("employment");
    openapiRequiredFields.add("income");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayrollEmploymentHistoryVOE
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayrollEmploymentHistoryVOE.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayrollEmploymentHistoryVOE is not found in the empty JSON string", PayrollEmploymentHistoryVOE.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PayrollEmploymentHistoryVOE.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("employerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employerName").toString()));
      }
      if (!jsonObj.get("payrollSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payrollSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payrollSource").toString()));
      }
      // validate the required field `employee`
      PayrollEmployeeRecord.validateJsonObject(jsonObj.getAsJsonObject("employee"));
      // validate the required field `employment`
      PayrollEmploymentRecord.validateJsonObject(jsonObj.getAsJsonObject("employment"));
      // validate the required field `income`
      PayrollVOEIncomeRecord.validateJsonObject(jsonObj.getAsJsonObject("income"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayrollEmploymentHistoryVOE.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayrollEmploymentHistoryVOE' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayrollEmploymentHistoryVOE> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayrollEmploymentHistoryVOE.class));

       return (TypeAdapter<T>) new TypeAdapter<PayrollEmploymentHistoryVOE>() {
           @Override
           public void write(JsonWriter out, PayrollEmploymentHistoryVOE value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayrollEmploymentHistoryVOE read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayrollEmploymentHistoryVOE instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayrollEmploymentHistoryVOE given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayrollEmploymentHistoryVOE
  * @throws IOException if the JSON string is invalid with respect to PayrollEmploymentHistoryVOE
  */
  public static PayrollEmploymentHistoryVOE fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayrollEmploymentHistoryVOE.class);
  }

 /**
  * Convert an instance of PayrollEmploymentHistoryVOE to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

