/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Parameters supplied by the client requesting the analytics.
 */
@ApiModel(description = "Parameters supplied by the client requesting the analytics.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AnalyticsReportData {
  public static final String SERIALIZED_NAME_FOR_CRA_PURPOSE = "forCraPurpose";
  @SerializedName(SERIALIZED_NAME_FOR_CRA_PURPOSE)
  private Boolean forCraPurpose;

  public static final String SERIALIZED_NAME_APPLICANT_IS_PERSONAL_GUARANTOR = "applicantIsPersonalGuarantor";
  @SerializedName(SERIALIZED_NAME_APPLICANT_IS_PERSONAL_GUARANTOR)
  private Boolean applicantIsPersonalGuarantor;

  public static final String SERIALIZED_NAME_TIME_INTERVAL_TYPES = "timeIntervalTypes";
  @SerializedName(SERIALIZED_NAME_TIME_INTERVAL_TYPES)
  private List<String> timeIntervalTypes = null;

  public AnalyticsReportData() {
  }

  public AnalyticsReportData forCraPurpose(Boolean forCraPurpose) {
    
    
    
    
    this.forCraPurpose = forCraPurpose;
    return this;
  }

   /**
   * Field to indicate if the requested report is for CRA or NONCRA. For small business lending or other similar business use cases, pass the value as “true” for purposes of this field.
   * @return forCraPurpose
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Field to indicate if the requested report is for CRA or NONCRA. For small business lending or other similar business use cases, pass the value as “true” for purposes of this field.")

  public Boolean getForCraPurpose() {
    return forCraPurpose;
  }


  public void setForCraPurpose(Boolean forCraPurpose) {
    
    
    
    this.forCraPurpose = forCraPurpose;
  }


  public AnalyticsReportData applicantIsPersonalGuarantor(Boolean applicantIsPersonalGuarantor) {
    
    
    
    
    this.applicantIsPersonalGuarantor = applicantIsPersonalGuarantor;
    return this;
  }

   /**
   * Field to indicate if the business owner will personally guarantee the loan. If true, a consumer record will be required.
   * @return applicantIsPersonalGuarantor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Field to indicate if the business owner will personally guarantee the loan. If true, a consumer record will be required.")

  public Boolean getApplicantIsPersonalGuarantor() {
    return applicantIsPersonalGuarantor;
  }


  public void setApplicantIsPersonalGuarantor(Boolean applicantIsPersonalGuarantor) {
    
    
    
    this.applicantIsPersonalGuarantor = applicantIsPersonalGuarantor;
  }


  public AnalyticsReportData timeIntervalTypes(List<String> timeIntervalTypes) {
    
    
    
    
    this.timeIntervalTypes = timeIntervalTypes;
    return this;
  }

  public AnalyticsReportData addTimeIntervalTypesItem(String timeIntervalTypesItem) {
    if (this.timeIntervalTypes == null) {
      this.timeIntervalTypes = new ArrayList<>();
    }
    this.timeIntervalTypes.add(timeIntervalTypesItem);
    return this;
  }

   /**
   * Requested time interval for attribute values.
   * @return timeIntervalTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"MONTHLY_CALENDAR\"]", value = "Requested time interval for attribute values.")

  public List<String> getTimeIntervalTypes() {
    return timeIntervalTypes;
  }


  public void setTimeIntervalTypes(List<String> timeIntervalTypes) {
    
    
    
    this.timeIntervalTypes = timeIntervalTypes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AnalyticsReportData instance itself
   */
  public AnalyticsReportData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyticsReportData analyticsReportData = (AnalyticsReportData) o;
    return Objects.equals(this.forCraPurpose, analyticsReportData.forCraPurpose) &&
        Objects.equals(this.applicantIsPersonalGuarantor, analyticsReportData.applicantIsPersonalGuarantor) &&
        Objects.equals(this.timeIntervalTypes, analyticsReportData.timeIntervalTypes)&&
        Objects.equals(this.additionalProperties, analyticsReportData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forCraPurpose, applicantIsPersonalGuarantor, timeIntervalTypes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyticsReportData {\n");
    sb.append("    forCraPurpose: ").append(toIndentedString(forCraPurpose)).append("\n");
    sb.append("    applicantIsPersonalGuarantor: ").append(toIndentedString(applicantIsPersonalGuarantor)).append("\n");
    sb.append("    timeIntervalTypes: ").append(toIndentedString(timeIntervalTypes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forCraPurpose");
    openapiFields.add("applicantIsPersonalGuarantor");
    openapiFields.add("timeIntervalTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("forCraPurpose");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AnalyticsReportData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AnalyticsReportData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyticsReportData is not found in the empty JSON string", AnalyticsReportData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnalyticsReportData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("timeIntervalTypes") != null && !jsonObj.get("timeIntervalTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeIntervalTypes` to be an array in the JSON string but got `%s`", jsonObj.get("timeIntervalTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyticsReportData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyticsReportData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyticsReportData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyticsReportData.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyticsReportData>() {
           @Override
           public void write(JsonWriter out, AnalyticsReportData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyticsReportData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AnalyticsReportData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AnalyticsReportData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AnalyticsReportData
  * @throws IOException if the JSON string is invalid with respect to AnalyticsReportData
  */
  public static AnalyticsReportData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyticsReportData.class);
  }

 /**
  * Convert an instance of AnalyticsReportData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

