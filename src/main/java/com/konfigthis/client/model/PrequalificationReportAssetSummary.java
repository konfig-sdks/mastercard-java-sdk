/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PrequalificationReportAssetSummary
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PrequalificationReportAssetSummary {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "availableBalance";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
  private Double availableBalance;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE = "currentBalance";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE)
  private Double currentBalance;

  public static final String SERIALIZED_NAME_TWO_MONTH_AVERAGE = "twoMonthAverage";
  @SerializedName(SERIALIZED_NAME_TWO_MONTH_AVERAGE)
  private Double twoMonthAverage;

  public static final String SERIALIZED_NAME_SIX_MONTH_AVERAGE = "sixMonthAverage";
  @SerializedName(SERIALIZED_NAME_SIX_MONTH_AVERAGE)
  private Double sixMonthAverage;

  public static final String SERIALIZED_NAME_BEGINNING_BALANCE = "beginningBalance";
  @SerializedName(SERIALIZED_NAME_BEGINNING_BALANCE)
  private Double beginningBalance;

  public PrequalificationReportAssetSummary() {
  }

  public PrequalificationReportAssetSummary type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The asset type: \&quot;checking\&quot;, \&quot;savings\&quot;, \&quot;moneyMarket\&quot;, \&quot;cd\&quot;, \&quot;investment\&quot;
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "checking", value = "The asset type: \"checking\", \"savings\", \"moneyMarket\", \"cd\", \"investment\"")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public PrequalificationReportAssetSummary availableBalance(Double availableBalance) {
    
    
    
    
    this.availableBalance = availableBalance;
    return this;
  }

  public PrequalificationReportAssetSummary availableBalance(Integer availableBalance) {
    
    
    
    
    this.availableBalance = availableBalance.doubleValue();
    return this;
  }

   /**
   * The available balance for the account
   * @return availableBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000", value = "The available balance for the account")

  public Double getAvailableBalance() {
    return availableBalance;
  }


  public void setAvailableBalance(Double availableBalance) {
    
    
    
    this.availableBalance = availableBalance;
  }


  public PrequalificationReportAssetSummary currentBalance(Double currentBalance) {
    
    
    
    
    this.currentBalance = currentBalance;
    return this;
  }

  public PrequalificationReportAssetSummary currentBalance(Integer currentBalance) {
    
    
    
    
    this.currentBalance = currentBalance.doubleValue();
    return this;
  }

   /**
   * The current balance of the account
   * @return currentBalance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1000", required = true, value = "The current balance of the account")

  public Double getCurrentBalance() {
    return currentBalance;
  }


  public void setCurrentBalance(Double currentBalance) {
    
    
    
    this.currentBalance = currentBalance;
  }


  public PrequalificationReportAssetSummary twoMonthAverage(Double twoMonthAverage) {
    
    
    
    
    this.twoMonthAverage = twoMonthAverage;
    return this;
  }

  public PrequalificationReportAssetSummary twoMonthAverage(Integer twoMonthAverage) {
    
    
    
    
    this.twoMonthAverage = twoMonthAverage.doubleValue();
    return this;
  }

   /**
   * The two month average daily balance of the account
   * @return twoMonthAverage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "-1865.96", required = true, value = "The two month average daily balance of the account")

  public Double getTwoMonthAverage() {
    return twoMonthAverage;
  }


  public void setTwoMonthAverage(Double twoMonthAverage) {
    
    
    
    this.twoMonthAverage = twoMonthAverage;
  }


  public PrequalificationReportAssetSummary sixMonthAverage(Double sixMonthAverage) {
    
    
    
    
    this.sixMonthAverage = sixMonthAverage;
    return this;
  }

  public PrequalificationReportAssetSummary sixMonthAverage(Integer sixMonthAverage) {
    
    
    
    
    this.sixMonthAverage = sixMonthAverage.doubleValue();
    return this;
  }

   /**
   * The six month average daily balance of the account
   * @return sixMonthAverage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-7616.01", value = "The six month average daily balance of the account")

  public Double getSixMonthAverage() {
    return sixMonthAverage;
  }


  public void setSixMonthAverage(Double sixMonthAverage) {
    
    
    
    this.sixMonthAverage = sixMonthAverage;
  }


  public PrequalificationReportAssetSummary beginningBalance(Double beginningBalance) {
    
    
    
    
    this.beginningBalance = beginningBalance;
    return this;
  }

  public PrequalificationReportAssetSummary beginningBalance(Integer beginningBalance) {
    
    
    
    
    this.beginningBalance = beginningBalance.doubleValue();
    return this;
  }

   /**
   * The beginning balance of the account per the time period of the report
   * @return beginningBalance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "-17795.6", required = true, value = "The beginning balance of the account per the time period of the report")

  public Double getBeginningBalance() {
    return beginningBalance;
  }


  public void setBeginningBalance(Double beginningBalance) {
    
    
    
    this.beginningBalance = beginningBalance;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PrequalificationReportAssetSummary instance itself
   */
  public PrequalificationReportAssetSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrequalificationReportAssetSummary prequalificationReportAssetSummary = (PrequalificationReportAssetSummary) o;
    return Objects.equals(this.type, prequalificationReportAssetSummary.type) &&
        Objects.equals(this.availableBalance, prequalificationReportAssetSummary.availableBalance) &&
        Objects.equals(this.currentBalance, prequalificationReportAssetSummary.currentBalance) &&
        Objects.equals(this.twoMonthAverage, prequalificationReportAssetSummary.twoMonthAverage) &&
        Objects.equals(this.sixMonthAverage, prequalificationReportAssetSummary.sixMonthAverage) &&
        Objects.equals(this.beginningBalance, prequalificationReportAssetSummary.beginningBalance)&&
        Objects.equals(this.additionalProperties, prequalificationReportAssetSummary.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, availableBalance, currentBalance, twoMonthAverage, sixMonthAverage, beginningBalance, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrequalificationReportAssetSummary {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    twoMonthAverage: ").append(toIndentedString(twoMonthAverage)).append("\n");
    sb.append("    sixMonthAverage: ").append(toIndentedString(sixMonthAverage)).append("\n");
    sb.append("    beginningBalance: ").append(toIndentedString(beginningBalance)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("availableBalance");
    openapiFields.add("currentBalance");
    openapiFields.add("twoMonthAverage");
    openapiFields.add("sixMonthAverage");
    openapiFields.add("beginningBalance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currentBalance");
    openapiRequiredFields.add("twoMonthAverage");
    openapiRequiredFields.add("beginningBalance");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PrequalificationReportAssetSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PrequalificationReportAssetSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrequalificationReportAssetSummary is not found in the empty JSON string", PrequalificationReportAssetSummary.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrequalificationReportAssetSummary.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrequalificationReportAssetSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrequalificationReportAssetSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrequalificationReportAssetSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrequalificationReportAssetSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PrequalificationReportAssetSummary>() {
           @Override
           public void write(JsonWriter out, PrequalificationReportAssetSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PrequalificationReportAssetSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PrequalificationReportAssetSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PrequalificationReportAssetSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PrequalificationReportAssetSummary
  * @throws IOException if the JSON string is invalid with respect to PrequalificationReportAssetSummary
  */
  public static PrequalificationReportAssetSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrequalificationReportAssetSummary.class);
  }

 /**
  * Convert an instance of PrequalificationReportAssetSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

