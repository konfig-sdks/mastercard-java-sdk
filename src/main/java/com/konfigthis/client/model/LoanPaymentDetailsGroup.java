/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LoanPaymentDetailsLoan;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Group details
 */
@ApiModel(description = "Group details")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LoanPaymentDetailsGroup {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_GROUP_NUMBER = "groupNumber";
  @SerializedName(SERIALIZED_NAME_GROUP_NUMBER)
  private String groupNumber;

  public static final String SERIALIZED_NAME_GROUP_PAYMENT_NUMBER = "groupPaymentNumber";
  @SerializedName(SERIALIZED_NAME_GROUP_PAYMENT_NUMBER)
  private String groupPaymentNumber;

  public static final String SERIALIZED_NAME_GROUP_PAYMENT_ADDRESS = "groupPaymentAddress";
  @SerializedName(SERIALIZED_NAME_GROUP_PAYMENT_ADDRESS)
  private String groupPaymentAddress;

  public static final String SERIALIZED_NAME_GROUP_FUTURE_PAYOFF_AMOUNT = "groupFuturePayoffAmount";
  @SerializedName(SERIALIZED_NAME_GROUP_FUTURE_PAYOFF_AMOUNT)
  private Double groupFuturePayoffAmount;

  public static final String SERIALIZED_NAME_GROUP_FUTURE_PAYOFF_DATE = "groupFuturePayoffDate";
  @SerializedName(SERIALIZED_NAME_GROUP_FUTURE_PAYOFF_DATE)
  private OffsetDateTime groupFuturePayoffDate;

  public static final String SERIALIZED_NAME_GROUP_LOAN_DETAIL = "groupLoanDetail";
  @SerializedName(SERIALIZED_NAME_GROUP_LOAN_DETAIL)
  private List<LoanPaymentDetailsLoan> groupLoanDetail = new ArrayList<>();

  public LoanPaymentDetailsGroup() {
  }

  public LoanPaymentDetailsGroup accountId(String accountId) {
    
    
    
    
    this.accountId = accountId;
    return this;
  }

   /**
   * An account ID
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5011648377", required = true, value = "An account ID")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    
    
    
    this.accountId = accountId;
  }


  public LoanPaymentDetailsGroup groupNumber(String groupNumber) {
    
    
    
    
    this.groupNumber = groupNumber;
    return this;
  }

   /**
   * Institution&#39;s ID of the Student Loan Group
   * @return groupNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3210-Group A", required = true, value = "Institution's ID of the Student Loan Group")

  public String getGroupNumber() {
    return groupNumber;
  }


  public void setGroupNumber(String groupNumber) {
    
    
    
    this.groupNumber = groupNumber;
  }


  public LoanPaymentDetailsGroup groupPaymentNumber(String groupPaymentNumber) {
    
    
    
    
    this.groupPaymentNumber = groupPaymentNumber;
    return this;
  }

   /**
   * The payment number given by the institution. This number is typically for manual payments. This is not an ACH payment number.
   * @return groupPaymentNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "00001234895413-A", required = true, value = "The payment number given by the institution. This number is typically for manual payments. This is not an ACH payment number.")

  public String getGroupPaymentNumber() {
    return groupPaymentNumber;
  }


  public void setGroupPaymentNumber(String groupPaymentNumber) {
    
    
    
    this.groupPaymentNumber = groupPaymentNumber;
  }


  public LoanPaymentDetailsGroup groupPaymentAddress(String groupPaymentAddress) {
    
    
    
    
    this.groupPaymentAddress = groupPaymentAddress;
    return this;
  }

   /**
   * The payment address to which send manual payments should be sent
   * @return groupPaymentAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "P.O. Box 123 Sioux Falls, IA 51054", required = true, value = "The payment address to which send manual payments should be sent")

  public String getGroupPaymentAddress() {
    return groupPaymentAddress;
  }


  public void setGroupPaymentAddress(String groupPaymentAddress) {
    
    
    
    this.groupPaymentAddress = groupPaymentAddress;
  }


  public LoanPaymentDetailsGroup groupFuturePayoffAmount(Double groupFuturePayoffAmount) {
    
    
    
    
    this.groupFuturePayoffAmount = groupFuturePayoffAmount;
    return this;
  }

  public LoanPaymentDetailsGroup groupFuturePayoffAmount(Integer groupFuturePayoffAmount) {
    
    
    
    
    this.groupFuturePayoffAmount = groupFuturePayoffAmount.doubleValue();
    return this;
  }

   /**
   * The payoff amount for the group
   * @return groupFuturePayoffAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7500", value = "The payoff amount for the group")

  public Double getGroupFuturePayoffAmount() {
    return groupFuturePayoffAmount;
  }


  public void setGroupFuturePayoffAmount(Double groupFuturePayoffAmount) {
    
    
    
    this.groupFuturePayoffAmount = groupFuturePayoffAmount;
  }


  public LoanPaymentDetailsGroup groupFuturePayoffDate(OffsetDateTime groupFuturePayoffDate) {
    
    
    
    
    this.groupFuturePayoffDate = groupFuturePayoffDate;
    return this;
  }

   /**
   * The date to which the \&quot;Future Payoff Amount\&quot; applies
   * @return groupFuturePayoffDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-01T00:00Z", value = "The date to which the \"Future Payoff Amount\" applies")

  public OffsetDateTime getGroupFuturePayoffDate() {
    return groupFuturePayoffDate;
  }


  public void setGroupFuturePayoffDate(OffsetDateTime groupFuturePayoffDate) {
    
    
    
    this.groupFuturePayoffDate = groupFuturePayoffDate;
  }


  public LoanPaymentDetailsGroup groupLoanDetail(List<LoanPaymentDetailsLoan> groupLoanDetail) {
    
    
    
    
    this.groupLoanDetail = groupLoanDetail;
    return this;
  }

  public LoanPaymentDetailsGroup addGroupLoanDetailItem(LoanPaymentDetailsLoan groupLoanDetailItem) {
    this.groupLoanDetail.add(groupLoanDetailItem);
    return this;
  }

   /**
   * Get groupLoanDetail
   * @return groupLoanDetail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<LoanPaymentDetailsLoan> getGroupLoanDetail() {
    return groupLoanDetail;
  }


  public void setGroupLoanDetail(List<LoanPaymentDetailsLoan> groupLoanDetail) {
    
    
    
    this.groupLoanDetail = groupLoanDetail;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LoanPaymentDetailsGroup instance itself
   */
  public LoanPaymentDetailsGroup putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanPaymentDetailsGroup loanPaymentDetailsGroup = (LoanPaymentDetailsGroup) o;
    return Objects.equals(this.accountId, loanPaymentDetailsGroup.accountId) &&
        Objects.equals(this.groupNumber, loanPaymentDetailsGroup.groupNumber) &&
        Objects.equals(this.groupPaymentNumber, loanPaymentDetailsGroup.groupPaymentNumber) &&
        Objects.equals(this.groupPaymentAddress, loanPaymentDetailsGroup.groupPaymentAddress) &&
        Objects.equals(this.groupFuturePayoffAmount, loanPaymentDetailsGroup.groupFuturePayoffAmount) &&
        Objects.equals(this.groupFuturePayoffDate, loanPaymentDetailsGroup.groupFuturePayoffDate) &&
        Objects.equals(this.groupLoanDetail, loanPaymentDetailsGroup.groupLoanDetail)&&
        Objects.equals(this.additionalProperties, loanPaymentDetailsGroup.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, groupNumber, groupPaymentNumber, groupPaymentAddress, groupFuturePayoffAmount, groupFuturePayoffDate, groupLoanDetail, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanPaymentDetailsGroup {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    groupNumber: ").append(toIndentedString(groupNumber)).append("\n");
    sb.append("    groupPaymentNumber: ").append(toIndentedString(groupPaymentNumber)).append("\n");
    sb.append("    groupPaymentAddress: ").append(toIndentedString(groupPaymentAddress)).append("\n");
    sb.append("    groupFuturePayoffAmount: ").append(toIndentedString(groupFuturePayoffAmount)).append("\n");
    sb.append("    groupFuturePayoffDate: ").append(toIndentedString(groupFuturePayoffDate)).append("\n");
    sb.append("    groupLoanDetail: ").append(toIndentedString(groupLoanDetail)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("groupNumber");
    openapiFields.add("groupPaymentNumber");
    openapiFields.add("groupPaymentAddress");
    openapiFields.add("groupFuturePayoffAmount");
    openapiFields.add("groupFuturePayoffDate");
    openapiFields.add("groupLoanDetail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("groupNumber");
    openapiRequiredFields.add("groupPaymentNumber");
    openapiRequiredFields.add("groupPaymentAddress");
    openapiRequiredFields.add("groupLoanDetail");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LoanPaymentDetailsGroup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LoanPaymentDetailsGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoanPaymentDetailsGroup is not found in the empty JSON string", LoanPaymentDetailsGroup.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoanPaymentDetailsGroup.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("groupNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupNumber").toString()));
      }
      if (!jsonObj.get("groupPaymentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupPaymentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupPaymentNumber").toString()));
      }
      if (!jsonObj.get("groupPaymentAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupPaymentAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupPaymentAddress").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("groupLoanDetail").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupLoanDetail` to be an array in the JSON string but got `%s`", jsonObj.get("groupLoanDetail").toString()));
      }

      JsonArray jsonArraygroupLoanDetail = jsonObj.getAsJsonArray("groupLoanDetail");
      // validate the required field `groupLoanDetail` (array)
      for (int i = 0; i < jsonArraygroupLoanDetail.size(); i++) {
        LoanPaymentDetailsLoan.validateJsonObject(jsonArraygroupLoanDetail.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoanPaymentDetailsGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoanPaymentDetailsGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoanPaymentDetailsGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoanPaymentDetailsGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<LoanPaymentDetailsGroup>() {
           @Override
           public void write(JsonWriter out, LoanPaymentDetailsGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LoanPaymentDetailsGroup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LoanPaymentDetailsGroup instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoanPaymentDetailsGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoanPaymentDetailsGroup
  * @throws IOException if the JSON string is invalid with respect to LoanPaymentDetailsGroup
  */
  public static LoanPaymentDetailsGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoanPaymentDetailsGroup.class);
  }

 /**
  * Convert an instance of LoanPaymentDetailsGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

