/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CashFlowMonthlyCashFlowCreditSummaries;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CashFlowCashFlowCreditSummary
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CashFlowCashFlowCreditSummary {
  public static final String SERIALIZED_NAME_MONTHLY_CASH_FLOW_CREDIT_SUMMARIES = "monthlyCashFlowCreditSummaries";
  @SerializedName(SERIALIZED_NAME_MONTHLY_CASH_FLOW_CREDIT_SUMMARIES)
  private List<CashFlowMonthlyCashFlowCreditSummaries> monthlyCashFlowCreditSummaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_TWELVE_MONTH_CREDIT_TOTAL = "twelveMonthCreditTotal";
  @SerializedName(SERIALIZED_NAME_TWELVE_MONTH_CREDIT_TOTAL)
  private Double twelveMonthCreditTotal;

  public static final String SERIALIZED_NAME_TWELVE_MONTH_CREDIT_TOTAL_LESS_TRANSFERS = "twelveMonthCreditTotalLessTransfers";
  @SerializedName(SERIALIZED_NAME_TWELVE_MONTH_CREDIT_TOTAL_LESS_TRANSFERS)
  private Double twelveMonthCreditTotalLessTransfers;

  public static final String SERIALIZED_NAME_SIX_MONTH_CREDIT_TOTAL = "sixMonthCreditTotal";
  @SerializedName(SERIALIZED_NAME_SIX_MONTH_CREDIT_TOTAL)
  private Double sixMonthCreditTotal;

  public static final String SERIALIZED_NAME_SIX_MONTH_CREDIT_TOTAL_LESS_TRANSFERS = "sixMonthCreditTotalLessTransfers";
  @SerializedName(SERIALIZED_NAME_SIX_MONTH_CREDIT_TOTAL_LESS_TRANSFERS)
  private Double sixMonthCreditTotalLessTransfers;

  public static final String SERIALIZED_NAME_TWO_MONTH_CREDIT_TOTAL = "twoMonthCreditTotal";
  @SerializedName(SERIALIZED_NAME_TWO_MONTH_CREDIT_TOTAL)
  private Double twoMonthCreditTotal;

  public static final String SERIALIZED_NAME_TWO_MONTH_CREDIT_TOTAL_LESS_TRANSFERS = "twoMonthCreditTotalLessTransfers";
  @SerializedName(SERIALIZED_NAME_TWO_MONTH_CREDIT_TOTAL_LESS_TRANSFERS)
  private Double twoMonthCreditTotalLessTransfers;

  public CashFlowCashFlowCreditSummary() {
  }

  public CashFlowCashFlowCreditSummary monthlyCashFlowCreditSummaries(List<CashFlowMonthlyCashFlowCreditSummaries> monthlyCashFlowCreditSummaries) {
    
    
    
    
    this.monthlyCashFlowCreditSummaries = monthlyCashFlowCreditSummaries;
    return this;
  }

  public CashFlowCashFlowCreditSummary addMonthlyCashFlowCreditSummariesItem(CashFlowMonthlyCashFlowCreditSummaries monthlyCashFlowCreditSummariesItem) {
    this.monthlyCashFlowCreditSummaries.add(monthlyCashFlowCreditSummariesItem);
    return this;
  }

   /**
   * List of attributes for each month
   * @return monthlyCashFlowCreditSummaries
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of attributes for each month")

  public List<CashFlowMonthlyCashFlowCreditSummaries> getMonthlyCashFlowCreditSummaries() {
    return monthlyCashFlowCreditSummaries;
  }


  public void setMonthlyCashFlowCreditSummaries(List<CashFlowMonthlyCashFlowCreditSummaries> monthlyCashFlowCreditSummaries) {
    
    
    
    this.monthlyCashFlowCreditSummaries = monthlyCashFlowCreditSummaries;
  }


  public CashFlowCashFlowCreditSummary twelveMonthCreditTotal(Double twelveMonthCreditTotal) {
    
    
    
    
    this.twelveMonthCreditTotal = twelveMonthCreditTotal;
    return this;
  }

  public CashFlowCashFlowCreditSummary twelveMonthCreditTotal(Integer twelveMonthCreditTotal) {
    
    
    
    
    this.twelveMonthCreditTotal = twelveMonthCreditTotal.doubleValue();
    return this;
  }

   /**
   * Sum of all credit transactions for each month for all accounts
   * @return twelveMonthCreditTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1200", required = true, value = "Sum of all credit transactions for each month for all accounts")

  public Double getTwelveMonthCreditTotal() {
    return twelveMonthCreditTotal;
  }


  public void setTwelveMonthCreditTotal(Double twelveMonthCreditTotal) {
    
    
    
    this.twelveMonthCreditTotal = twelveMonthCreditTotal;
  }


  public CashFlowCashFlowCreditSummary twelveMonthCreditTotalLessTransfers(Double twelveMonthCreditTotalLessTransfers) {
    
    
    
    
    this.twelveMonthCreditTotalLessTransfers = twelveMonthCreditTotalLessTransfers;
    return this;
  }

  public CashFlowCashFlowCreditSummary twelveMonthCreditTotalLessTransfers(Integer twelveMonthCreditTotalLessTransfers) {
    
    
    
    
    this.twelveMonthCreditTotalLessTransfers = twelveMonthCreditTotalLessTransfers.doubleValue();
    return this;
  }

   /**
   * Sum of all monthly credit transactions without transfers for all accounts
   * @return twelveMonthCreditTotalLessTransfers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1000", required = true, value = "Sum of all monthly credit transactions without transfers for all accounts")

  public Double getTwelveMonthCreditTotalLessTransfers() {
    return twelveMonthCreditTotalLessTransfers;
  }


  public void setTwelveMonthCreditTotalLessTransfers(Double twelveMonthCreditTotalLessTransfers) {
    
    
    
    this.twelveMonthCreditTotalLessTransfers = twelveMonthCreditTotalLessTransfers;
  }


  public CashFlowCashFlowCreditSummary sixMonthCreditTotal(Double sixMonthCreditTotal) {
    
    
    
    
    this.sixMonthCreditTotal = sixMonthCreditTotal;
    return this;
  }

  public CashFlowCashFlowCreditSummary sixMonthCreditTotal(Integer sixMonthCreditTotal) {
    
    
    
    
    this.sixMonthCreditTotal = sixMonthCreditTotal.doubleValue();
    return this;
  }

   /**
   * Six month sum of all credit transactions
   * @return sixMonthCreditTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "750", required = true, value = "Six month sum of all credit transactions")

  public Double getSixMonthCreditTotal() {
    return sixMonthCreditTotal;
  }


  public void setSixMonthCreditTotal(Double sixMonthCreditTotal) {
    
    
    
    this.sixMonthCreditTotal = sixMonthCreditTotal;
  }


  public CashFlowCashFlowCreditSummary sixMonthCreditTotalLessTransfers(Double sixMonthCreditTotalLessTransfers) {
    
    
    
    
    this.sixMonthCreditTotalLessTransfers = sixMonthCreditTotalLessTransfers;
    return this;
  }

  public CashFlowCashFlowCreditSummary sixMonthCreditTotalLessTransfers(Integer sixMonthCreditTotalLessTransfers) {
    
    
    
    
    this.sixMonthCreditTotalLessTransfers = sixMonthCreditTotalLessTransfers.doubleValue();
    return this;
  }

   /**
   * Six month sum of all monthly credit transactions without transfers for all accounts
   * @return sixMonthCreditTotalLessTransfers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "500", required = true, value = "Six month sum of all monthly credit transactions without transfers for all accounts")

  public Double getSixMonthCreditTotalLessTransfers() {
    return sixMonthCreditTotalLessTransfers;
  }


  public void setSixMonthCreditTotalLessTransfers(Double sixMonthCreditTotalLessTransfers) {
    
    
    
    this.sixMonthCreditTotalLessTransfers = sixMonthCreditTotalLessTransfers;
  }


  public CashFlowCashFlowCreditSummary twoMonthCreditTotal(Double twoMonthCreditTotal) {
    
    
    
    
    this.twoMonthCreditTotal = twoMonthCreditTotal;
    return this;
  }

  public CashFlowCashFlowCreditSummary twoMonthCreditTotal(Integer twoMonthCreditTotal) {
    
    
    
    
    this.twoMonthCreditTotal = twoMonthCreditTotal.doubleValue();
    return this;
  }

   /**
   * Two month sum of all credit transactions
   * @return twoMonthCreditTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "150", required = true, value = "Two month sum of all credit transactions")

  public Double getTwoMonthCreditTotal() {
    return twoMonthCreditTotal;
  }


  public void setTwoMonthCreditTotal(Double twoMonthCreditTotal) {
    
    
    
    this.twoMonthCreditTotal = twoMonthCreditTotal;
  }


  public CashFlowCashFlowCreditSummary twoMonthCreditTotalLessTransfers(Double twoMonthCreditTotalLessTransfers) {
    
    
    
    
    this.twoMonthCreditTotalLessTransfers = twoMonthCreditTotalLessTransfers;
    return this;
  }

  public CashFlowCashFlowCreditSummary twoMonthCreditTotalLessTransfers(Integer twoMonthCreditTotalLessTransfers) {
    
    
    
    
    this.twoMonthCreditTotalLessTransfers = twoMonthCreditTotalLessTransfers.doubleValue();
    return this;
  }

   /**
   * Two month sum of all monthly credit transactions without transfers for all accounts
   * @return twoMonthCreditTotalLessTransfers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "100", required = true, value = "Two month sum of all monthly credit transactions without transfers for all accounts")

  public Double getTwoMonthCreditTotalLessTransfers() {
    return twoMonthCreditTotalLessTransfers;
  }


  public void setTwoMonthCreditTotalLessTransfers(Double twoMonthCreditTotalLessTransfers) {
    
    
    
    this.twoMonthCreditTotalLessTransfers = twoMonthCreditTotalLessTransfers;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CashFlowCashFlowCreditSummary instance itself
   */
  public CashFlowCashFlowCreditSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowCashFlowCreditSummary cashFlowCashFlowCreditSummary = (CashFlowCashFlowCreditSummary) o;
    return Objects.equals(this.monthlyCashFlowCreditSummaries, cashFlowCashFlowCreditSummary.monthlyCashFlowCreditSummaries) &&
        Objects.equals(this.twelveMonthCreditTotal, cashFlowCashFlowCreditSummary.twelveMonthCreditTotal) &&
        Objects.equals(this.twelveMonthCreditTotalLessTransfers, cashFlowCashFlowCreditSummary.twelveMonthCreditTotalLessTransfers) &&
        Objects.equals(this.sixMonthCreditTotal, cashFlowCashFlowCreditSummary.sixMonthCreditTotal) &&
        Objects.equals(this.sixMonthCreditTotalLessTransfers, cashFlowCashFlowCreditSummary.sixMonthCreditTotalLessTransfers) &&
        Objects.equals(this.twoMonthCreditTotal, cashFlowCashFlowCreditSummary.twoMonthCreditTotal) &&
        Objects.equals(this.twoMonthCreditTotalLessTransfers, cashFlowCashFlowCreditSummary.twoMonthCreditTotalLessTransfers)&&
        Objects.equals(this.additionalProperties, cashFlowCashFlowCreditSummary.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monthlyCashFlowCreditSummaries, twelveMonthCreditTotal, twelveMonthCreditTotalLessTransfers, sixMonthCreditTotal, sixMonthCreditTotalLessTransfers, twoMonthCreditTotal, twoMonthCreditTotalLessTransfers, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowCashFlowCreditSummary {\n");
    sb.append("    monthlyCashFlowCreditSummaries: ").append(toIndentedString(monthlyCashFlowCreditSummaries)).append("\n");
    sb.append("    twelveMonthCreditTotal: ").append(toIndentedString(twelveMonthCreditTotal)).append("\n");
    sb.append("    twelveMonthCreditTotalLessTransfers: ").append(toIndentedString(twelveMonthCreditTotalLessTransfers)).append("\n");
    sb.append("    sixMonthCreditTotal: ").append(toIndentedString(sixMonthCreditTotal)).append("\n");
    sb.append("    sixMonthCreditTotalLessTransfers: ").append(toIndentedString(sixMonthCreditTotalLessTransfers)).append("\n");
    sb.append("    twoMonthCreditTotal: ").append(toIndentedString(twoMonthCreditTotal)).append("\n");
    sb.append("    twoMonthCreditTotalLessTransfers: ").append(toIndentedString(twoMonthCreditTotalLessTransfers)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("monthlyCashFlowCreditSummaries");
    openapiFields.add("twelveMonthCreditTotal");
    openapiFields.add("twelveMonthCreditTotalLessTransfers");
    openapiFields.add("sixMonthCreditTotal");
    openapiFields.add("sixMonthCreditTotalLessTransfers");
    openapiFields.add("twoMonthCreditTotal");
    openapiFields.add("twoMonthCreditTotalLessTransfers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("monthlyCashFlowCreditSummaries");
    openapiRequiredFields.add("twelveMonthCreditTotal");
    openapiRequiredFields.add("twelveMonthCreditTotalLessTransfers");
    openapiRequiredFields.add("sixMonthCreditTotal");
    openapiRequiredFields.add("sixMonthCreditTotalLessTransfers");
    openapiRequiredFields.add("twoMonthCreditTotal");
    openapiRequiredFields.add("twoMonthCreditTotalLessTransfers");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CashFlowCashFlowCreditSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CashFlowCashFlowCreditSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CashFlowCashFlowCreditSummary is not found in the empty JSON string", CashFlowCashFlowCreditSummary.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CashFlowCashFlowCreditSummary.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("monthlyCashFlowCreditSummaries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthlyCashFlowCreditSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("monthlyCashFlowCreditSummaries").toString()));
      }

      JsonArray jsonArraymonthlyCashFlowCreditSummaries = jsonObj.getAsJsonArray("monthlyCashFlowCreditSummaries");
      // validate the required field `monthlyCashFlowCreditSummaries` (array)
      for (int i = 0; i < jsonArraymonthlyCashFlowCreditSummaries.size(); i++) {
        CashFlowMonthlyCashFlowCreditSummaries.validateJsonObject(jsonArraymonthlyCashFlowCreditSummaries.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CashFlowCashFlowCreditSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CashFlowCashFlowCreditSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CashFlowCashFlowCreditSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CashFlowCashFlowCreditSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<CashFlowCashFlowCreditSummary>() {
           @Override
           public void write(JsonWriter out, CashFlowCashFlowCreditSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CashFlowCashFlowCreditSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CashFlowCashFlowCreditSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CashFlowCashFlowCreditSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CashFlowCashFlowCreditSummary
  * @throws IOException if the JSON string is invalid with respect to CashFlowCashFlowCreditSummary
  */
  public static CashFlowCashFlowCreditSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CashFlowCashFlowCreditSummary.class);
  }

 /**
  * Convert an instance of CashFlowCashFlowCreditSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

