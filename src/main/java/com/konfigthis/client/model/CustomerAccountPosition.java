/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Details for investment account holdings
 */
@ApiModel(description = "Details for investment account holdings")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomerAccountPosition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private Double units;

  public static final String SERIALIZED_NAME_CURRENT_PRICE = "currentPrice";
  @SerializedName(SERIALIZED_NAME_CURRENT_PRICE)
  private Double currentPrice;

  public static final String SERIALIZED_NAME_SECURITY_NAME = "securityName";
  @SerializedName(SERIALIZED_NAME_SECURITY_NAME)
  private String securityName;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public static final String SERIALIZED_NAME_MARKET_VALUE = "marketValue";
  @SerializedName(SERIALIZED_NAME_MARKET_VALUE)
  private Double marketValue;

  public static final String SERIALIZED_NAME_CHANGE_PERCENT = "changePercent";
  @SerializedName(SERIALIZED_NAME_CHANGE_PERCENT)
  private Double changePercent;

  public static final String SERIALIZED_NAME_DAILY_CHANGE = "dailyChange";
  @SerializedName(SERIALIZED_NAME_DAILY_CHANGE)
  private Double dailyChange;

  public static final String SERIALIZED_NAME_COST_BASIS = "costBasis";
  @SerializedName(SERIALIZED_NAME_COST_BASIS)
  private Double costBasis;

  public static final String SERIALIZED_NAME_HOLD_TYPE = "holdType";
  @SerializedName(SERIALIZED_NAME_HOLD_TYPE)
  private String holdType;

  public static final String SERIALIZED_NAME_INV_SECURITY_TYPE = "invSecurityType";
  @SerializedName(SERIALIZED_NAME_INV_SECURITY_TYPE)
  private String invSecurityType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CURRENT_PRICE_DATE = "currentPriceDate";
  @SerializedName(SERIALIZED_NAME_CURRENT_PRICE_DATE)
  private Long currentPriceDate;

  public static final String SERIALIZED_NAME_SECURITY_TYPE = "securityType";
  @SerializedName(SERIALIZED_NAME_SECURITY_TYPE)
  private String securityType;

  public static final String SERIALIZED_NAME_MF_TYPE = "mfType";
  @SerializedName(SERIALIZED_NAME_MF_TYPE)
  private String mfType;

  public static final String SERIALIZED_NAME_POS_TYPE = "posType";
  @SerializedName(SERIALIZED_NAME_POS_TYPE)
  private String posType;

  public static final String SERIALIZED_NAME_TOTAL_G_L_DOLLAR = "totalGLDollar";
  @SerializedName(SERIALIZED_NAME_TOTAL_G_L_DOLLAR)
  private Double totalGLDollar;

  public static final String SERIALIZED_NAME_TOTAL_G_L_PERCENT = "totalGLPercent";
  @SerializedName(SERIALIZED_NAME_TOTAL_G_L_PERCENT)
  private Double totalGLPercent;

  public static final String SERIALIZED_NAME_OPTION_STRIKE_PRICE = "optionStrikePrice";
  @SerializedName(SERIALIZED_NAME_OPTION_STRIKE_PRICE)
  private Double optionStrikePrice;

  public static final String SERIALIZED_NAME_OPTION_TYPE = "optionType";
  @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
  private String optionType;

  public static final String SERIALIZED_NAME_OPTION_SHARES_PER_CONTRACT = "optionSharesPerContract";
  @SerializedName(SERIALIZED_NAME_OPTION_SHARES_PER_CONTRACT)
  private Double optionSharesPerContract;

  public static final String SERIALIZED_NAME_OPTION_EXPIRE_DATE = "optionExpireDate";
  @SerializedName(SERIALIZED_NAME_OPTION_EXPIRE_DATE)
  private LocalDate optionExpireDate;

  public static final String SERIALIZED_NAME_FI_ASSET_CLASS = "fiAssetClass";
  @SerializedName(SERIALIZED_NAME_FI_ASSET_CLASS)
  private String fiAssetClass;

  public static final String SERIALIZED_NAME_ASSET_CLASS = "assetClass";
  @SerializedName(SERIALIZED_NAME_ASSET_CLASS)
  private String assetClass;

  public static final String SERIALIZED_NAME_CURRENCY_RATE = "currencyRate";
  @SerializedName(SERIALIZED_NAME_CURRENCY_RATE)
  private Double currencyRate;

  public static final String SERIALIZED_NAME_SECURITY_ID = "securityId";
  @SerializedName(SERIALIZED_NAME_SECURITY_ID)
  private String securityId;

  public static final String SERIALIZED_NAME_SECURITY_ID_TYPE = "securityIdType";
  @SerializedName(SERIALIZED_NAME_SECURITY_ID_TYPE)
  private String securityIdType;

  public static final String SERIALIZED_NAME_COST_BASIS_PER_SHARE = "costBasisPerShare";
  @SerializedName(SERIALIZED_NAME_COST_BASIS_PER_SHARE)
  private Double costBasisPerShare;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_TYPE = "subAccountType";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_TYPE)
  private String subAccountType;

  public static final String SERIALIZED_NAME_SECURITY_CURRENCY = "securityCurrency";
  @SerializedName(SERIALIZED_NAME_SECURITY_CURRENCY)
  private String securityCurrency;

  public static final String SERIALIZED_NAME_TODAY_G_L_DOLLAR = "todayGLDollar";
  @SerializedName(SERIALIZED_NAME_TODAY_G_L_DOLLAR)
  private Double todayGLDollar;

  public static final String SERIALIZED_NAME_TODAY_G_L_PERCENT = "todayGLPercent";
  @SerializedName(SERIALIZED_NAME_TODAY_G_L_PERCENT)
  private Double todayGLPercent;

  public CustomerAccountPosition() {
  }

  public CustomerAccountPosition description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the holding
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DELTA AIR LINES INC", value = "The description of the holding")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CustomerAccountPosition id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the investment position
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "454678080", value = "The ID of the investment position")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public CustomerAccountPosition symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The investment position&#39;s market ticker symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DAL", value = "The investment position's market ticker symbol")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public CustomerAccountPosition units(Double units) {
    
    
    
    
    this.units = units;
    return this;
  }

  public CustomerAccountPosition units(Integer units) {
    
    
    
    
    this.units = units.doubleValue();
    return this;
  }

   /**
   * The number of units of the holding
   * @return units
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6.537", value = "The number of units of the holding")

  public Double getUnits() {
    return units;
  }


  public void setUnits(Double units) {
    
    
    
    this.units = units;
  }


  public CustomerAccountPosition currentPrice(Double currentPrice) {
    
    
    
    
    this.currentPrice = currentPrice;
    return this;
  }

  public CustomerAccountPosition currentPrice(Integer currentPrice) {
    
    
    
    
    this.currentPrice = currentPrice.doubleValue();
    return this;
  }

   /**
   * The current price of the investment holding
   * @return currentPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "41.585", value = "The current price of the investment holding")

  public Double getCurrentPrice() {
    return currentPrice;
  }


  public void setCurrentPrice(Double currentPrice) {
    
    
    
    this.currentPrice = currentPrice;
  }


  public CustomerAccountPosition securityName(String securityName) {
    
    
    
    
    this.securityName = securityName;
    return this;
  }

   /**
   * The security name for the investment holding
   * @return securityName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DELTA AIR LINES INC", value = "The security name for the investment holding")

  public String getSecurityName() {
    return securityName;
  }


  public void setSecurityName(String securityName) {
    
    
    
    this.securityName = securityName;
  }


  public CustomerAccountPosition transactionType(String transactionType) {
    
    
    
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * The transaction type of the holding, such as cash, margin, and more
   * @return transactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Margin", value = "The transaction type of the holding, such as cash, margin, and more")

  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    
    
    
    this.transactionType = transactionType;
  }


  public CustomerAccountPosition marketValue(Double marketValue) {
    
    
    
    
    this.marketValue = marketValue;
    return this;
  }

  public CustomerAccountPosition marketValue(Integer marketValue) {
    
    
    
    
    this.marketValue = marketValue.doubleValue();
    return this;
  }

   /**
   * Market value of an investment position at the time of retrieval
   * @return marketValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "271.84", value = "Market value of an investment position at the time of retrieval")

  public Double getMarketValue() {
    return marketValue;
  }


  public void setMarketValue(Double marketValue) {
    
    
    
    this.marketValue = marketValue;
  }


  public CustomerAccountPosition changePercent(Double changePercent) {
    
    
    
    
    this.changePercent = changePercent;
    return this;
  }

  public CustomerAccountPosition changePercent(Integer changePercent) {
    
    
    
    
    this.changePercent = changePercent.doubleValue();
    return this;
  }

   /**
   * The percent change in value since the previous day
   * @return changePercent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "170.02", value = "The percent change in value since the previous day")

  public Double getChangePercent() {
    return changePercent;
  }


  public void setChangePercent(Double changePercent) {
    
    
    
    this.changePercent = changePercent;
  }


  public CustomerAccountPosition dailyChange(Double dailyChange) {
    
    
    
    
    this.dailyChange = dailyChange;
    return this;
  }

  public CustomerAccountPosition dailyChange(Integer dailyChange) {
    
    
    
    
    this.dailyChange = dailyChange.doubleValue();
    return this;
  }

   /**
   * The value amount change since the previous day
   * @return dailyChange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "180.03", value = "The value amount change since the previous day")

  public Double getDailyChange() {
    return dailyChange;
  }


  public void setDailyChange(Double dailyChange) {
    
    
    
    this.dailyChange = dailyChange;
  }


  public CustomerAccountPosition costBasis(Double costBasis) {
    
    
    
    
    this.costBasis = costBasis;
    return this;
  }

  public CustomerAccountPosition costBasis(Integer costBasis) {
    
    
    
    
    this.costBasis = costBasis.doubleValue();
    return this;
  }

   /**
   * The total cost of acquiring the security
   * @return costBasis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "190.01", value = "The total cost of acquiring the security")

  public Double getCostBasis() {
    return costBasis;
  }


  public void setCostBasis(Double costBasis) {
    
    
    
    this.costBasis = costBasis;
  }


  public CustomerAccountPosition holdType(String holdType) {
    
    
    
    
    this.holdType = holdType;
    return this;
  }

   /**
   * The type of the holding
   * @return holdType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INVESTMENT", value = "The type of the holding")

  public String getHoldType() {
    return holdType;
  }


  public void setHoldType(String holdType) {
    
    
    
    this.holdType = holdType;
  }


  public CustomerAccountPosition invSecurityType(String invSecurityType) {
    
    
    
    
    this.invSecurityType = invSecurityType;
    return this;
  }

   /**
   * The security type for the investment holding
   * @return invSecurityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OTHERINFO", value = "The security type for the investment holding")

  public String getInvSecurityType() {
    return invSecurityType;
  }


  public void setInvSecurityType(String invSecurityType) {
    
    
    
    this.invSecurityType = invSecurityType;
  }


  public CustomerAccountPosition status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the holding
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A", value = "The status of the holding")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public CustomerAccountPosition currentPriceDate(Long currentPriceDate) {
    
    
    
    
    this.currentPriceDate = currentPriceDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return currentPriceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getCurrentPriceDate() {
    return currentPriceDate;
  }


  public void setCurrentPriceDate(Long currentPriceDate) {
    
    
    
    this.currentPriceDate = currentPriceDate;
  }


  public CustomerAccountPosition securityType(String securityType) {
    
    
    
    
    this.securityType = securityType;
    return this;
  }

   /**
   * Type of security for the investment position
   * @return securityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Stock", value = "Type of security for the investment position")

  public String getSecurityType() {
    return securityType;
  }


  public void setSecurityType(String securityType) {
    
    
    
    this.securityType = securityType;
  }


  public CustomerAccountPosition mfType(String mfType) {
    
    
    
    
    this.mfType = mfType;
    return this;
  }

   /**
   * Type of mutual fund, such as open ended
   * @return mfType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OPENEND", value = "Type of mutual fund, such as open ended")

  public String getMfType() {
    return mfType;
  }


  public void setMfType(String mfType) {
    
    
    
    this.mfType = mfType;
  }


  public CustomerAccountPosition posType(String posType) {
    
    
    
    
    this.posType = posType;
    return this;
  }

   /**
   * Fund type assigned by the FI (long or short)
   * @return posType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Long", value = "Fund type assigned by the FI (long or short)")

  public String getPosType() {
    return posType;
  }


  public void setPosType(String posType) {
    
    
    
    this.posType = posType;
  }


  public CustomerAccountPosition totalGLDollar(Double totalGLDollar) {
    
    
    
    
    this.totalGLDollar = totalGLDollar;
    return this;
  }

  public CustomerAccountPosition totalGLDollar(Integer totalGLDollar) {
    
    
    
    
    this.totalGLDollar = totalGLDollar.doubleValue();
    return this;
  }

   /**
   * Total gain and loss of the position at the time of aggregation in dollars
   * @return totalGLDollar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "162742.9", value = "Total gain and loss of the position at the time of aggregation in dollars")

  public Double getTotalGLDollar() {
    return totalGLDollar;
  }


  public void setTotalGLDollar(Double totalGLDollar) {
    
    
    
    this.totalGLDollar = totalGLDollar;
  }


  public CustomerAccountPosition totalGLPercent(Double totalGLPercent) {
    
    
    
    
    this.totalGLPercent = totalGLPercent;
    return this;
  }

  public CustomerAccountPosition totalGLPercent(Integer totalGLPercent) {
    
    
    
    
    this.totalGLPercent = totalGLPercent.doubleValue();
    return this;
  }

   /**
   * Total gain and loss of the position at the time of aggregation in percentage
   * @return totalGLPercent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "68.89", value = "Total gain and loss of the position at the time of aggregation in percentage")

  public Double getTotalGLPercent() {
    return totalGLPercent;
  }


  public void setTotalGLPercent(Double totalGLPercent) {
    
    
    
    this.totalGLPercent = totalGLPercent;
  }


  public CustomerAccountPosition optionStrikePrice(Double optionStrikePrice) {
    
    
    
    
    this.optionStrikePrice = optionStrikePrice;
    return this;
  }

  public CustomerAccountPosition optionStrikePrice(Integer optionStrikePrice) {
    
    
    
    
    this.optionStrikePrice = optionStrikePrice.doubleValue();
    return this;
  }

   /**
   * The strike price of the option contract
   * @return optionStrikePrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50", value = "The strike price of the option contract")

  public Double getOptionStrikePrice() {
    return optionStrikePrice;
  }


  public void setOptionStrikePrice(Double optionStrikePrice) {
    
    
    
    this.optionStrikePrice = optionStrikePrice;
  }


  public CustomerAccountPosition optionType(String optionType) {
    
    
    
    
    this.optionType = optionType;
    return this;
  }

   /**
   * The type of option contract (PUT or CALL)
   * @return optionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PUT", value = "The type of option contract (PUT or CALL)")

  public String getOptionType() {
    return optionType;
  }


  public void setOptionType(String optionType) {
    
    
    
    this.optionType = optionType;
  }


  public CustomerAccountPosition optionSharesPerContract(Double optionSharesPerContract) {
    
    
    
    
    this.optionSharesPerContract = optionSharesPerContract;
    return this;
  }

  public CustomerAccountPosition optionSharesPerContract(Integer optionSharesPerContract) {
    
    
    
    
    this.optionSharesPerContract = optionSharesPerContract.doubleValue();
    return this;
  }

   /**
   * The number of shares per option contract
   * @return optionSharesPerContract
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "The number of shares per option contract")

  public Double getOptionSharesPerContract() {
    return optionSharesPerContract;
  }


  public void setOptionSharesPerContract(Double optionSharesPerContract) {
    
    
    
    this.optionSharesPerContract = optionSharesPerContract;
  }


  public CustomerAccountPosition optionExpireDate(LocalDate optionExpireDate) {
    
    
    
    
    this.optionExpireDate = optionExpireDate;
    return this;
  }

   /**
   * Expiration date of option
   * @return optionExpireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiration date of option")

  public LocalDate getOptionExpireDate() {
    return optionExpireDate;
  }


  public void setOptionExpireDate(LocalDate optionExpireDate) {
    
    
    
    this.optionExpireDate = optionExpireDate;
  }


  public CustomerAccountPosition fiAssetClass(String fiAssetClass) {
    
    
    
    
    this.fiAssetClass = fiAssetClass;
    return this;
  }

   /**
   * Financial Institution (FI) defined asset class (COMMON STOCK, COMNEQTY, EQUITY/STOCK, CMA-ISA, CONVERTIBLE PREFERREDS, CORPORATE BONDS, OTHER MONEY FUNDS, ALLOCATION FUNDS, CMA-TAXABLE, FOREIGNEQUITYADRS, COMMONSTOCK, PREFERRED STOCKS, STABLE VALUE, FOREIGN EQUITY ADRS)
   * @return fiAssetClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "COMNEQTY", value = "Financial Institution (FI) defined asset class (COMMON STOCK, COMNEQTY, EQUITY/STOCK, CMA-ISA, CONVERTIBLE PREFERREDS, CORPORATE BONDS, OTHER MONEY FUNDS, ALLOCATION FUNDS, CMA-TAXABLE, FOREIGNEQUITYADRS, COMMONSTOCK, PREFERRED STOCKS, STABLE VALUE, FOREIGN EQUITY ADRS)")

  public String getFiAssetClass() {
    return fiAssetClass;
  }


  public void setFiAssetClass(String fiAssetClass) {
    
    
    
    this.fiAssetClass = fiAssetClass;
  }


  public CustomerAccountPosition assetClass(String assetClass) {
    
    
    
    
    this.assetClass = assetClass;
    return this;
  }

   /**
   * An asset class is a grouping of comparable financial securities. These include equities (stocks), fixed income (bonds), and cash equivalent or money market instruments. (DOMESTICBOND, LARGESTOCK, INTLSTOCK, MONEYMRKT, OTHER)
   * @return assetClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INTLSTOCK", value = "An asset class is a grouping of comparable financial securities. These include equities (stocks), fixed income (bonds), and cash equivalent or money market instruments. (DOMESTICBOND, LARGESTOCK, INTLSTOCK, MONEYMRKT, OTHER)")

  public String getAssetClass() {
    return assetClass;
  }


  public void setAssetClass(String assetClass) {
    
    
    
    this.assetClass = assetClass;
  }


  public CustomerAccountPosition currencyRate(Double currencyRate) {
    
    
    
    
    this.currencyRate = currencyRate;
    return this;
  }

  public CustomerAccountPosition currencyRate(Integer currencyRate) {
    
    
    
    
    this.currencyRate = currencyRate.doubleValue();
    return this;
  }

   /**
   * Currency rate, ratio of currency to original currency
   * @return currencyRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Currency rate, ratio of currency to original currency")

  public Double getCurrencyRate() {
    return currencyRate;
  }


  public void setCurrencyRate(Double currencyRate) {
    
    
    
    this.currencyRate = currencyRate;
  }


  public CustomerAccountPosition securityId(String securityId) {
    
    
    
    
    this.securityId = securityId;
    return this;
  }

   /**
   * The security ID of the transaction
   * @return securityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "25400W102", value = "The security ID of the transaction")

  public String getSecurityId() {
    return securityId;
  }


  public void setSecurityId(String securityId) {
    
    
    
    this.securityId = securityId;
  }


  public CustomerAccountPosition securityIdType(String securityIdType) {
    
    
    
    
    this.securityIdType = securityIdType;
    return this;
  }

   /**
   * The security type. This field is related to the &#x60;securityId&#x60; field. Possible values: * \&quot;CUSIP\&quot;  * \&quot;ISIN\&quot;  * \&quot;SEDOL\&quot;  * \&quot;SICC\&quot;  * \&quot;VALOR\&quot;  * \&quot;WKN\&quot;
   * @return securityIdType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CUSIP", value = "The security type. This field is related to the `securityId` field. Possible values: * \"CUSIP\"  * \"ISIN\"  * \"SEDOL\"  * \"SICC\"  * \"VALOR\"  * \"WKN\"")

  public String getSecurityIdType() {
    return securityIdType;
  }


  public void setSecurityIdType(String securityIdType) {
    
    
    
    this.securityIdType = securityIdType;
  }


  public CustomerAccountPosition costBasisPerShare(Double costBasisPerShare) {
    
    
    
    
    this.costBasisPerShare = costBasisPerShare;
    return this;
  }

  public CustomerAccountPosition costBasisPerShare(Integer costBasisPerShare) {
    
    
    
    
    this.costBasisPerShare = costBasisPerShare.doubleValue();
    return this;
  }

   /**
   * The per share cost of acquiring the security
   * @return costBasisPerShare
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "13.38", value = "The per share cost of acquiring the security")

  public Double getCostBasisPerShare() {
    return costBasisPerShare;
  }


  public void setCostBasisPerShare(Double costBasisPerShare) {
    
    
    
    this.costBasisPerShare = costBasisPerShare;
  }


  public CustomerAccountPosition subAccountType(String subAccountType) {
    
    
    
    
    this.subAccountType = subAccountType;
    return this;
  }

   /**
   * The subaccount&#39;s type, such as cash
   * @return subAccountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CASH", value = "The subaccount's type, such as cash")

  public String getSubAccountType() {
    return subAccountType;
  }


  public void setSubAccountType(String subAccountType) {
    
    
    
    this.subAccountType = subAccountType;
  }


  public CustomerAccountPosition securityCurrency(String securityCurrency) {
    
    
    
    
    this.securityCurrency = securityCurrency;
    return this;
  }

   /**
   * Symbol for the currency that the account is being converted into
   * @return securityCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "Symbol for the currency that the account is being converted into")

  public String getSecurityCurrency() {
    return securityCurrency;
  }


  public void setSecurityCurrency(String securityCurrency) {
    
    
    
    this.securityCurrency = securityCurrency;
  }


  public CustomerAccountPosition todayGLDollar(Double todayGLDollar) {
    
    
    
    
    this.todayGLDollar = todayGLDollar;
    return this;
  }

  public CustomerAccountPosition todayGLDollar(Integer todayGLDollar) {
    
    
    
    
    this.todayGLDollar = todayGLDollar.doubleValue();
    return this;
  }

   /**
   * The current day&#39;s gain and loss of the position at the time of aggregation in dollars
   * @return todayGLDollar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "16272.9", value = "The current day's gain and loss of the position at the time of aggregation in dollars")

  public Double getTodayGLDollar() {
    return todayGLDollar;
  }


  public void setTodayGLDollar(Double todayGLDollar) {
    
    
    
    this.todayGLDollar = todayGLDollar;
  }


  public CustomerAccountPosition todayGLPercent(Double todayGLPercent) {
    
    
    
    
    this.todayGLPercent = todayGLPercent;
    return this;
  }

  public CustomerAccountPosition todayGLPercent(Integer todayGLPercent) {
    
    
    
    
    this.todayGLPercent = todayGLPercent.doubleValue();
    return this;
  }

   /**
   * The current day&#39;s gain and loss of the position at the time of aggregation in percentage
   * @return todayGLPercent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "18.89", value = "The current day's gain and loss of the position at the time of aggregation in percentage")

  public Double getTodayGLPercent() {
    return todayGLPercent;
  }


  public void setTodayGLPercent(Double todayGLPercent) {
    
    
    
    this.todayGLPercent = todayGLPercent;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomerAccountPosition instance itself
   */
  public CustomerAccountPosition putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerAccountPosition customerAccountPosition = (CustomerAccountPosition) o;
    return Objects.equals(this.description, customerAccountPosition.description) &&
        Objects.equals(this.id, customerAccountPosition.id) &&
        Objects.equals(this.symbol, customerAccountPosition.symbol) &&
        Objects.equals(this.units, customerAccountPosition.units) &&
        Objects.equals(this.currentPrice, customerAccountPosition.currentPrice) &&
        Objects.equals(this.securityName, customerAccountPosition.securityName) &&
        Objects.equals(this.transactionType, customerAccountPosition.transactionType) &&
        Objects.equals(this.marketValue, customerAccountPosition.marketValue) &&
        Objects.equals(this.changePercent, customerAccountPosition.changePercent) &&
        Objects.equals(this.dailyChange, customerAccountPosition.dailyChange) &&
        Objects.equals(this.costBasis, customerAccountPosition.costBasis) &&
        Objects.equals(this.holdType, customerAccountPosition.holdType) &&
        Objects.equals(this.invSecurityType, customerAccountPosition.invSecurityType) &&
        Objects.equals(this.status, customerAccountPosition.status) &&
        Objects.equals(this.currentPriceDate, customerAccountPosition.currentPriceDate) &&
        Objects.equals(this.securityType, customerAccountPosition.securityType) &&
        Objects.equals(this.mfType, customerAccountPosition.mfType) &&
        Objects.equals(this.posType, customerAccountPosition.posType) &&
        Objects.equals(this.totalGLDollar, customerAccountPosition.totalGLDollar) &&
        Objects.equals(this.totalGLPercent, customerAccountPosition.totalGLPercent) &&
        Objects.equals(this.optionStrikePrice, customerAccountPosition.optionStrikePrice) &&
        Objects.equals(this.optionType, customerAccountPosition.optionType) &&
        Objects.equals(this.optionSharesPerContract, customerAccountPosition.optionSharesPerContract) &&
        Objects.equals(this.optionExpireDate, customerAccountPosition.optionExpireDate) &&
        Objects.equals(this.fiAssetClass, customerAccountPosition.fiAssetClass) &&
        Objects.equals(this.assetClass, customerAccountPosition.assetClass) &&
        Objects.equals(this.currencyRate, customerAccountPosition.currencyRate) &&
        Objects.equals(this.securityId, customerAccountPosition.securityId) &&
        Objects.equals(this.securityIdType, customerAccountPosition.securityIdType) &&
        Objects.equals(this.costBasisPerShare, customerAccountPosition.costBasisPerShare) &&
        Objects.equals(this.subAccountType, customerAccountPosition.subAccountType) &&
        Objects.equals(this.securityCurrency, customerAccountPosition.securityCurrency) &&
        Objects.equals(this.todayGLDollar, customerAccountPosition.todayGLDollar) &&
        Objects.equals(this.todayGLPercent, customerAccountPosition.todayGLPercent)&&
        Objects.equals(this.additionalProperties, customerAccountPosition.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, symbol, units, currentPrice, securityName, transactionType, marketValue, changePercent, dailyChange, costBasis, holdType, invSecurityType, status, currentPriceDate, securityType, mfType, posType, totalGLDollar, totalGLPercent, optionStrikePrice, optionType, optionSharesPerContract, optionExpireDate, fiAssetClass, assetClass, currencyRate, securityId, securityIdType, costBasisPerShare, subAccountType, securityCurrency, todayGLDollar, todayGLPercent, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerAccountPosition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    currentPrice: ").append(toIndentedString(currentPrice)).append("\n");
    sb.append("    securityName: ").append(toIndentedString(securityName)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    marketValue: ").append(toIndentedString(marketValue)).append("\n");
    sb.append("    changePercent: ").append(toIndentedString(changePercent)).append("\n");
    sb.append("    dailyChange: ").append(toIndentedString(dailyChange)).append("\n");
    sb.append("    costBasis: ").append(toIndentedString(costBasis)).append("\n");
    sb.append("    holdType: ").append(toIndentedString(holdType)).append("\n");
    sb.append("    invSecurityType: ").append(toIndentedString(invSecurityType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currentPriceDate: ").append(toIndentedString(currentPriceDate)).append("\n");
    sb.append("    securityType: ").append(toIndentedString(securityType)).append("\n");
    sb.append("    mfType: ").append(toIndentedString(mfType)).append("\n");
    sb.append("    posType: ").append(toIndentedString(posType)).append("\n");
    sb.append("    totalGLDollar: ").append(toIndentedString(totalGLDollar)).append("\n");
    sb.append("    totalGLPercent: ").append(toIndentedString(totalGLPercent)).append("\n");
    sb.append("    optionStrikePrice: ").append(toIndentedString(optionStrikePrice)).append("\n");
    sb.append("    optionType: ").append(toIndentedString(optionType)).append("\n");
    sb.append("    optionSharesPerContract: ").append(toIndentedString(optionSharesPerContract)).append("\n");
    sb.append("    optionExpireDate: ").append(toIndentedString(optionExpireDate)).append("\n");
    sb.append("    fiAssetClass: ").append(toIndentedString(fiAssetClass)).append("\n");
    sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
    sb.append("    currencyRate: ").append(toIndentedString(currencyRate)).append("\n");
    sb.append("    securityId: ").append(toIndentedString(securityId)).append("\n");
    sb.append("    securityIdType: ").append(toIndentedString(securityIdType)).append("\n");
    sb.append("    costBasisPerShare: ").append(toIndentedString(costBasisPerShare)).append("\n");
    sb.append("    subAccountType: ").append(toIndentedString(subAccountType)).append("\n");
    sb.append("    securityCurrency: ").append(toIndentedString(securityCurrency)).append("\n");
    sb.append("    todayGLDollar: ").append(toIndentedString(todayGLDollar)).append("\n");
    sb.append("    todayGLPercent: ").append(toIndentedString(todayGLPercent)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("symbol");
    openapiFields.add("units");
    openapiFields.add("currentPrice");
    openapiFields.add("securityName");
    openapiFields.add("transactionType");
    openapiFields.add("marketValue");
    openapiFields.add("changePercent");
    openapiFields.add("dailyChange");
    openapiFields.add("costBasis");
    openapiFields.add("holdType");
    openapiFields.add("invSecurityType");
    openapiFields.add("status");
    openapiFields.add("currentPriceDate");
    openapiFields.add("securityType");
    openapiFields.add("mfType");
    openapiFields.add("posType");
    openapiFields.add("totalGLDollar");
    openapiFields.add("totalGLPercent");
    openapiFields.add("optionStrikePrice");
    openapiFields.add("optionType");
    openapiFields.add("optionSharesPerContract");
    openapiFields.add("optionExpireDate");
    openapiFields.add("fiAssetClass");
    openapiFields.add("assetClass");
    openapiFields.add("currencyRate");
    openapiFields.add("securityId");
    openapiFields.add("securityIdType");
    openapiFields.add("costBasisPerShare");
    openapiFields.add("subAccountType");
    openapiFields.add("securityCurrency");
    openapiFields.add("todayGLDollar");
    openapiFields.add("todayGLPercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerAccountPosition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerAccountPosition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerAccountPosition is not found in the empty JSON string", CustomerAccountPosition.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("securityName") != null && !jsonObj.get("securityName").isJsonNull()) && !jsonObj.get("securityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityName").toString()));
      }
      if ((jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      if ((jsonObj.get("holdType") != null && !jsonObj.get("holdType").isJsonNull()) && !jsonObj.get("holdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holdType").toString()));
      }
      if ((jsonObj.get("invSecurityType") != null && !jsonObj.get("invSecurityType").isJsonNull()) && !jsonObj.get("invSecurityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invSecurityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invSecurityType").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("securityType") != null && !jsonObj.get("securityType").isJsonNull()) && !jsonObj.get("securityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityType").toString()));
      }
      if ((jsonObj.get("mfType") != null && !jsonObj.get("mfType").isJsonNull()) && !jsonObj.get("mfType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfType").toString()));
      }
      if ((jsonObj.get("posType") != null && !jsonObj.get("posType").isJsonNull()) && !jsonObj.get("posType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posType").toString()));
      }
      if ((jsonObj.get("optionType") != null && !jsonObj.get("optionType").isJsonNull()) && !jsonObj.get("optionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionType").toString()));
      }
      if ((jsonObj.get("fiAssetClass") != null && !jsonObj.get("fiAssetClass").isJsonNull()) && !jsonObj.get("fiAssetClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fiAssetClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fiAssetClass").toString()));
      }
      if ((jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) && !jsonObj.get("assetClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetClass").toString()));
      }
      if ((jsonObj.get("securityId") != null && !jsonObj.get("securityId").isJsonNull()) && !jsonObj.get("securityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityId").toString()));
      }
      if ((jsonObj.get("securityIdType") != null && !jsonObj.get("securityIdType").isJsonNull()) && !jsonObj.get("securityIdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityIdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityIdType").toString()));
      }
      if ((jsonObj.get("subAccountType") != null && !jsonObj.get("subAccountType").isJsonNull()) && !jsonObj.get("subAccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountType").toString()));
      }
      if ((jsonObj.get("securityCurrency") != null && !jsonObj.get("securityCurrency").isJsonNull()) && !jsonObj.get("securityCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityCurrency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerAccountPosition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerAccountPosition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerAccountPosition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerAccountPosition.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerAccountPosition>() {
           @Override
           public void write(JsonWriter out, CustomerAccountPosition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerAccountPosition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomerAccountPosition instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerAccountPosition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerAccountPosition
  * @throws IOException if the JSON string is invalid with respect to CustomerAccountPosition
  */
  public static CustomerAccountPosition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerAccountPosition.class);
  }

 /**
  * Convert an instance of CustomerAccountPosition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

