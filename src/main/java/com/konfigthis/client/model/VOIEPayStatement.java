/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Deduction;
import com.konfigthis.client.model.DirectDeposit;
import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.Employer;
import com.konfigthis.client.model.PayStat;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VOIEPayStatement
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VOIEPayStatement {
  public static final String SERIALIZED_NAME_PAY_PERIOD = "payPeriod";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD)
  private String payPeriod;

  public static final String SERIALIZED_NAME_BILLABLE = "billable";
  @SerializedName(SERIALIZED_NAME_BILLABLE)
  private Boolean billable;

  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  private String assetId;

  public static final String SERIALIZED_NAME_PAY_DATE = "payDate";
  @SerializedName(SERIALIZED_NAME_PAY_DATE)
  private Long payDate;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Long startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Long endDate;

  public static final String SERIALIZED_NAME_NET_PAY_CURRENT = "netPayCurrent";
  @SerializedName(SERIALIZED_NAME_NET_PAY_CURRENT)
  private Double netPayCurrent;

  public static final String SERIALIZED_NAME_NET_PAY_Y_T_D = "netPayYTD";
  @SerializedName(SERIALIZED_NAME_NET_PAY_Y_T_D)
  private Double netPayYTD;

  public static final String SERIALIZED_NAME_GROSS_PAY_CURRENT = "grossPayCurrent";
  @SerializedName(SERIALIZED_NAME_GROSS_PAY_CURRENT)
  private Double grossPayCurrent;

  public static final String SERIALIZED_NAME_GROSS_PAY_Y_T_D = "grossPayYTD";
  @SerializedName(SERIALIZED_NAME_GROSS_PAY_Y_T_D)
  private Double grossPayYTD;

  public static final String SERIALIZED_NAME_PAYROLL_PROVIDER = "payrollProvider";
  @SerializedName(SERIALIZED_NAME_PAYROLL_PROVIDER)
  private String payrollProvider;

  public static final String SERIALIZED_NAME_EMPLOYER = "employer";
  @SerializedName(SERIALIZED_NAME_EMPLOYER)
  private Employer employer;

  public static final String SERIALIZED_NAME_EMPLOYEE = "employee";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE)
  private Employee employee;

  public static final String SERIALIZED_NAME_PAY_STAT = "payStat";
  @SerializedName(SERIALIZED_NAME_PAY_STAT)
  private List<PayStat> payStat = null;

  public static final String SERIALIZED_NAME_DEDUCTIONS = "deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private List<Deduction> deductions = null;

  public static final String SERIALIZED_NAME_DIRECT_DEPOSITS = "directDeposits";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEPOSITS)
  private List<DirectDeposit> directDeposits = null;

  public VOIEPayStatement() {
  }

  public VOIEPayStatement payPeriod(String payPeriod) {
    
    
    
    
    this.payPeriod = payPeriod;
    return this;
  }

   /**
   * The pay period of the pay statement
   * @return payPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "LastPayPeriod", value = "The pay period of the pay statement")

  public String getPayPeriod() {
    return payPeriod;
  }


  public void setPayPeriod(String payPeriod) {
    
    
    
    this.payPeriod = payPeriod;
  }


  public VOIEPayStatement billable(Boolean billable) {
    
    
    
    
    this.billable = billable;
    return this;
  }

   /**
   * Designates whether the pay statement is billable
   * @return billable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Designates whether the pay statement is billable")

  public Boolean getBillable() {
    return billable;
  }


  public void setBillable(Boolean billable) {
    
    
    
    this.billable = billable;
  }


  public VOIEPayStatement assetId(String assetId) {
    
    
    
    
    this.assetId = assetId;
    return this;
  }

   /**
   * The asset ID of the stored pay statement
   * @return assetId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6f8fb0a0-e882-4f57-b672-cf53f1397581", value = "The asset ID of the stored pay statement")

  public String getAssetId() {
    return assetId;
  }


  public void setAssetId(String assetId) {
    
    
    
    this.assetId = assetId;
  }


  public VOIEPayStatement payDate(Long payDate) {
    
    
    
    
    this.payDate = payDate;
    return this;
  }

   /**
   * The listed pay date for the pay statement
   * @return payDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1559241000", value = "The listed pay date for the pay statement")

  public Long getPayDate() {
    return payDate;
  }


  public void setPayDate(Long payDate) {
    
    
    
    this.payDate = payDate;
  }


  public VOIEPayStatement startDate(Long startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The beginning of the pay period
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1557513000", value = "The beginning of the pay period")

  public Long getStartDate() {
    return startDate;
  }


  public void setStartDate(Long startDate) {
    
    
    
    this.startDate = startDate;
  }


  public VOIEPayStatement endDate(Long endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The end of the pay period
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1558722600", value = "The end of the pay period")

  public Long getEndDate() {
    return endDate;
  }


  public void setEndDate(Long endDate) {
    
    
    
    this.endDate = endDate;
  }


  public VOIEPayStatement netPayCurrent(Double netPayCurrent) {
    
    
    
    
    this.netPayCurrent = netPayCurrent;
    return this;
  }

  public VOIEPayStatement netPayCurrent(Integer netPayCurrent) {
    
    
    
    
    this.netPayCurrent = netPayCurrent.doubleValue();
    return this;
  }

   /**
   * The total pay after deductions for the employee for the current pay period
   * @return netPayCurrent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1802.22", value = "The total pay after deductions for the employee for the current pay period")

  public Double getNetPayCurrent() {
    return netPayCurrent;
  }


  public void setNetPayCurrent(Double netPayCurrent) {
    
    
    
    this.netPayCurrent = netPayCurrent;
  }


  public VOIEPayStatement netPayYTD(Double netPayYTD) {
    
    
    
    
    this.netPayYTD = netPayYTD;
    return this;
  }

  public VOIEPayStatement netPayYTD(Integer netPayYTD) {
    
    
    
    
    this.netPayYTD = netPayYTD.doubleValue();
    return this;
  }

   /**
   * The total accumulation of pay after deductions for the employee for the current pay year
   * @return netPayYTD
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "36000", value = "The total accumulation of pay after deductions for the employee for the current pay year")

  public Double getNetPayYTD() {
    return netPayYTD;
  }


  public void setNetPayYTD(Double netPayYTD) {
    
    
    
    this.netPayYTD = netPayYTD;
  }


  public VOIEPayStatement grossPayCurrent(Double grossPayCurrent) {
    
    
    
    
    this.grossPayCurrent = grossPayCurrent;
    return this;
  }

  public VOIEPayStatement grossPayCurrent(Integer grossPayCurrent) {
    
    
    
    
    this.grossPayCurrent = grossPayCurrent.doubleValue();
    return this;
  }

   /**
   * The total pay before deductions for the employee for the current pay period
   * @return grossPayCurrent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "24200", value = "The total pay before deductions for the employee for the current pay period")

  public Double getGrossPayCurrent() {
    return grossPayCurrent;
  }


  public void setGrossPayCurrent(Double grossPayCurrent) {
    
    
    
    this.grossPayCurrent = grossPayCurrent;
  }


  public VOIEPayStatement grossPayYTD(Double grossPayYTD) {
    
    
    
    
    this.grossPayYTD = grossPayYTD;
    return this;
  }

  public VOIEPayStatement grossPayYTD(Integer grossPayYTD) {
    
    
    
    
    this.grossPayYTD = grossPayYTD.doubleValue();
    return this;
  }

   /**
   * The total accumulation of pay before deductions for the employee for the current pay year
   * @return grossPayYTD
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "72600", value = "The total accumulation of pay before deductions for the employee for the current pay year")

  public Double getGrossPayYTD() {
    return grossPayYTD;
  }


  public void setGrossPayYTD(Double grossPayYTD) {
    
    
    
    this.grossPayYTD = grossPayYTD;
  }


  public VOIEPayStatement payrollProvider(String payrollProvider) {
    
    
    
    
    this.payrollProvider = payrollProvider;
    return this;
  }

   /**
   * The company that provides the pay stub.
   * @return payrollProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Finicity", value = "The company that provides the pay stub.")

  public String getPayrollProvider() {
    return payrollProvider;
  }


  public void setPayrollProvider(String payrollProvider) {
    
    
    
    this.payrollProvider = payrollProvider;
  }


  public VOIEPayStatement employer(Employer employer) {
    
    
    
    
    this.employer = employer;
    return this;
  }

   /**
   * Get employer
   * @return employer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Employer getEmployer() {
    return employer;
  }


  public void setEmployer(Employer employer) {
    
    
    
    this.employer = employer;
  }


  public VOIEPayStatement employee(Employee employee) {
    
    
    
    
    this.employee = employee;
    return this;
  }

   /**
   * Get employee
   * @return employee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Employee getEmployee() {
    return employee;
  }


  public void setEmployee(Employee employee) {
    
    
    
    this.employee = employee;
  }


  public VOIEPayStatement payStat(List<PayStat> payStat) {
    
    
    
    
    this.payStat = payStat;
    return this;
  }

  public VOIEPayStatement addPayStatItem(PayStat payStatItem) {
    if (this.payStat == null) {
      this.payStat = new ArrayList<>();
    }
    this.payStat.add(payStatItem);
    return this;
  }

   /**
   * Information pertaining to the earnings on the pay statement
   * @return payStat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information pertaining to the earnings on the pay statement")

  public List<PayStat> getPayStat() {
    return payStat;
  }


  public void setPayStat(List<PayStat> payStat) {
    
    
    
    this.payStat = payStat;
  }


  public VOIEPayStatement deductions(List<Deduction> deductions) {
    
    
    
    
    this.deductions = deductions;
    return this;
  }

  public VOIEPayStatement addDeductionsItem(Deduction deductionsItem) {
    if (this.deductions == null) {
      this.deductions = new ArrayList<>();
    }
    this.deductions.add(deductionsItem);
    return this;
  }

   /**
   * Information pertaining to deductions on the pay statement
   * @return deductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information pertaining to deductions on the pay statement")

  public List<Deduction> getDeductions() {
    return deductions;
  }


  public void setDeductions(List<Deduction> deductions) {
    
    
    
    this.deductions = deductions;
  }


  public VOIEPayStatement directDeposits(List<DirectDeposit> directDeposits) {
    
    
    
    
    this.directDeposits = directDeposits;
    return this;
  }

  public VOIEPayStatement addDirectDepositsItem(DirectDeposit directDepositsItem) {
    if (this.directDeposits == null) {
      this.directDeposits = new ArrayList<>();
    }
    this.directDeposits.add(directDepositsItem);
    return this;
  }

   /**
   * Information pertaining to direct deposits on the pay statement
   * @return directDeposits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information pertaining to direct deposits on the pay statement")

  public List<DirectDeposit> getDirectDeposits() {
    return directDeposits;
  }


  public void setDirectDeposits(List<DirectDeposit> directDeposits) {
    
    
    
    this.directDeposits = directDeposits;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VOIEPayStatement instance itself
   */
  public VOIEPayStatement putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VOIEPayStatement voIEPayStatement = (VOIEPayStatement) o;
    return Objects.equals(this.payPeriod, voIEPayStatement.payPeriod) &&
        Objects.equals(this.billable, voIEPayStatement.billable) &&
        Objects.equals(this.assetId, voIEPayStatement.assetId) &&
        Objects.equals(this.payDate, voIEPayStatement.payDate) &&
        Objects.equals(this.startDate, voIEPayStatement.startDate) &&
        Objects.equals(this.endDate, voIEPayStatement.endDate) &&
        Objects.equals(this.netPayCurrent, voIEPayStatement.netPayCurrent) &&
        Objects.equals(this.netPayYTD, voIEPayStatement.netPayYTD) &&
        Objects.equals(this.grossPayCurrent, voIEPayStatement.grossPayCurrent) &&
        Objects.equals(this.grossPayYTD, voIEPayStatement.grossPayYTD) &&
        Objects.equals(this.payrollProvider, voIEPayStatement.payrollProvider) &&
        Objects.equals(this.employer, voIEPayStatement.employer) &&
        Objects.equals(this.employee, voIEPayStatement.employee) &&
        Objects.equals(this.payStat, voIEPayStatement.payStat) &&
        Objects.equals(this.deductions, voIEPayStatement.deductions) &&
        Objects.equals(this.directDeposits, voIEPayStatement.directDeposits)&&
        Objects.equals(this.additionalProperties, voIEPayStatement.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payPeriod, billable, assetId, payDate, startDate, endDate, netPayCurrent, netPayYTD, grossPayCurrent, grossPayYTD, payrollProvider, employer, employee, payStat, deductions, directDeposits, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VOIEPayStatement {\n");
    sb.append("    payPeriod: ").append(toIndentedString(payPeriod)).append("\n");
    sb.append("    billable: ").append(toIndentedString(billable)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    payDate: ").append(toIndentedString(payDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    netPayCurrent: ").append(toIndentedString(netPayCurrent)).append("\n");
    sb.append("    netPayYTD: ").append(toIndentedString(netPayYTD)).append("\n");
    sb.append("    grossPayCurrent: ").append(toIndentedString(grossPayCurrent)).append("\n");
    sb.append("    grossPayYTD: ").append(toIndentedString(grossPayYTD)).append("\n");
    sb.append("    payrollProvider: ").append(toIndentedString(payrollProvider)).append("\n");
    sb.append("    employer: ").append(toIndentedString(employer)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    payStat: ").append(toIndentedString(payStat)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    directDeposits: ").append(toIndentedString(directDeposits)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payPeriod");
    openapiFields.add("billable");
    openapiFields.add("assetId");
    openapiFields.add("payDate");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("netPayCurrent");
    openapiFields.add("netPayYTD");
    openapiFields.add("grossPayCurrent");
    openapiFields.add("grossPayYTD");
    openapiFields.add("payrollProvider");
    openapiFields.add("employer");
    openapiFields.add("employee");
    openapiFields.add("payStat");
    openapiFields.add("deductions");
    openapiFields.add("directDeposits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VOIEPayStatement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VOIEPayStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VOIEPayStatement is not found in the empty JSON string", VOIEPayStatement.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payPeriod") != null && !jsonObj.get("payPeriod").isJsonNull()) && !jsonObj.get("payPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payPeriod").toString()));
      }
      if ((jsonObj.get("assetId") != null && !jsonObj.get("assetId").isJsonNull()) && !jsonObj.get("assetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetId").toString()));
      }
      if ((jsonObj.get("payrollProvider") != null && !jsonObj.get("payrollProvider").isJsonNull()) && !jsonObj.get("payrollProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payrollProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payrollProvider").toString()));
      }
      // validate the optional field `employer`
      if (jsonObj.get("employer") != null && !jsonObj.get("employer").isJsonNull()) {
        Employer.validateJsonObject(jsonObj.getAsJsonObject("employer"));
      }
      // validate the optional field `employee`
      if (jsonObj.get("employee") != null && !jsonObj.get("employee").isJsonNull()) {
        Employee.validateJsonObject(jsonObj.getAsJsonObject("employee"));
      }
      if (jsonObj.get("payStat") != null && !jsonObj.get("payStat").isJsonNull()) {
        JsonArray jsonArraypayStat = jsonObj.getAsJsonArray("payStat");
        if (jsonArraypayStat != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payStat").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payStat` to be an array in the JSON string but got `%s`", jsonObj.get("payStat").toString()));
          }

          // validate the optional field `payStat` (array)
          for (int i = 0; i < jsonArraypayStat.size(); i++) {
            PayStat.validateJsonObject(jsonArraypayStat.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("deductions") != null && !jsonObj.get("deductions").isJsonNull()) {
        JsonArray jsonArraydeductions = jsonObj.getAsJsonArray("deductions");
        if (jsonArraydeductions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deductions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deductions` to be an array in the JSON string but got `%s`", jsonObj.get("deductions").toString()));
          }

          // validate the optional field `deductions` (array)
          for (int i = 0; i < jsonArraydeductions.size(); i++) {
            Deduction.validateJsonObject(jsonArraydeductions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("directDeposits") != null && !jsonObj.get("directDeposits").isJsonNull()) {
        JsonArray jsonArraydirectDeposits = jsonObj.getAsJsonArray("directDeposits");
        if (jsonArraydirectDeposits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("directDeposits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `directDeposits` to be an array in the JSON string but got `%s`", jsonObj.get("directDeposits").toString()));
          }

          // validate the optional field `directDeposits` (array)
          for (int i = 0; i < jsonArraydirectDeposits.size(); i++) {
            DirectDeposit.validateJsonObject(jsonArraydirectDeposits.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VOIEPayStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VOIEPayStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VOIEPayStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VOIEPayStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<VOIEPayStatement>() {
           @Override
           public void write(JsonWriter out, VOIEPayStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VOIEPayStatement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VOIEPayStatement instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VOIEPayStatement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VOIEPayStatement
  * @throws IOException if the JSON string is invalid with respect to VOIEPayStatement
  */
  public static VOIEPayStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VOIEPayStatement.class);
  }

 /**
  * Convert an instance of VOIEPayStatement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

