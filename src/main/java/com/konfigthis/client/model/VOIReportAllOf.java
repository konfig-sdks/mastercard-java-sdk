/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReportIncomeStreamSummary;
import com.konfigthis.client.model.ReportInstitution;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VOIReportAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VOIReportAllOf {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Long startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Long endDate;

  public static final String SERIALIZED_NAME_DAYS = "days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private Long days;

  public static final String SERIALIZED_NAME_SEASONED = "seasoned";
  @SerializedName(SERIALIZED_NAME_SEASONED)
  private Boolean seasoned;

  public static final String SERIALIZED_NAME_INSTITUTIONS = "institutions";
  @SerializedName(SERIALIZED_NAME_INSTITUTIONS)
  private List<ReportInstitution> institutions = null;

  public static final String SERIALIZED_NAME_INCOME = "income";
  @SerializedName(SERIALIZED_NAME_INCOME)
  private List<ReportIncomeStreamSummary> income = null;

  public VOIReportAllOf() {
  }

  public VOIReportAllOf startDate(Long startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The &#x60;postedDate&#x60; of the earliest transaction analyzed for the report. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "The `postedDate` of the earliest transaction analyzed for the report. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getStartDate() {
    return startDate;
  }


  public void setStartDate(Long startDate) {
    
    
    
    this.startDate = startDate;
  }


  public VOIReportAllOf endDate(Long endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The &#x60;postedDate&#x60; of the latest transaction analyzed for the report. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "The `postedDate` of the latest transaction analyzed for the report. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getEndDate() {
    return endDate;
  }


  public void setEndDate(Long endDate) {
    
    
    
    this.endDate = endDate;
  }


  public VOIReportAllOf days(Long days) {
    
    
    
    
    this.days = days;
    return this;
  }

   /**
   * Number of days covered by the report
   * @return days
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200", value = "Number of days covered by the report")

  public Long getDays() {
    return days;
  }


  public void setDays(Long days) {
    
    
    
    this.days = days;
  }


  public VOIReportAllOf seasoned(Boolean seasoned) {
    
    
    
    
    this.seasoned = seasoned;
    return this;
  }

   /**
   * \&quot;true\&quot; if the report covers more than 180 days
   * @return seasoned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "\"true\" if the report covers more than 180 days")

  public Boolean getSeasoned() {
    return seasoned;
  }


  public void setSeasoned(Boolean seasoned) {
    
    
    
    this.seasoned = seasoned;
  }


  public VOIReportAllOf institutions(List<ReportInstitution> institutions) {
    
    
    
    
    this.institutions = institutions;
    return this;
  }

  public VOIReportAllOf addInstitutionsItem(ReportInstitution institutionsItem) {
    if (this.institutions == null) {
      this.institutions = new ArrayList<>();
    }
    this.institutions.add(institutionsItem);
    return this;
  }

   /**
   * A list of institution records
   * @return institutions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of institution records")

  public List<ReportInstitution> getInstitutions() {
    return institutions;
  }


  public void setInstitutions(List<ReportInstitution> institutions) {
    
    
    
    this.institutions = institutions;
  }


  public VOIReportAllOf income(List<ReportIncomeStreamSummary> income) {
    
    
    
    
    this.income = income;
    return this;
  }

  public VOIReportAllOf addIncomeItem(ReportIncomeStreamSummary incomeItem) {
    if (this.income == null) {
      this.income = new ArrayList<>();
    }
    this.income.add(incomeItem);
    return this;
  }

   /**
   * Income details
   * @return income
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Income details")

  public List<ReportIncomeStreamSummary> getIncome() {
    return income;
  }


  public void setIncome(List<ReportIncomeStreamSummary> income) {
    
    
    
    this.income = income;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VOIReportAllOf instance itself
   */
  public VOIReportAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VOIReportAllOf voIReportAllOf = (VOIReportAllOf) o;
    return Objects.equals(this.startDate, voIReportAllOf.startDate) &&
        Objects.equals(this.endDate, voIReportAllOf.endDate) &&
        Objects.equals(this.days, voIReportAllOf.days) &&
        Objects.equals(this.seasoned, voIReportAllOf.seasoned) &&
        Objects.equals(this.institutions, voIReportAllOf.institutions) &&
        Objects.equals(this.income, voIReportAllOf.income)&&
        Objects.equals(this.additionalProperties, voIReportAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, endDate, days, seasoned, institutions, income, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VOIReportAllOf {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    seasoned: ").append(toIndentedString(seasoned)).append("\n");
    sb.append("    institutions: ").append(toIndentedString(institutions)).append("\n");
    sb.append("    income: ").append(toIndentedString(income)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("days");
    openapiFields.add("seasoned");
    openapiFields.add("institutions");
    openapiFields.add("income");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VOIReportAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VOIReportAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VOIReportAllOf is not found in the empty JSON string", VOIReportAllOf.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("institutions") != null && !jsonObj.get("institutions").isJsonNull()) {
        JsonArray jsonArrayinstitutions = jsonObj.getAsJsonArray("institutions");
        if (jsonArrayinstitutions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("institutions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `institutions` to be an array in the JSON string but got `%s`", jsonObj.get("institutions").toString()));
          }

          // validate the optional field `institutions` (array)
          for (int i = 0; i < jsonArrayinstitutions.size(); i++) {
            ReportInstitution.validateJsonObject(jsonArrayinstitutions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("income") != null && !jsonObj.get("income").isJsonNull()) {
        JsonArray jsonArrayincome = jsonObj.getAsJsonArray("income");
        if (jsonArrayincome != null) {
          // ensure the json data is an array
          if (!jsonObj.get("income").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `income` to be an array in the JSON string but got `%s`", jsonObj.get("income").toString()));
          }

          // validate the optional field `income` (array)
          for (int i = 0; i < jsonArrayincome.size(); i++) {
            ReportIncomeStreamSummary.validateJsonObject(jsonArrayincome.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VOIReportAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VOIReportAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VOIReportAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VOIReportAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<VOIReportAllOf>() {
           @Override
           public void write(JsonWriter out, VOIReportAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VOIReportAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VOIReportAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VOIReportAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VOIReportAllOf
  * @throws IOException if the JSON string is invalid with respect to VOIReportAllOf
  */
  public static VOIReportAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VOIReportAllOf.class);
  }

 /**
  * Convert an instance of VOIReportAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

