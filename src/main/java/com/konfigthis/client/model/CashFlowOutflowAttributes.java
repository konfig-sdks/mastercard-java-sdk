/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ObbDateRangeAndAmount;
import com.konfigthis.client.model.ObbDateRangeAndCount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Outflow attributes
 */
@ApiModel(description = "Outflow attributes")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CashFlowOutflowAttributes {
  public static final String SERIALIZED_NAME_AVERAGE_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "averageWithdrawalByMonthForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDateRangeAndAmount> averageWithdrawalByMonthForTheReportTimePeriod = null;

  public static final String SERIALIZED_NAME_COUNT_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "countWithdrawalsByMonthForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_COUNT_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDateRangeAndCount> countWithdrawalsByMonthForTheReportTimePeriod = new ArrayList<>();

  public static final String SERIALIZED_NAME_HISTORIC_COUNT_OF_WITHDRAWAL_TRANSACTIONS = "historicCountOfWithdrawalTransactions";
  @SerializedName(SERIALIZED_NAME_HISTORIC_COUNT_OF_WITHDRAWAL_TRANSACTIONS)
  private Integer historicCountOfWithdrawalTransactions;

  public static final String SERIALIZED_NAME_HISTORIC_SUM_OF_WITHDRAWALS = "historicSumOfWithdrawals";
  @SerializedName(SERIALIZED_NAME_HISTORIC_SUM_OF_WITHDRAWALS)
  private Double historicSumOfWithdrawals;

  public static final String SERIALIZED_NAME_MAXIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "maximumWithdrawalByMonthForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDateRangeAndAmount> maximumWithdrawalByMonthForTheReportTimePeriod = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "minimumWithdrawalByMonthForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_MINIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDateRangeAndAmount> minimumWithdrawalByMonthForTheReportTimePeriod = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUM_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "sumWithdrawalsByMonthForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_SUM_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDateRangeAndAmount> sumWithdrawalsByMonthForTheReportTimePeriod = new ArrayList<>();

  public CashFlowOutflowAttributes() {
  }

  public CashFlowOutflowAttributes averageWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageWithdrawalByMonthForTheReportTimePeriod) {
    
    
    
    
    this.averageWithdrawalByMonthForTheReportTimePeriod = averageWithdrawalByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowOutflowAttributes addAverageWithdrawalByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount averageWithdrawalByMonthForTheReportTimePeriodItem) {
    if (this.averageWithdrawalByMonthForTheReportTimePeriod == null) {
      this.averageWithdrawalByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.averageWithdrawalByMonthForTheReportTimePeriod.add(averageWithdrawalByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Average value of withdrawals during periods in the report
   * @return averageWithdrawalByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Average value of withdrawals during periods in the report")

  public List<ObbDateRangeAndAmount> getAverageWithdrawalByMonthForTheReportTimePeriod() {
    return averageWithdrawalByMonthForTheReportTimePeriod;
  }


  public void setAverageWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageWithdrawalByMonthForTheReportTimePeriod) {
    
    
    
    this.averageWithdrawalByMonthForTheReportTimePeriod = averageWithdrawalByMonthForTheReportTimePeriod;
  }


  public CashFlowOutflowAttributes countWithdrawalsByMonthForTheReportTimePeriod(List<ObbDateRangeAndCount> countWithdrawalsByMonthForTheReportTimePeriod) {
    
    
    
    
    this.countWithdrawalsByMonthForTheReportTimePeriod = countWithdrawalsByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowOutflowAttributes addCountWithdrawalsByMonthForTheReportTimePeriodItem(ObbDateRangeAndCount countWithdrawalsByMonthForTheReportTimePeriodItem) {
    this.countWithdrawalsByMonthForTheReportTimePeriod.add(countWithdrawalsByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Count of all withdrawals during periods in the report
   * @return countWithdrawalsByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Count of all withdrawals during periods in the report")

  public List<ObbDateRangeAndCount> getCountWithdrawalsByMonthForTheReportTimePeriod() {
    return countWithdrawalsByMonthForTheReportTimePeriod;
  }


  public void setCountWithdrawalsByMonthForTheReportTimePeriod(List<ObbDateRangeAndCount> countWithdrawalsByMonthForTheReportTimePeriod) {
    
    
    
    this.countWithdrawalsByMonthForTheReportTimePeriod = countWithdrawalsByMonthForTheReportTimePeriod;
  }


  public CashFlowOutflowAttributes historicCountOfWithdrawalTransactions(Integer historicCountOfWithdrawalTransactions) {
    
    
    
    
    this.historicCountOfWithdrawalTransactions = historicCountOfWithdrawalTransactions;
    return this;
  }

   /**
   * Count of ALL withdrawals over entire known history of the account (may exceed requested length of report)
   * @return historicCountOfWithdrawalTransactions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "20", required = true, value = "Count of ALL withdrawals over entire known history of the account (may exceed requested length of report)")

  public Integer getHistoricCountOfWithdrawalTransactions() {
    return historicCountOfWithdrawalTransactions;
  }


  public void setHistoricCountOfWithdrawalTransactions(Integer historicCountOfWithdrawalTransactions) {
    
    
    
    this.historicCountOfWithdrawalTransactions = historicCountOfWithdrawalTransactions;
  }


  public CashFlowOutflowAttributes historicSumOfWithdrawals(Double historicSumOfWithdrawals) {
    
    
    
    
    this.historicSumOfWithdrawals = historicSumOfWithdrawals;
    return this;
  }

  public CashFlowOutflowAttributes historicSumOfWithdrawals(Integer historicSumOfWithdrawals) {
    
    
    
    
    this.historicSumOfWithdrawals = historicSumOfWithdrawals.doubleValue();
    return this;
  }

   /**
   * Sum of ALL withdrawals over entire known history of the account (may exceed requested length of report)
   * @return historicSumOfWithdrawals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "925.66", value = "Sum of ALL withdrawals over entire known history of the account (may exceed requested length of report)")

  public Double getHistoricSumOfWithdrawals() {
    return historicSumOfWithdrawals;
  }


  public void setHistoricSumOfWithdrawals(Double historicSumOfWithdrawals) {
    
    
    
    this.historicSumOfWithdrawals = historicSumOfWithdrawals;
  }


  public CashFlowOutflowAttributes maximumWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> maximumWithdrawalByMonthForTheReportTimePeriod) {
    
    
    
    
    this.maximumWithdrawalByMonthForTheReportTimePeriod = maximumWithdrawalByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowOutflowAttributes addMaximumWithdrawalByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount maximumWithdrawalByMonthForTheReportTimePeriodItem) {
    this.maximumWithdrawalByMonthForTheReportTimePeriod.add(maximumWithdrawalByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Maximum withdrawal value for different periods in the report
   * @return maximumWithdrawalByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Maximum withdrawal value for different periods in the report")

  public List<ObbDateRangeAndAmount> getMaximumWithdrawalByMonthForTheReportTimePeriod() {
    return maximumWithdrawalByMonthForTheReportTimePeriod;
  }


  public void setMaximumWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> maximumWithdrawalByMonthForTheReportTimePeriod) {
    
    
    
    this.maximumWithdrawalByMonthForTheReportTimePeriod = maximumWithdrawalByMonthForTheReportTimePeriod;
  }


  public CashFlowOutflowAttributes minimumWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> minimumWithdrawalByMonthForTheReportTimePeriod) {
    
    
    
    
    this.minimumWithdrawalByMonthForTheReportTimePeriod = minimumWithdrawalByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowOutflowAttributes addMinimumWithdrawalByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount minimumWithdrawalByMonthForTheReportTimePeriodItem) {
    this.minimumWithdrawalByMonthForTheReportTimePeriod.add(minimumWithdrawalByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Minimum withdrawal value for different periods in the report
   * @return minimumWithdrawalByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Minimum withdrawal value for different periods in the report")

  public List<ObbDateRangeAndAmount> getMinimumWithdrawalByMonthForTheReportTimePeriod() {
    return minimumWithdrawalByMonthForTheReportTimePeriod;
  }


  public void setMinimumWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> minimumWithdrawalByMonthForTheReportTimePeriod) {
    
    
    
    this.minimumWithdrawalByMonthForTheReportTimePeriod = minimumWithdrawalByMonthForTheReportTimePeriod;
  }


  public CashFlowOutflowAttributes sumWithdrawalsByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> sumWithdrawalsByMonthForTheReportTimePeriod) {
    
    
    
    
    this.sumWithdrawalsByMonthForTheReportTimePeriod = sumWithdrawalsByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowOutflowAttributes addSumWithdrawalsByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount sumWithdrawalsByMonthForTheReportTimePeriodItem) {
    this.sumWithdrawalsByMonthForTheReportTimePeriod.add(sumWithdrawalsByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Sum of all withdrawals during periods in the report
   * @return sumWithdrawalsByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Sum of all withdrawals during periods in the report")

  public List<ObbDateRangeAndAmount> getSumWithdrawalsByMonthForTheReportTimePeriod() {
    return sumWithdrawalsByMonthForTheReportTimePeriod;
  }


  public void setSumWithdrawalsByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> sumWithdrawalsByMonthForTheReportTimePeriod) {
    
    
    
    this.sumWithdrawalsByMonthForTheReportTimePeriod = sumWithdrawalsByMonthForTheReportTimePeriod;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CashFlowOutflowAttributes instance itself
   */
  public CashFlowOutflowAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowOutflowAttributes cashFlowOutflowAttributes = (CashFlowOutflowAttributes) o;
    return Objects.equals(this.averageWithdrawalByMonthForTheReportTimePeriod, cashFlowOutflowAttributes.averageWithdrawalByMonthForTheReportTimePeriod) &&
        Objects.equals(this.countWithdrawalsByMonthForTheReportTimePeriod, cashFlowOutflowAttributes.countWithdrawalsByMonthForTheReportTimePeriod) &&
        Objects.equals(this.historicCountOfWithdrawalTransactions, cashFlowOutflowAttributes.historicCountOfWithdrawalTransactions) &&
        Objects.equals(this.historicSumOfWithdrawals, cashFlowOutflowAttributes.historicSumOfWithdrawals) &&
        Objects.equals(this.maximumWithdrawalByMonthForTheReportTimePeriod, cashFlowOutflowAttributes.maximumWithdrawalByMonthForTheReportTimePeriod) &&
        Objects.equals(this.minimumWithdrawalByMonthForTheReportTimePeriod, cashFlowOutflowAttributes.minimumWithdrawalByMonthForTheReportTimePeriod) &&
        Objects.equals(this.sumWithdrawalsByMonthForTheReportTimePeriod, cashFlowOutflowAttributes.sumWithdrawalsByMonthForTheReportTimePeriod)&&
        Objects.equals(this.additionalProperties, cashFlowOutflowAttributes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageWithdrawalByMonthForTheReportTimePeriod, countWithdrawalsByMonthForTheReportTimePeriod, historicCountOfWithdrawalTransactions, historicSumOfWithdrawals, maximumWithdrawalByMonthForTheReportTimePeriod, minimumWithdrawalByMonthForTheReportTimePeriod, sumWithdrawalsByMonthForTheReportTimePeriod, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowOutflowAttributes {\n");
    sb.append("    averageWithdrawalByMonthForTheReportTimePeriod: ").append(toIndentedString(averageWithdrawalByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    countWithdrawalsByMonthForTheReportTimePeriod: ").append(toIndentedString(countWithdrawalsByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    historicCountOfWithdrawalTransactions: ").append(toIndentedString(historicCountOfWithdrawalTransactions)).append("\n");
    sb.append("    historicSumOfWithdrawals: ").append(toIndentedString(historicSumOfWithdrawals)).append("\n");
    sb.append("    maximumWithdrawalByMonthForTheReportTimePeriod: ").append(toIndentedString(maximumWithdrawalByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    minimumWithdrawalByMonthForTheReportTimePeriod: ").append(toIndentedString(minimumWithdrawalByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    sumWithdrawalsByMonthForTheReportTimePeriod: ").append(toIndentedString(sumWithdrawalsByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageWithdrawalByMonthForTheReportTimePeriod");
    openapiFields.add("countWithdrawalsByMonthForTheReportTimePeriod");
    openapiFields.add("historicCountOfWithdrawalTransactions");
    openapiFields.add("historicSumOfWithdrawals");
    openapiFields.add("maximumWithdrawalByMonthForTheReportTimePeriod");
    openapiFields.add("minimumWithdrawalByMonthForTheReportTimePeriod");
    openapiFields.add("sumWithdrawalsByMonthForTheReportTimePeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countWithdrawalsByMonthForTheReportTimePeriod");
    openapiRequiredFields.add("historicCountOfWithdrawalTransactions");
    openapiRequiredFields.add("maximumWithdrawalByMonthForTheReportTimePeriod");
    openapiRequiredFields.add("minimumWithdrawalByMonthForTheReportTimePeriod");
    openapiRequiredFields.add("sumWithdrawalsByMonthForTheReportTimePeriod");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CashFlowOutflowAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CashFlowOutflowAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CashFlowOutflowAttributes is not found in the empty JSON string", CashFlowOutflowAttributes.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CashFlowOutflowAttributes.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("averageWithdrawalByMonthForTheReportTimePeriod") != null && !jsonObj.get("averageWithdrawalByMonthForTheReportTimePeriod").isJsonNull()) {
        JsonArray jsonArrayaverageWithdrawalByMonthForTheReportTimePeriod = jsonObj.getAsJsonArray("averageWithdrawalByMonthForTheReportTimePeriod");
        if (jsonArrayaverageWithdrawalByMonthForTheReportTimePeriod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("averageWithdrawalByMonthForTheReportTimePeriod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `averageWithdrawalByMonthForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("averageWithdrawalByMonthForTheReportTimePeriod").toString()));
          }

          // validate the optional field `averageWithdrawalByMonthForTheReportTimePeriod` (array)
          for (int i = 0; i < jsonArrayaverageWithdrawalByMonthForTheReportTimePeriod.size(); i++) {
            ObbDateRangeAndAmount.validateJsonObject(jsonArrayaverageWithdrawalByMonthForTheReportTimePeriod.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("countWithdrawalsByMonthForTheReportTimePeriod").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countWithdrawalsByMonthForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("countWithdrawalsByMonthForTheReportTimePeriod").toString()));
      }

      JsonArray jsonArraycountWithdrawalsByMonthForTheReportTimePeriod = jsonObj.getAsJsonArray("countWithdrawalsByMonthForTheReportTimePeriod");
      // validate the required field `countWithdrawalsByMonthForTheReportTimePeriod` (array)
      for (int i = 0; i < jsonArraycountWithdrawalsByMonthForTheReportTimePeriod.size(); i++) {
        ObbDateRangeAndCount.validateJsonObject(jsonArraycountWithdrawalsByMonthForTheReportTimePeriod.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("maximumWithdrawalByMonthForTheReportTimePeriod").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumWithdrawalByMonthForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("maximumWithdrawalByMonthForTheReportTimePeriod").toString()));
      }

      JsonArray jsonArraymaximumWithdrawalByMonthForTheReportTimePeriod = jsonObj.getAsJsonArray("maximumWithdrawalByMonthForTheReportTimePeriod");
      // validate the required field `maximumWithdrawalByMonthForTheReportTimePeriod` (array)
      for (int i = 0; i < jsonArraymaximumWithdrawalByMonthForTheReportTimePeriod.size(); i++) {
        ObbDateRangeAndAmount.validateJsonObject(jsonArraymaximumWithdrawalByMonthForTheReportTimePeriod.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("minimumWithdrawalByMonthForTheReportTimePeriod").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumWithdrawalByMonthForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("minimumWithdrawalByMonthForTheReportTimePeriod").toString()));
      }

      JsonArray jsonArrayminimumWithdrawalByMonthForTheReportTimePeriod = jsonObj.getAsJsonArray("minimumWithdrawalByMonthForTheReportTimePeriod");
      // validate the required field `minimumWithdrawalByMonthForTheReportTimePeriod` (array)
      for (int i = 0; i < jsonArrayminimumWithdrawalByMonthForTheReportTimePeriod.size(); i++) {
        ObbDateRangeAndAmount.validateJsonObject(jsonArrayminimumWithdrawalByMonthForTheReportTimePeriod.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("sumWithdrawalsByMonthForTheReportTimePeriod").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sumWithdrawalsByMonthForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("sumWithdrawalsByMonthForTheReportTimePeriod").toString()));
      }

      JsonArray jsonArraysumWithdrawalsByMonthForTheReportTimePeriod = jsonObj.getAsJsonArray("sumWithdrawalsByMonthForTheReportTimePeriod");
      // validate the required field `sumWithdrawalsByMonthForTheReportTimePeriod` (array)
      for (int i = 0; i < jsonArraysumWithdrawalsByMonthForTheReportTimePeriod.size(); i++) {
        ObbDateRangeAndAmount.validateJsonObject(jsonArraysumWithdrawalsByMonthForTheReportTimePeriod.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CashFlowOutflowAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CashFlowOutflowAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CashFlowOutflowAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CashFlowOutflowAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<CashFlowOutflowAttributes>() {
           @Override
           public void write(JsonWriter out, CashFlowOutflowAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CashFlowOutflowAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CashFlowOutflowAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CashFlowOutflowAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CashFlowOutflowAttributes
  * @throws IOException if the JSON string is invalid with respect to CashFlowOutflowAttributes
  */
  public static CashFlowOutflowAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CashFlowOutflowAttributes.class);
  }

 /**
  * Convert an instance of CashFlowOutflowAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

