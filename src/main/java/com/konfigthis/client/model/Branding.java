/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * All assets are SVGs so can be slightly resized without any issues.
 */
@ApiModel(description = "All assets are SVGs so can be slightly resized without any issues.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Branding {
  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_ALTERNATE_LOGO = "alternateLogo";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_LOGO)
  private String alternateLogo;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_PRIMARY_COLOR = "primaryColor";
  @SerializedName(SERIALIZED_NAME_PRIMARY_COLOR)
  private String primaryColor;

  public static final String SERIALIZED_NAME_TILE = "tile";
  @SerializedName(SERIALIZED_NAME_TILE)
  private String tile;

  public Branding() {
  }

  public Branding logo(String logo) {
    
    
    
    
    this.logo = logo;
    return this;
  }

   /**
   * File path of the institution&#39;s logo. For white backgrounds designed at 375 x 72, has built in spacing around it to normalize brand sizing.
   * @return logo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://prod-carpintero-branding.s3.us-west-2.amazonaws.com/5/logo.svg", value = "File path of the institution's logo. For white backgrounds designed at 375 x 72, has built in spacing around it to normalize brand sizing.")

  public String getLogo() {
    return logo;
  }


  public void setLogo(String logo) {
    
    
    
    this.logo = logo;
  }


  public Branding alternateLogo(String alternateLogo) {
    
    
    
    
    this.alternateLogo = alternateLogo;
    return this;
  }

   /**
   * File path of the institution&#39;s alternate logo. For colored backgrounds designed at 375 x 72 has built in spacing around it to normalize brand sizing.
   * @return alternateLogo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://prod-carpintero-branding.s3.us-west-2.amazonaws.com/5/alternateLogo.svg", value = "File path of the institution's alternate logo. For colored backgrounds designed at 375 x 72 has built in spacing around it to normalize brand sizing.")

  public String getAlternateLogo() {
    return alternateLogo;
  }


  public void setAlternateLogo(String alternateLogo) {
    
    
    
    this.alternateLogo = alternateLogo;
  }


  public Branding icon(String icon) {
    
    
    
    
    this.icon = icon;
    return this;
  }

   /**
   * File path of the institution&#39;s icon. For search results designed at 40 x 40.
   * @return icon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://prod-carpintero-branding.s3.us-west-2.amazonaws.com/5/icon.svg", value = "File path of the institution's icon. For search results designed at 40 x 40.")

  public String getIcon() {
    return icon;
  }


  public void setIcon(String icon) {
    
    
    
    this.icon = icon;
  }


  public Branding primaryColor(String primaryColor) {
    
    
    
    
    this.primaryColor = primaryColor;
    return this;
  }

   /**
   * Hex code for the institution&#39;s primary color
   * @return primaryColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#0167AE", value = "Hex code for the institution's primary color")

  public String getPrimaryColor() {
    return primaryColor;
  }


  public void setPrimaryColor(String primaryColor) {
    
    
    
    this.primaryColor = primaryColor;
  }


  public Branding tile(String tile) {
    
    
    
    
    this.tile = tile;
    return this;
  }

   /**
   * File path of institution name logo. For popular banks designed at 160 x 72.
   * @return tile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://prod-carpintero-branding.s3.us-west-2.amazonaws.com/5/tile.svg", value = "File path of institution name logo. For popular banks designed at 160 x 72.")

  public String getTile() {
    return tile;
  }


  public void setTile(String tile) {
    
    
    
    this.tile = tile;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Branding instance itself
   */
  public Branding putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Branding branding = (Branding) o;
    return Objects.equals(this.logo, branding.logo) &&
        Objects.equals(this.alternateLogo, branding.alternateLogo) &&
        Objects.equals(this.icon, branding.icon) &&
        Objects.equals(this.primaryColor, branding.primaryColor) &&
        Objects.equals(this.tile, branding.tile)&&
        Objects.equals(this.additionalProperties, branding.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logo, alternateLogo, icon, primaryColor, tile, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Branding {\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    alternateLogo: ").append(toIndentedString(alternateLogo)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    primaryColor: ").append(toIndentedString(primaryColor)).append("\n");
    sb.append("    tile: ").append(toIndentedString(tile)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logo");
    openapiFields.add("alternateLogo");
    openapiFields.add("icon");
    openapiFields.add("primaryColor");
    openapiFields.add("tile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Branding
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Branding.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Branding is not found in the empty JSON string", Branding.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("alternateLogo") != null && !jsonObj.get("alternateLogo").isJsonNull()) && !jsonObj.get("alternateLogo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateLogo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternateLogo").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("primaryColor") != null && !jsonObj.get("primaryColor").isJsonNull()) && !jsonObj.get("primaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryColor").toString()));
      }
      if ((jsonObj.get("tile") != null && !jsonObj.get("tile").isJsonNull()) && !jsonObj.get("tile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tile").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Branding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Branding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Branding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Branding.class));

       return (TypeAdapter<T>) new TypeAdapter<Branding>() {
           @Override
           public void write(JsonWriter out, Branding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Branding read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Branding instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Branding given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Branding
  * @throws IOException if the JSON string is invalid with respect to Branding
  */
  public static Branding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Branding.class);
  }

 /**
  * Convert an instance of Branding to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

