/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PaystubTxVerifyMonthlyIncomeRecord
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaystubTxVerifyMonthlyIncomeRecord {
  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_BASE_PAY = "estimatedMonthlyBasePay";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_BASE_PAY)
  private Double estimatedMonthlyBasePay;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_OVERTIME_PAY = "estimatedMonthlyOvertimePay";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_OVERTIME_PAY)
  private Double estimatedMonthlyOvertimePay;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_BONUS_PAY = "estimatedMonthlyBonusPay";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_BONUS_PAY)
  private Double estimatedMonthlyBonusPay;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_COMMISSION_PAY = "estimatedMonthlyCommissionPay";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_COMMISSION_PAY)
  private Double estimatedMonthlyCommissionPay;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_OTHER_PAY = "estimatedMonthlyOtherPay";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_OTHER_PAY)
  private Double estimatedMonthlyOtherPay;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_TOTAL_PAY = "estimatedMonthlyTotalPay";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_TOTAL_PAY)
  private Double estimatedMonthlyTotalPay;

  public PaystubTxVerifyMonthlyIncomeRecord() {
  }

  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyBasePay(Double estimatedMonthlyBasePay) {
    
    
    
    
    this.estimatedMonthlyBasePay = estimatedMonthlyBasePay;
    return this;
  }

  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyBasePay(Integer estimatedMonthlyBasePay) {
    
    
    
    
    this.estimatedMonthlyBasePay = estimatedMonthlyBasePay.doubleValue();
    return this;
  }

   /**
   * The estimated monthly base pay amount for the employment from the paystub, calculated by Finicity
   * @return estimatedMonthlyBasePay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2000", value = "The estimated monthly base pay amount for the employment from the paystub, calculated by Finicity")

  public Double getEstimatedMonthlyBasePay() {
    return estimatedMonthlyBasePay;
  }


  public void setEstimatedMonthlyBasePay(Double estimatedMonthlyBasePay) {
    
    
    
    this.estimatedMonthlyBasePay = estimatedMonthlyBasePay;
  }


  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyOvertimePay(Double estimatedMonthlyOvertimePay) {
    
    
    
    
    this.estimatedMonthlyOvertimePay = estimatedMonthlyOvertimePay;
    return this;
  }

  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyOvertimePay(Integer estimatedMonthlyOvertimePay) {
    
    
    
    
    this.estimatedMonthlyOvertimePay = estimatedMonthlyOvertimePay.doubleValue();
    return this;
  }

   /**
   * The estimated monthly overtime pay amount for the employment from the paystub, calculated by Finicity
   * @return estimatedMonthlyOvertimePay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50", value = "The estimated monthly overtime pay amount for the employment from the paystub, calculated by Finicity")

  public Double getEstimatedMonthlyOvertimePay() {
    return estimatedMonthlyOvertimePay;
  }


  public void setEstimatedMonthlyOvertimePay(Double estimatedMonthlyOvertimePay) {
    
    
    
    this.estimatedMonthlyOvertimePay = estimatedMonthlyOvertimePay;
  }


  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyBonusPay(Double estimatedMonthlyBonusPay) {
    
    
    
    
    this.estimatedMonthlyBonusPay = estimatedMonthlyBonusPay;
    return this;
  }

  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyBonusPay(Integer estimatedMonthlyBonusPay) {
    
    
    
    
    this.estimatedMonthlyBonusPay = estimatedMonthlyBonusPay.doubleValue();
    return this;
  }

   /**
   * The estimated monthly bonus pay amount for the employment from the paystub, calculated by Finicity
   * @return estimatedMonthlyBonusPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "The estimated monthly bonus pay amount for the employment from the paystub, calculated by Finicity")

  public Double getEstimatedMonthlyBonusPay() {
    return estimatedMonthlyBonusPay;
  }


  public void setEstimatedMonthlyBonusPay(Double estimatedMonthlyBonusPay) {
    
    
    
    this.estimatedMonthlyBonusPay = estimatedMonthlyBonusPay;
  }


  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyCommissionPay(Double estimatedMonthlyCommissionPay) {
    
    
    
    
    this.estimatedMonthlyCommissionPay = estimatedMonthlyCommissionPay;
    return this;
  }

  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyCommissionPay(Integer estimatedMonthlyCommissionPay) {
    
    
    
    
    this.estimatedMonthlyCommissionPay = estimatedMonthlyCommissionPay.doubleValue();
    return this;
  }

   /**
   * The estimated commission bonus pay amount for the employment from the paystub, calculated by Finicity
   * @return estimatedMonthlyCommissionPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50", value = "The estimated commission bonus pay amount for the employment from the paystub, calculated by Finicity")

  public Double getEstimatedMonthlyCommissionPay() {
    return estimatedMonthlyCommissionPay;
  }


  public void setEstimatedMonthlyCommissionPay(Double estimatedMonthlyCommissionPay) {
    
    
    
    this.estimatedMonthlyCommissionPay = estimatedMonthlyCommissionPay;
  }


  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyOtherPay(Double estimatedMonthlyOtherPay) {
    
    
    
    
    this.estimatedMonthlyOtherPay = estimatedMonthlyOtherPay;
    return this;
  }

  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyOtherPay(Integer estimatedMonthlyOtherPay) {
    
    
    
    
    this.estimatedMonthlyOtherPay = estimatedMonthlyOtherPay.doubleValue();
    return this;
  }

   /**
   * The estimated monthly other pay amount for the employment from the paystub, calculated by Finicity
   * @return estimatedMonthlyOtherPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "150", value = "The estimated monthly other pay amount for the employment from the paystub, calculated by Finicity")

  public Double getEstimatedMonthlyOtherPay() {
    return estimatedMonthlyOtherPay;
  }


  public void setEstimatedMonthlyOtherPay(Double estimatedMonthlyOtherPay) {
    
    
    
    this.estimatedMonthlyOtherPay = estimatedMonthlyOtherPay;
  }


  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyTotalPay(Double estimatedMonthlyTotalPay) {
    
    
    
    
    this.estimatedMonthlyTotalPay = estimatedMonthlyTotalPay;
    return this;
  }

  public PaystubTxVerifyMonthlyIncomeRecord estimatedMonthlyTotalPay(Integer estimatedMonthlyTotalPay) {
    
    
    
    
    this.estimatedMonthlyTotalPay = estimatedMonthlyTotalPay.doubleValue();
    return this;
  }

   /**
   * The estimated monthly total pay amount for the employment from the paystub, calculated by Finicity
   * @return estimatedMonthlyTotalPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2120", value = "The estimated monthly total pay amount for the employment from the paystub, calculated by Finicity")

  public Double getEstimatedMonthlyTotalPay() {
    return estimatedMonthlyTotalPay;
  }


  public void setEstimatedMonthlyTotalPay(Double estimatedMonthlyTotalPay) {
    
    
    
    this.estimatedMonthlyTotalPay = estimatedMonthlyTotalPay;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaystubTxVerifyMonthlyIncomeRecord instance itself
   */
  public PaystubTxVerifyMonthlyIncomeRecord putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaystubTxVerifyMonthlyIncomeRecord paystubTxVerifyMonthlyIncomeRecord = (PaystubTxVerifyMonthlyIncomeRecord) o;
    return Objects.equals(this.estimatedMonthlyBasePay, paystubTxVerifyMonthlyIncomeRecord.estimatedMonthlyBasePay) &&
        Objects.equals(this.estimatedMonthlyOvertimePay, paystubTxVerifyMonthlyIncomeRecord.estimatedMonthlyOvertimePay) &&
        Objects.equals(this.estimatedMonthlyBonusPay, paystubTxVerifyMonthlyIncomeRecord.estimatedMonthlyBonusPay) &&
        Objects.equals(this.estimatedMonthlyCommissionPay, paystubTxVerifyMonthlyIncomeRecord.estimatedMonthlyCommissionPay) &&
        Objects.equals(this.estimatedMonthlyOtherPay, paystubTxVerifyMonthlyIncomeRecord.estimatedMonthlyOtherPay) &&
        Objects.equals(this.estimatedMonthlyTotalPay, paystubTxVerifyMonthlyIncomeRecord.estimatedMonthlyTotalPay)&&
        Objects.equals(this.additionalProperties, paystubTxVerifyMonthlyIncomeRecord.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(estimatedMonthlyBasePay, estimatedMonthlyOvertimePay, estimatedMonthlyBonusPay, estimatedMonthlyCommissionPay, estimatedMonthlyOtherPay, estimatedMonthlyTotalPay, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaystubTxVerifyMonthlyIncomeRecord {\n");
    sb.append("    estimatedMonthlyBasePay: ").append(toIndentedString(estimatedMonthlyBasePay)).append("\n");
    sb.append("    estimatedMonthlyOvertimePay: ").append(toIndentedString(estimatedMonthlyOvertimePay)).append("\n");
    sb.append("    estimatedMonthlyBonusPay: ").append(toIndentedString(estimatedMonthlyBonusPay)).append("\n");
    sb.append("    estimatedMonthlyCommissionPay: ").append(toIndentedString(estimatedMonthlyCommissionPay)).append("\n");
    sb.append("    estimatedMonthlyOtherPay: ").append(toIndentedString(estimatedMonthlyOtherPay)).append("\n");
    sb.append("    estimatedMonthlyTotalPay: ").append(toIndentedString(estimatedMonthlyTotalPay)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("estimatedMonthlyBasePay");
    openapiFields.add("estimatedMonthlyOvertimePay");
    openapiFields.add("estimatedMonthlyBonusPay");
    openapiFields.add("estimatedMonthlyCommissionPay");
    openapiFields.add("estimatedMonthlyOtherPay");
    openapiFields.add("estimatedMonthlyTotalPay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaystubTxVerifyMonthlyIncomeRecord
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaystubTxVerifyMonthlyIncomeRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaystubTxVerifyMonthlyIncomeRecord is not found in the empty JSON string", PaystubTxVerifyMonthlyIncomeRecord.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaystubTxVerifyMonthlyIncomeRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaystubTxVerifyMonthlyIncomeRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaystubTxVerifyMonthlyIncomeRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaystubTxVerifyMonthlyIncomeRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<PaystubTxVerifyMonthlyIncomeRecord>() {
           @Override
           public void write(JsonWriter out, PaystubTxVerifyMonthlyIncomeRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaystubTxVerifyMonthlyIncomeRecord read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaystubTxVerifyMonthlyIncomeRecord instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaystubTxVerifyMonthlyIncomeRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaystubTxVerifyMonthlyIncomeRecord
  * @throws IOException if the JSON string is invalid with respect to PaystubTxVerifyMonthlyIncomeRecord
  */
  public static PaystubTxVerifyMonthlyIncomeRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaystubTxVerifyMonthlyIncomeRecord.class);
  }

 /**
  * Convert an instance of PaystubTxVerifyMonthlyIncomeRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

