/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Configuration for the Connect email&#39;s sent to customers
 */
@ApiModel(description = "Configuration for the Connect email's sent to customers")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmailOptions {
  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_SUPPORT_PHONE = "supportPhone";
  @SerializedName(SERIALIZED_NAME_SUPPORT_PHONE)
  private String supportPhone;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_INSTITUTION_NAME = "institutionName";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_NAME)
  private String institutionName;

  public static final String SERIALIZED_NAME_INSTITUTION_ADDRESS = "institutionAddress";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_ADDRESS)
  private String institutionAddress;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private List<String> signature = null;

  public EmailOptions() {
  }

  public EmailOptions to(String to) {
    
    
    
    
    this.to = to;
    return this;
  }

   /**
   * The email address for the customer receiving the Connect email
   * @return to
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "bob@example.com", required = true, value = "The email address for the customer receiving the Connect email")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    
    
    
    this.to = to;
  }


  public EmailOptions from(String from) {
    
    
    
    
    this.from = from;
    return this;
  }

   /**
   * The name of a person or business sending the Connect email
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "test.lender@test.com", value = "The name of a person or business sending the Connect email")

  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    
    
    
    this.from = from;
  }


  public EmailOptions supportPhone(String supportPhone) {
    
    
    
    
    this.supportPhone = supportPhone;
    return this;
  }

   /**
   * The support phone number listed in the email
   * @return supportPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "800-555-5555", value = "The support phone number listed in the email")

  public String getSupportPhone() {
    return supportPhone;
  }


  public void setSupportPhone(String supportPhone) {
    
    
    
    this.supportPhone = supportPhone;
  }


  public EmailOptions subject(String subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * The subject line of the email. The default is \&quot;Verify your Financial Information\&quot;.
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Verify your income", value = "The subject line of the email. The default is \"Verify your Financial Information\".")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    
    
    
    this.subject = subject;
  }


  public EmailOptions firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * The first name of the customer or both names of the customers for joint borrowers. Example: \&quot;Marvin and Jenny\&quot;.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Bob", value = "The first name of the customer or both names of the customers for joint borrowers. Example: \"Marvin and Jenny\".")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public EmailOptions institutionName(String institutionName) {
    
    
    
    
    this.institutionName = institutionName;
    return this;
  }

   /**
   * The name of your company
   * @return institutionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Acme Lending", value = "The name of your company")

  public String getInstitutionName() {
    return institutionName;
  }


  public void setInstitutionName(String institutionName) {
    
    
    
    this.institutionName = institutionName;
  }


  public EmailOptions institutionAddress(String institutionAddress) {
    
    
    
    
    this.institutionAddress = institutionAddress;
    return this;
  }

   /**
   * The institution address to appear in the footer of the email
   * @return institutionAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "222 Winnipeg Drive SLC UT, 84109", value = "The institution address to appear in the footer of the email")

  public String getInstitutionAddress() {
    return institutionAddress;
  }


  public void setInstitutionAddress(String institutionAddress) {
    
    
    
    this.institutionAddress = institutionAddress;
  }


  public EmailOptions signature(List<String> signature) {
    
    
    
    
    this.signature = signature;
    return this;
  }

  public EmailOptions addSignatureItem(String signatureItem) {
    if (this.signature == null) {
      this.signature = new ArrayList<>();
    }
    this.signature.add(signatureItem);
    return this;
  }

   /**
   * A signature for the email
   * @return signature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"Cindy Mayfield\",\"Senior Loan Officer\",\"Direct 123-456-7890\"]", value = "A signature for the email")

  public List<String> getSignature() {
    return signature;
  }


  public void setSignature(List<String> signature) {
    
    
    
    this.signature = signature;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmailOptions instance itself
   */
  public EmailOptions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailOptions emailOptions = (EmailOptions) o;
    return Objects.equals(this.to, emailOptions.to) &&
        Objects.equals(this.from, emailOptions.from) &&
        Objects.equals(this.supportPhone, emailOptions.supportPhone) &&
        Objects.equals(this.subject, emailOptions.subject) &&
        Objects.equals(this.firstName, emailOptions.firstName) &&
        Objects.equals(this.institutionName, emailOptions.institutionName) &&
        Objects.equals(this.institutionAddress, emailOptions.institutionAddress) &&
        Objects.equals(this.signature, emailOptions.signature)&&
        Objects.equals(this.additionalProperties, emailOptions.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, from, supportPhone, subject, firstName, institutionName, institutionAddress, signature, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailOptions {\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    supportPhone: ").append(toIndentedString(supportPhone)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    institutionName: ").append(toIndentedString(institutionName)).append("\n");
    sb.append("    institutionAddress: ").append(toIndentedString(institutionAddress)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("to");
    openapiFields.add("from");
    openapiFields.add("supportPhone");
    openapiFields.add("subject");
    openapiFields.add("firstName");
    openapiFields.add("institutionName");
    openapiFields.add("institutionAddress");
    openapiFields.add("signature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("to");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmailOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailOptions is not found in the empty JSON string", EmailOptions.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmailOptions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("supportPhone") != null && !jsonObj.get("supportPhone").isJsonNull()) && !jsonObj.get("supportPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportPhone").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("institutionName") != null && !jsonObj.get("institutionName").isJsonNull()) && !jsonObj.get("institutionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institutionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institutionName").toString()));
      }
      if ((jsonObj.get("institutionAddress") != null && !jsonObj.get("institutionAddress").isJsonNull()) && !jsonObj.get("institutionAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institutionAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institutionAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be an array in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailOptions>() {
           @Override
           public void write(JsonWriter out, EmailOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmailOptions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailOptions
  * @throws IOException if the JSON string is invalid with respect to EmailOptions
  */
  public static EmailOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailOptions.class);
  }

 /**
  * Convert an instance of EmailOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

