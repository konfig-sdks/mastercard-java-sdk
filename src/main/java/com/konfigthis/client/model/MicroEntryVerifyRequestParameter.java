/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MicroEntryVerifyRequestParameter
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MicroEntryVerifyRequestParameter {
  public static final String SERIALIZED_NAME_PARTNER_ID = "partnerId";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  private String partnerId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_REDIRECT_URI = "redirectUri";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URI)
  private String redirectUri;

  public static final String SERIALIZED_NAME_WEBHOOK = "webhook";
  @SerializedName(SERIALIZED_NAME_WEBHOOK)
  private String webhook;

  public static final String SERIALIZED_NAME_WEBHOOK_CONTENT_TYPE = "webhookContentType";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_CONTENT_TYPE)
  private String webhookContentType = "application/json";

  public static final String SERIALIZED_NAME_WEBHOOK_DATA = "webhookData";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_DATA)
  private Object webhookData;

  public static final String SERIALIZED_NAME_WEBHOOK_HEADERS = "webhookHeaders";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_HEADERS)
  private Object webhookHeaders;

  public static final String SERIALIZED_NAME_EXPERIENCE = "experience";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE)
  private String experience;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public MicroEntryVerifyRequestParameter() {
  }

  public MicroEntryVerifyRequestParameter partnerId(String partnerId) {
    
    
    
    
    this.partnerId = partnerId;
    return this;
  }

   /**
   * Your Partner ID displayed in the [Developer Dashboard](https://developer.mastercard.com/account/log-in)
   * @return partnerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234583871234", value = "Your Partner ID displayed in the [Developer Dashboard](https://developer.mastercard.com/account/log-in)")

  public String getPartnerId() {
    return partnerId;
  }


  public void setPartnerId(String partnerId) {
    
    
    
    this.partnerId = partnerId;
  }


  public MicroEntryVerifyRequestParameter customerId(String customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * A customer ID. See Add Customer API for how to create a customer ID.
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1005061234", value = "A customer ID. See Add Customer API for how to create a customer ID.")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    
    
    
    this.customerId = customerId;
  }


  public MicroEntryVerifyRequestParameter redirectUri(String redirectUri) {
    
    
    
    
    this.redirectUri = redirectUri;
    return this;
  }

   /**
   * The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe).
   * @return redirectUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.finicity.com/connect/", value = "The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe).")

  public String getRedirectUri() {
    return redirectUri;
  }


  public void setRedirectUri(String redirectUri) {
    
    
    
    this.redirectUri = redirectUri;
  }


  public MicroEntryVerifyRequestParameter webhook(String webhook) {
    
    
    
    
    this.webhook = webhook;
    return this;
  }

   /**
   * The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details.
   * @return webhook
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://webhook.site/8d4421a7-d1d1-4f01-bb08-5370aff0321b", value = "The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details.")

  public String getWebhook() {
    return webhook;
  }


  public void setWebhook(String webhook) {
    
    
    
    this.webhook = webhook;
  }


  public MicroEntryVerifyRequestParameter webhookContentType(String webhookContentType) {
    
    
    
    
    this.webhookContentType = webhookContentType;
    return this;
  }

   /**
   * The content type the webhook events will be sent in. Supported types: \&quot;application/json\&quot; and \&quot;application/xml\&quot;.
   * @return webhookContentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "application/json", value = "The content type the webhook events will be sent in. Supported types: \"application/json\" and \"application/xml\".")

  public String getWebhookContentType() {
    return webhookContentType;
  }


  public void setWebhookContentType(String webhookContentType) {
    
    
    
    this.webhookContentType = webhookContentType;
  }


  public MicroEntryVerifyRequestParameter webhookData(Object webhookData) {
    
    
    
    
    this.webhookData = webhookData;
    return this;
  }

   /**
   * Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).
   * @return webhookData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).")

  public Object getWebhookData() {
    return webhookData;
  }


  public void setWebhookData(Object webhookData) {
    
    
    
    this.webhookData = webhookData;
  }


  public MicroEntryVerifyRequestParameter webhookHeaders(Object webhookHeaders) {
    
    
    
    
    this.webhookHeaders = webhookHeaders;
    return this;
  }

   /**
   * Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).
   * @return webhookHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).")

  public Object getWebhookHeaders() {
    return webhookHeaders;
  }


  public void setWebhookHeaders(Object webhookHeaders) {
    
    
    
    this.webhookHeaders = webhookHeaders;
  }


  public MicroEntryVerifyRequestParameter experience(String experience) {
    
    
    
    
    this.experience = experience;
    return this;
  }

   /**
   * The &#x60;experience&#x60; field allows you to customize: * Brand: color and logo * Icon: displayed on the \&quot;Share your data\&quot; page * Popular institutions: displayed on the Bank Search page * Report: the credit decisioning report to send when Connect completes. * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company when you migrate to Connect 2.0. For each additional experience you create thereafter, they&#39;ll give you a unique ID. See [Generate Connect URL](https://developer.mastercard.com/open-banking-us/documentation/connect/generate-2-connect-url-apis/).  Experience values options: * \&quot;default\&quot;: your default experience (must be defined) * GUID: the code for a different experience * Not defined: If you don&#39;t pass the experience parameter, then Connect&#39;s out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run.
   * @return experience
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "default", value = "The `experience` field allows you to customize: * Brand: color and logo * Icon: displayed on the \"Share your data\" page * Popular institutions: displayed on the Bank Search page * Report: the credit decisioning report to send when Connect completes. * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company when you migrate to Connect 2.0. For each additional experience you create thereafter, they'll give you a unique ID. See [Generate Connect URL](https://developer.mastercard.com/open-banking-us/documentation/connect/generate-2-connect-url-apis/).  Experience values options: * \"default\": your default experience (must be defined) * GUID: the code for a different experience * Not defined: If you don't pass the experience parameter, then Connect's out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run.")

  public String getExperience() {
    return experience;
  }


  public void setExperience(String experience) {
    
    
    
    this.experience = experience;
  }


  public MicroEntryVerifyRequestParameter accountId(String accountId) {
    
    
    
    
    this.accountId = accountId;
    return this;
  }

   /**
   * An account ID
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5011648377", value = "An account ID")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    
    
    
    this.accountId = accountId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MicroEntryVerifyRequestParameter instance itself
   */
  public MicroEntryVerifyRequestParameter putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MicroEntryVerifyRequestParameter microEntryVerifyRequestParameter = (MicroEntryVerifyRequestParameter) o;
    return Objects.equals(this.partnerId, microEntryVerifyRequestParameter.partnerId) &&
        Objects.equals(this.customerId, microEntryVerifyRequestParameter.customerId) &&
        Objects.equals(this.redirectUri, microEntryVerifyRequestParameter.redirectUri) &&
        Objects.equals(this.webhook, microEntryVerifyRequestParameter.webhook) &&
        Objects.equals(this.webhookContentType, microEntryVerifyRequestParameter.webhookContentType) &&
        Objects.equals(this.webhookData, microEntryVerifyRequestParameter.webhookData) &&
        Objects.equals(this.webhookHeaders, microEntryVerifyRequestParameter.webhookHeaders) &&
        Objects.equals(this.experience, microEntryVerifyRequestParameter.experience) &&
        Objects.equals(this.accountId, microEntryVerifyRequestParameter.accountId)&&
        Objects.equals(this.additionalProperties, microEntryVerifyRequestParameter.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partnerId, customerId, redirectUri, webhook, webhookContentType, webhookData, webhookHeaders, experience, accountId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MicroEntryVerifyRequestParameter {\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    redirectUri: ").append(toIndentedString(redirectUri)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("    webhookContentType: ").append(toIndentedString(webhookContentType)).append("\n");
    sb.append("    webhookData: ").append(toIndentedString(webhookData)).append("\n");
    sb.append("    webhookHeaders: ").append(toIndentedString(webhookHeaders)).append("\n");
    sb.append("    experience: ").append(toIndentedString(experience)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("partnerId");
    openapiFields.add("customerId");
    openapiFields.add("redirectUri");
    openapiFields.add("webhook");
    openapiFields.add("webhookContentType");
    openapiFields.add("webhookData");
    openapiFields.add("webhookHeaders");
    openapiFields.add("experience");
    openapiFields.add("accountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MicroEntryVerifyRequestParameter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MicroEntryVerifyRequestParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MicroEntryVerifyRequestParameter is not found in the empty JSON string", MicroEntryVerifyRequestParameter.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("partnerId") != null && !jsonObj.get("partnerId").isJsonNull()) && !jsonObj.get("partnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerId").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("redirectUri") != null && !jsonObj.get("redirectUri").isJsonNull()) && !jsonObj.get("redirectUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUri").toString()));
      }
      if ((jsonObj.get("webhook") != null && !jsonObj.get("webhook").isJsonNull()) && !jsonObj.get("webhook").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook").toString()));
      }
      if ((jsonObj.get("webhookContentType") != null && !jsonObj.get("webhookContentType").isJsonNull()) && !jsonObj.get("webhookContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookContentType").toString()));
      }
      if ((jsonObj.get("experience") != null && !jsonObj.get("experience").isJsonNull()) && !jsonObj.get("experience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `experience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("experience").toString()));
      }
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MicroEntryVerifyRequestParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MicroEntryVerifyRequestParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MicroEntryVerifyRequestParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MicroEntryVerifyRequestParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<MicroEntryVerifyRequestParameter>() {
           @Override
           public void write(JsonWriter out, MicroEntryVerifyRequestParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MicroEntryVerifyRequestParameter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MicroEntryVerifyRequestParameter instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MicroEntryVerifyRequestParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MicroEntryVerifyRequestParameter
  * @throws IOException if the JSON string is invalid with respect to MicroEntryVerifyRequestParameter
  */
  public static MicroEntryVerifyRequestParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MicroEntryVerifyRequestParameter.class);
  }

 /**
  * Convert an instance of MicroEntryVerifyRequestParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

