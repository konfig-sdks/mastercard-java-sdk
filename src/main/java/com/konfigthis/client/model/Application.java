/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Application
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Application {
  public static final String SERIALIZED_NAME_APP_DESCRIPTION = "appDescription";
  @SerializedName(SERIALIZED_NAME_APP_DESCRIPTION)
  private String appDescription;

  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_APP_URL = "appUrl";
  @SerializedName(SERIALIZED_NAME_APP_URL)
  private String appUrl;

  public static final String SERIALIZED_NAME_OWNER_ADDRESS_LINE1 = "ownerAddressLine1";
  @SerializedName(SERIALIZED_NAME_OWNER_ADDRESS_LINE1)
  private String ownerAddressLine1;

  public static final String SERIALIZED_NAME_OWNER_ADDRESS_LINE2 = "ownerAddressLine2";
  @SerializedName(SERIALIZED_NAME_OWNER_ADDRESS_LINE2)
  private String ownerAddressLine2;

  public static final String SERIALIZED_NAME_OWNER_CITY = "ownerCity";
  @SerializedName(SERIALIZED_NAME_OWNER_CITY)
  private String ownerCity;

  public static final String SERIALIZED_NAME_OWNER_COUNTRY = "ownerCountry";
  @SerializedName(SERIALIZED_NAME_OWNER_COUNTRY)
  private String ownerCountry;

  public static final String SERIALIZED_NAME_OWNER_NAME = "ownerName";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  public static final String SERIALIZED_NAME_OWNER_POSTAL_CODE = "ownerPostalCode";
  @SerializedName(SERIALIZED_NAME_OWNER_POSTAL_CODE)
  private String ownerPostalCode;

  public static final String SERIALIZED_NAME_OWNER_STATE = "ownerState";
  @SerializedName(SERIALIZED_NAME_OWNER_STATE)
  private String ownerState;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public Application() {
  }

  public Application appDescription(String appDescription) {
    
    
    
    
    this.appDescription = appDescription;
    return this;
  }

   /**
   * A short description of the app. This will be visible to end users in the FI interface.
   * @return appDescription
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "The app that makes your budgeting experience awesome", required = true, value = "A short description of the app. This will be visible to end users in the FI interface.")

  public String getAppDescription() {
    return appDescription;
  }


  public void setAppDescription(String appDescription) {
    
    
    
    this.appDescription = appDescription;
  }


  public Application appName(String appName) {
    
    
    
    
    this.appName = appName;
    return this;
  }

   /**
   * The name of the application assigned to the customer
   * @return appName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Awesome Budget App", required = true, value = "The name of the application assigned to the customer")

  public String getAppName() {
    return appName;
  }


  public void setAppName(String appName) {
    
    
    
    this.appName = appName;
  }


  public Application appUrl(String appUrl) {
    
    
    
    
    this.appUrl = appUrl;
    return this;
  }

   /**
   * An URL for the app. This will be visible to end users in the FI interface.
   * @return appUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://www.finicity.com/", required = true, value = "An URL for the app. This will be visible to end users in the FI interface.")

  public String getAppUrl() {
    return appUrl;
  }


  public void setAppUrl(String appUrl) {
    
    
    
    this.appUrl = appUrl;
  }


  public Application ownerAddressLine1(String ownerAddressLine1) {
    
    
    
    
    this.ownerAddressLine1 = ownerAddressLine1;
    return this;
  }

   /**
   * Address line 1
   * @return ownerAddressLine1
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "434 W Ascension Way", required = true, value = "Address line 1")

  public String getOwnerAddressLine1() {
    return ownerAddressLine1;
  }


  public void setOwnerAddressLine1(String ownerAddressLine1) {
    
    
    
    this.ownerAddressLine1 = ownerAddressLine1;
  }


  public Application ownerAddressLine2(String ownerAddressLine2) {
    
    
    
    
    this.ownerAddressLine2 = ownerAddressLine2;
    return this;
  }

   /**
   * Address line 2
   * @return ownerAddressLine2
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Suite #200", required = true, value = "Address line 2")

  public String getOwnerAddressLine2() {
    return ownerAddressLine2;
  }


  public void setOwnerAddressLine2(String ownerAddressLine2) {
    
    
    
    this.ownerAddressLine2 = ownerAddressLine2;
  }


  public Application ownerCity(String ownerCity) {
    
    
    
    
    this.ownerCity = ownerCity;
    return this;
  }

   /**
   * City for the business entity that owns the app. Information for registration purposes only and not given to the end user.
   * @return ownerCity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Murray", required = true, value = "City for the business entity that owns the app. Information for registration purposes only and not given to the end user.")

  public String getOwnerCity() {
    return ownerCity;
  }


  public void setOwnerCity(String ownerCity) {
    
    
    
    this.ownerCity = ownerCity;
  }


  public Application ownerCountry(String ownerCountry) {
    
    
    
    
    this.ownerCountry = ownerCountry;
    return this;
  }

   /**
   * Country for the  business entity that owns the app. Information for registration purposes only and not given to the end user.
   * @return ownerCountry
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USA", required = true, value = "Country for the  business entity that owns the app. Information for registration purposes only and not given to the end user.")

  public String getOwnerCountry() {
    return ownerCountry;
  }


  public void setOwnerCountry(String ownerCountry) {
    
    
    
    this.ownerCountry = ownerCountry;
  }


  public Application ownerName(String ownerName) {
    
    
    
    
    this.ownerName = ownerName;
    return this;
  }

   /**
   * Business name for the business entity that owns the app. Information for registration purposes only and not given to the end user.
   * @return ownerName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Finicity", required = true, value = "Business name for the business entity that owns the app. Information for registration purposes only and not given to the end user.")

  public String getOwnerName() {
    return ownerName;
  }


  public void setOwnerName(String ownerName) {
    
    
    
    this.ownerName = ownerName;
  }


  public Application ownerPostalCode(String ownerPostalCode) {
    
    
    
    
    this.ownerPostalCode = ownerPostalCode;
    return this;
  }

   /**
   * Zip code for the business entity that owns the app. Information for registration purposes only and not given to the end user.
   * @return ownerPostalCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "84123", required = true, value = "Zip code for the business entity that owns the app. Information for registration purposes only and not given to the end user.")

  public String getOwnerPostalCode() {
    return ownerPostalCode;
  }


  public void setOwnerPostalCode(String ownerPostalCode) {
    
    
    
    this.ownerPostalCode = ownerPostalCode;
  }


  public Application ownerState(String ownerState) {
    
    
    
    
    this.ownerState = ownerState;
    return this;
  }

   /**
   * State for the business entity that owns the app. Information for registration purposes only and not given to the end user.
   * @return ownerState
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "UT", required = true, value = "State for the business entity that owns the app. Information for registration purposes only and not given to the end user.")

  public String getOwnerState() {
    return ownerState;
  }


  public void setOwnerState(String ownerState) {
    
    
    
    this.ownerState = ownerState;
  }


  public Application image(String image) {
    
    
    
    
    this.image = image;
    return this;
  }

   /**
   * An app logo passed as a Base64 encoded image (1:1 SVG file, must be less than 50KB)
   * @return image
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjxzdmcgICAKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB2ZXJzaW9uPSIxLjEiCiAgIHZpZXdCb3g9IjAgMCAwIDAiCiAgIGhlaWdodD0iMCIKICAgd2lkdGg9IjAiPgogICAgPGcvPgo8L3N2Zz4K", required = true, value = "An app logo passed as a Base64 encoded image (1:1 SVG file, must be less than 50KB)")

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    
    
    
    this.image = image;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Application instance itself
   */
  public Application putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Application application = (Application) o;
    return Objects.equals(this.appDescription, application.appDescription) &&
        Objects.equals(this.appName, application.appName) &&
        Objects.equals(this.appUrl, application.appUrl) &&
        Objects.equals(this.ownerAddressLine1, application.ownerAddressLine1) &&
        Objects.equals(this.ownerAddressLine2, application.ownerAddressLine2) &&
        Objects.equals(this.ownerCity, application.ownerCity) &&
        Objects.equals(this.ownerCountry, application.ownerCountry) &&
        Objects.equals(this.ownerName, application.ownerName) &&
        Objects.equals(this.ownerPostalCode, application.ownerPostalCode) &&
        Objects.equals(this.ownerState, application.ownerState) &&
        Objects.equals(this.image, application.image)&&
        Objects.equals(this.additionalProperties, application.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appDescription, appName, appUrl, ownerAddressLine1, ownerAddressLine2, ownerCity, ownerCountry, ownerName, ownerPostalCode, ownerState, image, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Application {\n");
    sb.append("    appDescription: ").append(toIndentedString(appDescription)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appUrl: ").append(toIndentedString(appUrl)).append("\n");
    sb.append("    ownerAddressLine1: ").append(toIndentedString(ownerAddressLine1)).append("\n");
    sb.append("    ownerAddressLine2: ").append(toIndentedString(ownerAddressLine2)).append("\n");
    sb.append("    ownerCity: ").append(toIndentedString(ownerCity)).append("\n");
    sb.append("    ownerCountry: ").append(toIndentedString(ownerCountry)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    ownerPostalCode: ").append(toIndentedString(ownerPostalCode)).append("\n");
    sb.append("    ownerState: ").append(toIndentedString(ownerState)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appDescription");
    openapiFields.add("appName");
    openapiFields.add("appUrl");
    openapiFields.add("ownerAddressLine1");
    openapiFields.add("ownerAddressLine2");
    openapiFields.add("ownerCity");
    openapiFields.add("ownerCountry");
    openapiFields.add("ownerName");
    openapiFields.add("ownerPostalCode");
    openapiFields.add("ownerState");
    openapiFields.add("image");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appDescription");
    openapiRequiredFields.add("appName");
    openapiRequiredFields.add("appUrl");
    openapiRequiredFields.add("ownerAddressLine1");
    openapiRequiredFields.add("ownerAddressLine2");
    openapiRequiredFields.add("ownerCity");
    openapiRequiredFields.add("ownerCountry");
    openapiRequiredFields.add("ownerName");
    openapiRequiredFields.add("ownerPostalCode");
    openapiRequiredFields.add("ownerState");
    openapiRequiredFields.add("image");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Application
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Application.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Application is not found in the empty JSON string", Application.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Application.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("appDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appDescription").toString()));
      }
      if (!jsonObj.get("appName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appName").toString()));
      }
      if (!jsonObj.get("appUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appUrl").toString()));
      }
      if (!jsonObj.get("ownerAddressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerAddressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerAddressLine1").toString()));
      }
      if (!jsonObj.get("ownerAddressLine2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerAddressLine2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerAddressLine2").toString()));
      }
      if (!jsonObj.get("ownerCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerCity").toString()));
      }
      if (!jsonObj.get("ownerCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerCountry").toString()));
      }
      if (!jsonObj.get("ownerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerName").toString()));
      }
      if (!jsonObj.get("ownerPostalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerPostalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerPostalCode").toString()));
      }
      if (!jsonObj.get("ownerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerState").toString()));
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Application.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Application' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Application> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Application.class));

       return (TypeAdapter<T>) new TypeAdapter<Application>() {
           @Override
           public void write(JsonWriter out, Application value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Application read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Application instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Application given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Application
  * @throws IOException if the JSON string is invalid with respect to Application
  */
  public static Application fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Application.class);
  }

 /**
  * Convert an instance of Application to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

