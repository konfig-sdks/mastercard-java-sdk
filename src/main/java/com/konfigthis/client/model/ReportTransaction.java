/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportTransaction
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportTransaction {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_POSTED_DATE = "postedDate";
  @SerializedName(SERIALIZED_NAME_POSTED_DATE)
  private Long postedDate;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_NORMALIZED_PAYEE = "normalizedPayee";
  @SerializedName(SERIALIZED_NAME_NORMALIZED_PAYEE)
  private String normalizedPayee;

  public static final String SERIALIZED_NAME_INSTITUTION_TRANSACTION_ID = "institutionTransactionId";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_TRANSACTION_ID)
  private String institutionTransactionId;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_SECURITY_TYPE = "securityType";
  @SerializedName(SERIALIZED_NAME_SECURITY_TYPE)
  private String securityType;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_COMMISSION = "commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  private Double commission;

  public ReportTransaction() {
  }

  public ReportTransaction description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the transaction, as provided by the institution (often known as &#x60;payee&#x60;). In the event that this field is left blank by the institution, Finicity will pass a value of \&quot;No description provided by institution\&quot;. All other values are provided by the institution.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ATM CHECK DEPOSIT mm/dd", required = true, value = "The description of the transaction, as provided by the institution (often known as `payee`). In the event that this field is left blank by the institution, Finicity will pass a value of \"No description provided by institution\". All other values are provided by the institution.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ReportTransaction id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * A transaction ID
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "21284820852", required = true, value = "A transaction ID")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public ReportTransaction amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public ReportTransaction amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public ReportTransaction postedDate(Long postedDate) {
    
    
    
    
    this.postedDate = postedDate;
    return this;
  }

   /**
   * A timestamp showing when the transaction was posted or cleared by the institution
   * @return postedDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1571313600", required = true, value = "A timestamp showing when the transaction was posted or cleared by the institution")

  public Long getPostedDate() {
    return postedDate;
  }


  public void setPostedDate(Long postedDate) {
    
    
    
    this.postedDate = postedDate;
  }


  public ReportTransaction memo(String memo) {
    
    
    
    
    this.memo = memo;
    return this;
  }

   /**
   * The memo field of the transaction, as provided by the institution. The institution must provide either a description, a memo, or both. It is recommended to concatenate the two fields into a single value.
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Some St Somewhere City State", value = "The memo field of the transaction, as provided by the institution. The institution must provide either a description, a memo, or both. It is recommended to concatenate the two fields into a single value.")

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    
    
    
    this.memo = memo;
  }


  public ReportTransaction normalizedPayee(String normalizedPayee) {
    
    
    
    
    this.normalizedPayee = normalizedPayee;
    return this;
  }

   /**
   * A normalized payee, derived from the transaction&#39;s &#x60;description&#x60; and &#x60;memo&#x60; fields
   * @return normalizedPayee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "T-Mobile", value = "A normalized payee, derived from the transaction's `description` and `memo` fields")

  public String getNormalizedPayee() {
    return normalizedPayee;
  }


  public void setNormalizedPayee(String normalizedPayee) {
    
    
    
    this.normalizedPayee = normalizedPayee;
  }


  public ReportTransaction institutionTransactionId(String institutionTransactionId) {
    
    
    
    
    this.institutionTransactionId = institutionTransactionId;
    return this;
  }

   /**
   * The unique identifier given by the FI for each transaction
   * @return institutionTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0000000000", value = "The unique identifier given by the FI for each transaction")

  public String getInstitutionTransactionId() {
    return institutionTransactionId;
  }


  public void setInstitutionTransactionId(String institutionTransactionId) {
    
    
    
    this.institutionTransactionId = institutionTransactionId;
  }


  public ReportTransaction category(String category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * One of the values from Categories (assigned based on the payee name)
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Income", value = "One of the values from Categories (assigned based on the payee name)")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    
    
    
    this.category = category;
  }


  public ReportTransaction type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * One of the values from transaction types
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "debit", value = "One of the values from transaction types")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public ReportTransaction securityType(String securityType) {
    
    
    
    
    this.securityType = securityType;
    return this;
  }

   /**
   * The type of investment security (VOA only)
   * @return securityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Stock", value = "The type of investment security (VOA only)")

  public String getSecurityType() {
    return securityType;
  }


  public void setSecurityType(String securityType) {
    
    
    
    this.securityType = securityType;
  }


  public ReportTransaction symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Investment symbol (VOA only)
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DAL", value = "Investment symbol (VOA only)")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public ReportTransaction commission(Double commission) {
    
    
    
    
    this.commission = commission;
    return this;
  }

  public ReportTransaction commission(Integer commission) {
    
    
    
    
    this.commission = commission.doubleValue();
    return this;
  }

   /**
   * A commission amount
   * @return commission
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "A commission amount")

  public Double getCommission() {
    return commission;
  }


  public void setCommission(Double commission) {
    
    
    
    this.commission = commission;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportTransaction instance itself
   */
  public ReportTransaction putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportTransaction reportTransaction = (ReportTransaction) o;
    return Objects.equals(this.description, reportTransaction.description) &&
        Objects.equals(this.id, reportTransaction.id) &&
        Objects.equals(this.amount, reportTransaction.amount) &&
        Objects.equals(this.postedDate, reportTransaction.postedDate) &&
        Objects.equals(this.memo, reportTransaction.memo) &&
        Objects.equals(this.normalizedPayee, reportTransaction.normalizedPayee) &&
        Objects.equals(this.institutionTransactionId, reportTransaction.institutionTransactionId) &&
        Objects.equals(this.category, reportTransaction.category) &&
        Objects.equals(this.type, reportTransaction.type) &&
        Objects.equals(this.securityType, reportTransaction.securityType) &&
        Objects.equals(this.symbol, reportTransaction.symbol) &&
        Objects.equals(this.commission, reportTransaction.commission)&&
        Objects.equals(this.additionalProperties, reportTransaction.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, amount, postedDate, memo, normalizedPayee, institutionTransactionId, category, type, securityType, symbol, commission, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportTransaction {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    postedDate: ").append(toIndentedString(postedDate)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    normalizedPayee: ").append(toIndentedString(normalizedPayee)).append("\n");
    sb.append("    institutionTransactionId: ").append(toIndentedString(institutionTransactionId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    securityType: ").append(toIndentedString(securityType)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("amount");
    openapiFields.add("postedDate");
    openapiFields.add("memo");
    openapiFields.add("normalizedPayee");
    openapiFields.add("institutionTransactionId");
    openapiFields.add("category");
    openapiFields.add("type");
    openapiFields.add("securityType");
    openapiFields.add("symbol");
    openapiFields.add("commission");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("postedDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportTransaction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportTransaction is not found in the empty JSON string", ReportTransaction.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportTransaction.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("normalizedPayee") != null && !jsonObj.get("normalizedPayee").isJsonNull()) && !jsonObj.get("normalizedPayee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalizedPayee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalizedPayee").toString()));
      }
      if ((jsonObj.get("institutionTransactionId") != null && !jsonObj.get("institutionTransactionId").isJsonNull()) && !jsonObj.get("institutionTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institutionTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institutionTransactionId").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("securityType") != null && !jsonObj.get("securityType").isJsonNull()) && !jsonObj.get("securityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityType").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportTransaction>() {
           @Override
           public void write(JsonWriter out, ReportTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportTransaction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportTransaction instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportTransaction
  * @throws IOException if the JSON string is invalid with respect to ReportTransaction
  */
  public static ReportTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportTransaction.class);
  }

 /**
  * Convert an instance of ReportTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

