/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * List of account owner Identity Insights
 */
@ApiModel(description = "List of account owner Identity Insights")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AccountOwnerIdentityInsights {
  public static final String SERIALIZED_NAME_IS_EMAIL_VALID = "isEmailValid";
  @SerializedName(SERIALIZED_NAME_IS_EMAIL_VALID)
  private Boolean isEmailValid;

  public static final String SERIALIZED_NAME_EMAIL_FIRST_SEEN_DAYS = "emailFirstSeenDays";
  @SerializedName(SERIALIZED_NAME_EMAIL_FIRST_SEEN_DAYS)
  private Double emailFirstSeenDays;

  public static final String SERIALIZED_NAME_EMAIL_DOMAIN_CREATION_DATE = "emailDomainCreationDate";
  @SerializedName(SERIALIZED_NAME_EMAIL_DOMAIN_CREATION_DATE)
  private String emailDomainCreationDate;

  public static final String SERIALIZED_NAME_EMAIL_TO_NAME = "emailToName";
  @SerializedName(SERIALIZED_NAME_EMAIL_TO_NAME)
  private String emailToName;

  public static final String SERIALIZED_NAME_IP_RISK = "ipRisk";
  @SerializedName(SERIALIZED_NAME_IP_RISK)
  private Double ipRisk;

  public static final String SERIALIZED_NAME_IP_RISK_SCORE = "ipRiskScore";
  @SerializedName(SERIALIZED_NAME_IP_RISK_SCORE)
  private Double ipRiskScore;

  public static final String SERIALIZED_NAME_IP_LAST_SEEN_DAYS = "ipLastSeenDays";
  @SerializedName(SERIALIZED_NAME_IP_LAST_SEEN_DAYS)
  private Double ipLastSeenDays;

  public static final String SERIALIZED_NAME_IP_GEOLOCATION_COUNTRY_CODE = "ipGeolocationCountryCode";
  @SerializedName(SERIALIZED_NAME_IP_GEOLOCATION_COUNTRY_CODE)
  private String ipGeolocationCountryCode;

  public static final String SERIALIZED_NAME_IP_GEOLOCATION_SUBDIVISION = "ipGeolocationSubdivision";
  @SerializedName(SERIALIZED_NAME_IP_GEOLOCATION_SUBDIVISION)
  private String ipGeolocationSubdivision;

  public static final String SERIALIZED_NAME_IP_PHONE_DISTANCE = "ipPhoneDistance";
  @SerializedName(SERIALIZED_NAME_IP_PHONE_DISTANCE)
  private Double ipPhoneDistance;

  public static final String SERIALIZED_NAME_IP_ADDRESS_DISTANCE = "ipAddressDistance";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_DISTANCE)
  private Double ipAddressDistance;

  public static final String SERIALIZED_NAME_IS_PHONE_VALID = "isPhoneValid";
  @SerializedName(SERIALIZED_NAME_IS_PHONE_VALID)
  private Boolean isPhoneValid;

  public static final String SERIALIZED_NAME_PHONE_LINE_TYPE = "phoneLineType";
  @SerializedName(SERIALIZED_NAME_PHONE_LINE_TYPE)
  private String phoneLineType;

  public static final String SERIALIZED_NAME_PHONE_CARRIER = "phoneCarrier";
  @SerializedName(SERIALIZED_NAME_PHONE_CARRIER)
  private String phoneCarrier;

  public static final String SERIALIZED_NAME_PHONE_COUNTRY_CODE = "phoneCountryCode";
  @SerializedName(SERIALIZED_NAME_PHONE_COUNTRY_CODE)
  private String phoneCountryCode;

  public static final String SERIALIZED_NAME_PHONE_LAST_SEEN_DAYS = "phoneLastSeenDays";
  @SerializedName(SERIALIZED_NAME_PHONE_LAST_SEEN_DAYS)
  private Double phoneLastSeenDays;

  public static final String SERIALIZED_NAME_PHONE_EMAIL_FIRST_SEEN_DAYS = "phoneEmailFirstSeenDays";
  @SerializedName(SERIALIZED_NAME_PHONE_EMAIL_FIRST_SEEN_DAYS)
  private Double phoneEmailFirstSeenDays;

  public static final String SERIALIZED_NAME_PHONE_TO_NAME = "phoneToName";
  @SerializedName(SERIALIZED_NAME_PHONE_TO_NAME)
  private String phoneToName;

  public static final String SERIALIZED_NAME_PHONE_TO_ADDRESS = "phoneToAddress";
  @SerializedName(SERIALIZED_NAME_PHONE_TO_ADDRESS)
  private String phoneToAddress;

  public static final String SERIALIZED_NAME_ADDRESS_VALIDITY_LEVEL = "addressValidityLevel";
  @SerializedName(SERIALIZED_NAME_ADDRESS_VALIDITY_LEVEL)
  private Double addressValidityLevel;

  public static final String SERIALIZED_NAME_ADDRESS_TO_NAME = "addressToName";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TO_NAME)
  private String addressToName;

  public static final String SERIALIZED_NAME_IDENTITY_NETWORK_SCORE = "identityNetworkScore";
  @SerializedName(SERIALIZED_NAME_IDENTITY_NETWORK_SCORE)
  private Double identityNetworkScore;

  public static final String SERIALIZED_NAME_IDENTITY_RISK_SCORE = "identityRiskScore";
  @SerializedName(SERIALIZED_NAME_IDENTITY_RISK_SCORE)
  private Double identityRiskScore;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<String> warnings = null;

  public AccountOwnerIdentityInsights() {
  }

  public AccountOwnerIdentityInsights isEmailValid(Boolean isEmailValid) {
    
    
    
    
    this.isEmailValid = isEmailValid;
    return this;
  }

   /**
   * True if the email address is valid.
   * @return isEmailValid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "True if the email address is valid.")

  public Boolean getIsEmailValid() {
    return isEmailValid;
  }


  public void setIsEmailValid(Boolean isEmailValid) {
    
    
    
    this.isEmailValid = isEmailValid;
  }


  public AccountOwnerIdentityInsights emailFirstSeenDays(Double emailFirstSeenDays) {
    
    
    
    
    this.emailFirstSeenDays = emailFirstSeenDays;
    return this;
  }

  public AccountOwnerIdentityInsights emailFirstSeenDays(Integer emailFirstSeenDays) {
    
    
    
    
    this.emailFirstSeenDays = emailFirstSeenDays.doubleValue();
    return this;
  }

   /**
   * Count of days since the email was first observed in Ekata&#39;s Identity Network. If the email has not been observed before, first_seen_days will be 0.
   * @return emailFirstSeenDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "453", value = "Count of days since the email was first observed in Ekata's Identity Network. If the email has not been observed before, first_seen_days will be 0.")

  public Double getEmailFirstSeenDays() {
    return emailFirstSeenDays;
  }


  public void setEmailFirstSeenDays(Double emailFirstSeenDays) {
    
    
    
    this.emailFirstSeenDays = emailFirstSeenDays;
  }


  public AccountOwnerIdentityInsights emailDomainCreationDate(String emailDomainCreationDate) {
    
    
    
    
    this.emailDomainCreationDate = emailDomainCreationDate;
    return this;
  }

   /**
   * Returns a date that the email domain was created.
   * @return emailDomainCreationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2011-06-29T00:00:00.000Z", value = "Returns a date that the email domain was created.")

  public String getEmailDomainCreationDate() {
    return emailDomainCreationDate;
  }


  public void setEmailDomainCreationDate(String emailDomainCreationDate) {
    
    
    
    this.emailDomainCreationDate = emailDomainCreationDate;
  }


  public AccountOwnerIdentityInsights emailToName(String emailToName) {
    
    
    
    
    this.emailToName = emailToName;
    return this;
  }

   /**
   * The match status between the input name and the queried entity. * not found * match * no-match
   * @return emailToName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "not found", value = "The match status between the input name and the queried entity. * not found * match * no-match")

  public String getEmailToName() {
    return emailToName;
  }


  public void setEmailToName(String emailToName) {
    
    
    
    this.emailToName = emailToName;
  }


  public AccountOwnerIdentityInsights ipRisk(Double ipRisk) {
    
    
    
    
    this.ipRisk = ipRisk;
    return this;
  }

  public AccountOwnerIdentityInsights ipRisk(Integer ipRisk) {
    
    
    
    
    this.ipRisk = ipRisk.doubleValue();
    return this;
  }

   /**
   * True if the IP address is considered risky, based on multiple IP data points and velocity calculations.
   * @return ipRisk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the IP address is considered risky, based on multiple IP data points and velocity calculations.")

  public Double getIpRisk() {
    return ipRisk;
  }


  public void setIpRisk(Double ipRisk) {
    
    
    
    this.ipRisk = ipRisk;
  }


  public AccountOwnerIdentityInsights ipRiskScore(Double ipRiskScore) {
    
    
    
    
    this.ipRiskScore = ipRiskScore;
    return this;
  }

  public AccountOwnerIdentityInsights ipRiskScore(Integer ipRiskScore) {
    
    
    
    
    this.ipRiskScore = ipRiskScore.doubleValue();
    return this;
  }

   /**
   * Comprehensive risk score associated with an IP address, with a higher score indicating a riskier IP address. A number between 0 and 1 rounded to three decimal places.
   * @return ipRiskScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.123", value = "Comprehensive risk score associated with an IP address, with a higher score indicating a riskier IP address. A number between 0 and 1 rounded to three decimal places.")

  public Double getIpRiskScore() {
    return ipRiskScore;
  }


  public void setIpRiskScore(Double ipRiskScore) {
    
    
    
    this.ipRiskScore = ipRiskScore;
  }


  public AccountOwnerIdentityInsights ipLastSeenDays(Double ipLastSeenDays) {
    
    
    
    
    this.ipLastSeenDays = ipLastSeenDays;
    return this;
  }

  public AccountOwnerIdentityInsights ipLastSeenDays(Integer ipLastSeenDays) {
    
    
    
    
    this.ipLastSeenDays = ipLastSeenDays.doubleValue();
    return this;
  }

   /**
   * Count of days since the IP address was last observed in Ekata&#39;s Identity Network. If the IP address has not been observed before, IpLastSeenDays will be 0.
   * @return ipLastSeenDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "15", value = "Count of days since the IP address was last observed in Ekata's Identity Network. If the IP address has not been observed before, IpLastSeenDays will be 0.")

  public Double getIpLastSeenDays() {
    return ipLastSeenDays;
  }


  public void setIpLastSeenDays(Double ipLastSeenDays) {
    
    
    
    this.ipLastSeenDays = ipLastSeenDays;
  }


  public AccountOwnerIdentityInsights ipGeolocationCountryCode(String ipGeolocationCountryCode) {
    
    
    
    
    this.ipGeolocationCountryCode = ipGeolocationCountryCode;
    return this;
  }

   /**
   * The ISO-3166 alpha-2 country code associated with the geolocation of the IP address.
   * @return ipGeolocationCountryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "The ISO-3166 alpha-2 country code associated with the geolocation of the IP address.")

  public String getIpGeolocationCountryCode() {
    return ipGeolocationCountryCode;
  }


  public void setIpGeolocationCountryCode(String ipGeolocationCountryCode) {
    
    
    
    this.ipGeolocationCountryCode = ipGeolocationCountryCode;
  }


  public AccountOwnerIdentityInsights ipGeolocationSubdivision(String ipGeolocationSubdivision) {
    
    
    
    
    this.ipGeolocationSubdivision = ipGeolocationSubdivision;
    return this;
  }

   /**
   * More granular detail about the IP address location.
   * @return ipGeolocationSubdivision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Oregon", value = "More granular detail about the IP address location.")

  public String getIpGeolocationSubdivision() {
    return ipGeolocationSubdivision;
  }


  public void setIpGeolocationSubdivision(String ipGeolocationSubdivision) {
    
    
    
    this.ipGeolocationSubdivision = ipGeolocationSubdivision;
  }


  public AccountOwnerIdentityInsights ipPhoneDistance(Double ipPhoneDistance) {
    
    
    
    
    this.ipPhoneDistance = ipPhoneDistance;
    return this;
  }

  public AccountOwnerIdentityInsights ipPhoneDistance(Integer ipPhoneDistance) {
    
    
    
    
    this.ipPhoneDistance = ipPhoneDistance.doubleValue();
    return this;
  }

   /**
   * The distance (in miles) between the IP address and the closest physical address associated with the phone number.
   * @return ipPhoneDistance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200", value = "The distance (in miles) between the IP address and the closest physical address associated with the phone number.")

  public Double getIpPhoneDistance() {
    return ipPhoneDistance;
  }


  public void setIpPhoneDistance(Double ipPhoneDistance) {
    
    
    
    this.ipPhoneDistance = ipPhoneDistance;
  }


  public AccountOwnerIdentityInsights ipAddressDistance(Double ipAddressDistance) {
    
    
    
    
    this.ipAddressDistance = ipAddressDistance;
    return this;
  }

  public AccountOwnerIdentityInsights ipAddressDistance(Integer ipAddressDistance) {
    
    
    
    
    this.ipAddressDistance = ipAddressDistance.doubleValue();
    return this;
  }

   /**
   * The distance (in miles) between the IP address and the physical address.
   * @return ipAddressDistance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "210", value = "The distance (in miles) between the IP address and the physical address.")

  public Double getIpAddressDistance() {
    return ipAddressDistance;
  }


  public void setIpAddressDistance(Double ipAddressDistance) {
    
    
    
    this.ipAddressDistance = ipAddressDistance;
  }


  public AccountOwnerIdentityInsights isPhoneValid(Boolean isPhoneValid) {
    
    
    
    
    this.isPhoneValid = isPhoneValid;
    return this;
  }

   /**
   * True if the phone number is valid.
   * @return isPhoneValid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "True if the phone number is valid.")

  public Boolean getIsPhoneValid() {
    return isPhoneValid;
  }


  public void setIsPhoneValid(Boolean isPhoneValid) {
    
    
    
    this.isPhoneValid = isPhoneValid;
  }


  public AccountOwnerIdentityInsights phoneLineType(String phoneLineType) {
    
    
    
    
    this.phoneLineType = phoneLineType;
    return this;
  }

   /**
   * The line type of the phone number. * landline - traditional wired phone line. * fixed-voip - VoIP-based fixed line phones. * mobile - wireless phone line. * voicemail - voicemail-only service. * toll-free - callee pays for call. * premium - caller pays a premium for the call-e.g., 976 area code. * non-fixed-voip - Skype, for example * other - anything that does not match the previous categories.
   * @return phoneLineType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "mobile", value = "The line type of the phone number. * landline - traditional wired phone line. * fixed-voip - VoIP-based fixed line phones. * mobile - wireless phone line. * voicemail - voicemail-only service. * toll-free - callee pays for call. * premium - caller pays a premium for the call-e.g., 976 area code. * non-fixed-voip - Skype, for example * other - anything that does not match the previous categories.")

  public String getPhoneLineType() {
    return phoneLineType;
  }


  public void setPhoneLineType(String phoneLineType) {
    
    
    
    this.phoneLineType = phoneLineType;
  }


  public AccountOwnerIdentityInsights phoneCarrier(String phoneCarrier) {
    
    
    
    
    this.phoneCarrier = phoneCarrier;
    return this;
  }

   /**
   * The company that provides voice and/or data services for the phone number. Carriers are returned at the MVNO level.
   * @return phoneCarrier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Vodafone UK ltd.", value = "The company that provides voice and/or data services for the phone number. Carriers are returned at the MVNO level.")

  public String getPhoneCarrier() {
    return phoneCarrier;
  }


  public void setPhoneCarrier(String phoneCarrier) {
    
    
    
    this.phoneCarrier = phoneCarrier;
  }


  public AccountOwnerIdentityInsights phoneCountryCode(String phoneCountryCode) {
    
    
    
    
    this.phoneCountryCode = phoneCountryCode;
    return this;
  }

   /**
   * The ISO-3166 alpha-2 country code associated with the phone number.
   * @return phoneCountryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UK", value = "The ISO-3166 alpha-2 country code associated with the phone number.")

  public String getPhoneCountryCode() {
    return phoneCountryCode;
  }


  public void setPhoneCountryCode(String phoneCountryCode) {
    
    
    
    this.phoneCountryCode = phoneCountryCode;
  }


  public AccountOwnerIdentityInsights phoneLastSeenDays(Double phoneLastSeenDays) {
    
    
    
    
    this.phoneLastSeenDays = phoneLastSeenDays;
    return this;
  }

  public AccountOwnerIdentityInsights phoneLastSeenDays(Integer phoneLastSeenDays) {
    
    
    
    
    this.phoneLastSeenDays = phoneLastSeenDays.doubleValue();
    return this;
  }

   /**
   * Count of days since the phone was last observed in Ekata&#39;s Identity Network. If the phone has not been observed before, &#x60;phoneLastSeenDays&#x60; will be 0.
   * @return phoneLastSeenDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "42", value = "Count of days since the phone was last observed in Ekata's Identity Network. If the phone has not been observed before, `phoneLastSeenDays` will be 0.")

  public Double getPhoneLastSeenDays() {
    return phoneLastSeenDays;
  }


  public void setPhoneLastSeenDays(Double phoneLastSeenDays) {
    
    
    
    this.phoneLastSeenDays = phoneLastSeenDays;
  }


  public AccountOwnerIdentityInsights phoneEmailFirstSeenDays(Double phoneEmailFirstSeenDays) {
    
    
    
    
    this.phoneEmailFirstSeenDays = phoneEmailFirstSeenDays;
    return this;
  }

  public AccountOwnerIdentityInsights phoneEmailFirstSeenDays(Integer phoneEmailFirstSeenDays) {
    
    
    
    
    this.phoneEmailFirstSeenDays = phoneEmailFirstSeenDays.doubleValue();
    return this;
  }

   /**
   * Count of days since the combination of phone and email was first observed in Ekata&#39;s Identity Network. If that combination has not been observed before, &#x60;phoneEmailFirstSeenDays&#x60; will be 0.
   * @return phoneEmailFirstSeenDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "54", value = "Count of days since the combination of phone and email was first observed in Ekata's Identity Network. If that combination has not been observed before, `phoneEmailFirstSeenDays` will be 0.")

  public Double getPhoneEmailFirstSeenDays() {
    return phoneEmailFirstSeenDays;
  }


  public void setPhoneEmailFirstSeenDays(Double phoneEmailFirstSeenDays) {
    
    
    
    this.phoneEmailFirstSeenDays = phoneEmailFirstSeenDays;
  }


  public AccountOwnerIdentityInsights phoneToName(String phoneToName) {
    
    
    
    
    this.phoneToName = phoneToName;
    return this;
  }

   /**
   * The match status between the input name and the queried entity.  * not-found  * match  * no-match
   * @return phoneToName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "match", value = "The match status between the input name and the queried entity.  * not-found  * match  * no-match")

  public String getPhoneToName() {
    return phoneToName;
  }


  public void setPhoneToName(String phoneToName) {
    
    
    
    this.phoneToName = phoneToName;
  }


  public AccountOwnerIdentityInsights phoneToAddress(String phoneToAddress) {
    
    
    
    
    this.phoneToAddress = phoneToAddress;
    return this;
  }

   /**
   * The match status between the input phone and the queried entity. * match - Phone location matches input address line 1, address line 2, city, state, and postal code.  * postal-match - Phone location postal code matches input address postal code.  * zip4-match - Phone location postal code zip+4 matches input address postal code zip+4.  * city-state-match - Phone location city and state matches input address city and state. * metro-match - Phone location is in the same metro area as input address.  * country-match - Phone location country matches input address country.  * no-match - Phone location does not match input address.
   * @return phoneToAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "match", value = "The match status between the input phone and the queried entity. * match - Phone location matches input address line 1, address line 2, city, state, and postal code.  * postal-match - Phone location postal code matches input address postal code.  * zip4-match - Phone location postal code zip+4 matches input address postal code zip+4.  * city-state-match - Phone location city and state matches input address city and state. * metro-match - Phone location is in the same metro area as input address.  * country-match - Phone location country matches input address country.  * no-match - Phone location does not match input address.")

  public String getPhoneToAddress() {
    return phoneToAddress;
  }


  public void setPhoneToAddress(String phoneToAddress) {
    
    
    
    this.phoneToAddress = phoneToAddress;
  }


  public AccountOwnerIdentityInsights addressValidityLevel(Double addressValidityLevel) {
    
    
    
    
    this.addressValidityLevel = addressValidityLevel;
    return this;
  }

  public AccountOwnerIdentityInsights addressValidityLevel(Integer addressValidityLevel) {
    
    
    
    
    this.addressValidityLevel = addressValidityLevel.doubleValue();
    return this;
  }

   /**
   * The most granular level to which the address could be validated. Ex. If the address was only valid to the city level (but not to the house level), it would return “valid_to_city”.   * missing_address - An input address was not provided.    * invalid - The input address is not valid.    * valid - The input address is valid.    * valid_to_country - The input address could only be validated to the country level. This means the country of the input address is valid, but the other elements of the input address were unable to be confirmed as valid or invalid.    * valid_to_city - The input address was validated to the city level. This means the country, state, city, and postal code of the input address are valid, but the street, house number, and subpremise of the input address were unable to be confirmed as valid or invalid.    * valid_to_street - The input address was validated to the street level. This means the country, state, city, postal code, and street of the input address are valid, but the house number and subpremise of the input address were unable to be confirmed as valid or invalid.      * valid_to_house_number - The input address was validated to the street and house number level. This means the country, state, city, postal code, street, and house number of the input address are valid, but the subpremise of the input address was unable to be confirmed as valid or invalid.      * valid_to_house_number_missing_apt - The input address was validated to the street and house number level. This means the country, state, city, postal code, street, and house number of the input address are valid, but the subpremise of the input address was missing and thus unable to be confirmed as valid or invalid.
   * @return addressValidityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The most granular level to which the address could be validated. Ex. If the address was only valid to the city level (but not to the house level), it would return “valid_to_city”.   * missing_address - An input address was not provided.    * invalid - The input address is not valid.    * valid - The input address is valid.    * valid_to_country - The input address could only be validated to the country level. This means the country of the input address is valid, but the other elements of the input address were unable to be confirmed as valid or invalid.    * valid_to_city - The input address was validated to the city level. This means the country, state, city, and postal code of the input address are valid, but the street, house number, and subpremise of the input address were unable to be confirmed as valid or invalid.    * valid_to_street - The input address was validated to the street level. This means the country, state, city, postal code, and street of the input address are valid, but the house number and subpremise of the input address were unable to be confirmed as valid or invalid.      * valid_to_house_number - The input address was validated to the street and house number level. This means the country, state, city, postal code, street, and house number of the input address are valid, but the subpremise of the input address was unable to be confirmed as valid or invalid.      * valid_to_house_number_missing_apt - The input address was validated to the street and house number level. This means the country, state, city, postal code, street, and house number of the input address are valid, but the subpremise of the input address was missing and thus unable to be confirmed as valid or invalid.")

  public Double getAddressValidityLevel() {
    return addressValidityLevel;
  }


  public void setAddressValidityLevel(Double addressValidityLevel) {
    
    
    
    this.addressValidityLevel = addressValidityLevel;
  }


  public AccountOwnerIdentityInsights addressToName(String addressToName) {
    
    
    
    
    this.addressToName = addressToName;
    return this;
  }

   /**
   * The match status between the input name and the queried entity. * not-found * match * no-match
   * @return addressToName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "match", value = "The match status between the input name and the queried entity. * not-found * match * no-match")

  public String getAddressToName() {
    return addressToName;
  }


  public void setAddressToName(String addressToName) {
    
    
    
    this.addressToName = addressToName;
  }


  public AccountOwnerIdentityInsights identityNetworkScore(Double identityNetworkScore) {
    
    
    
    
    this.identityNetworkScore = identityNetworkScore;
    return this;
  }

  public AccountOwnerIdentityInsights identityNetworkScore(Integer identityNetworkScore) {
    
    
    
    
    this.identityNetworkScore = identityNetworkScore.doubleValue();
    return this;
  }

   /**
   * Comprehensive network score built on behavioral insights such as velocity, popularity, volatility, and age of an attribute, with a higher score indicating a riskier account sign-up. A number between 0 and 1 rounded to three decimal places.
   * @return identityNetworkScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.574", value = "Comprehensive network score built on behavioral insights such as velocity, popularity, volatility, and age of an attribute, with a higher score indicating a riskier account sign-up. A number between 0 and 1 rounded to three decimal places.")

  public Double getIdentityNetworkScore() {
    return identityNetworkScore;
  }


  public void setIdentityNetworkScore(Double identityNetworkScore) {
    
    
    
    this.identityNetworkScore = identityNetworkScore;
  }


  public AccountOwnerIdentityInsights identityRiskScore(Double identityRiskScore) {
    
    
    
    
    this.identityRiskScore = identityRiskScore;
    return this;
  }

  public AccountOwnerIdentityInsights identityRiskScore(Integer identityRiskScore) {
    
    
    
    
    this.identityRiskScore = identityRiskScore.doubleValue();
    return this;
  }

   /**
   * Comprehensive identity risk score with a higher score indicating a riskier account sign-up.
   * @return identityRiskScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "275", value = "Comprehensive identity risk score with a higher score indicating a riskier account sign-up.")

  public Double getIdentityRiskScore() {
    return identityRiskScore;
  }


  public void setIdentityRiskScore(Double identityRiskScore) {
    
    
    
    this.identityRiskScore = identityRiskScore;
  }


  public AccountOwnerIdentityInsights warnings(List<String> warnings) {
    
    
    
    
    this.warnings = warnings;
    return this;
  }

  public AccountOwnerIdentityInsights addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getWarnings() {
    return warnings;
  }


  public void setWarnings(List<String> warnings) {
    
    
    
    this.warnings = warnings;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AccountOwnerIdentityInsights instance itself
   */
  public AccountOwnerIdentityInsights putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountOwnerIdentityInsights accountOwnerIdentityInsights = (AccountOwnerIdentityInsights) o;
    return Objects.equals(this.isEmailValid, accountOwnerIdentityInsights.isEmailValid) &&
        Objects.equals(this.emailFirstSeenDays, accountOwnerIdentityInsights.emailFirstSeenDays) &&
        Objects.equals(this.emailDomainCreationDate, accountOwnerIdentityInsights.emailDomainCreationDate) &&
        Objects.equals(this.emailToName, accountOwnerIdentityInsights.emailToName) &&
        Objects.equals(this.ipRisk, accountOwnerIdentityInsights.ipRisk) &&
        Objects.equals(this.ipRiskScore, accountOwnerIdentityInsights.ipRiskScore) &&
        Objects.equals(this.ipLastSeenDays, accountOwnerIdentityInsights.ipLastSeenDays) &&
        Objects.equals(this.ipGeolocationCountryCode, accountOwnerIdentityInsights.ipGeolocationCountryCode) &&
        Objects.equals(this.ipGeolocationSubdivision, accountOwnerIdentityInsights.ipGeolocationSubdivision) &&
        Objects.equals(this.ipPhoneDistance, accountOwnerIdentityInsights.ipPhoneDistance) &&
        Objects.equals(this.ipAddressDistance, accountOwnerIdentityInsights.ipAddressDistance) &&
        Objects.equals(this.isPhoneValid, accountOwnerIdentityInsights.isPhoneValid) &&
        Objects.equals(this.phoneLineType, accountOwnerIdentityInsights.phoneLineType) &&
        Objects.equals(this.phoneCarrier, accountOwnerIdentityInsights.phoneCarrier) &&
        Objects.equals(this.phoneCountryCode, accountOwnerIdentityInsights.phoneCountryCode) &&
        Objects.equals(this.phoneLastSeenDays, accountOwnerIdentityInsights.phoneLastSeenDays) &&
        Objects.equals(this.phoneEmailFirstSeenDays, accountOwnerIdentityInsights.phoneEmailFirstSeenDays) &&
        Objects.equals(this.phoneToName, accountOwnerIdentityInsights.phoneToName) &&
        Objects.equals(this.phoneToAddress, accountOwnerIdentityInsights.phoneToAddress) &&
        Objects.equals(this.addressValidityLevel, accountOwnerIdentityInsights.addressValidityLevel) &&
        Objects.equals(this.addressToName, accountOwnerIdentityInsights.addressToName) &&
        Objects.equals(this.identityNetworkScore, accountOwnerIdentityInsights.identityNetworkScore) &&
        Objects.equals(this.identityRiskScore, accountOwnerIdentityInsights.identityRiskScore) &&
        Objects.equals(this.warnings, accountOwnerIdentityInsights.warnings)&&
        Objects.equals(this.additionalProperties, accountOwnerIdentityInsights.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isEmailValid, emailFirstSeenDays, emailDomainCreationDate, emailToName, ipRisk, ipRiskScore, ipLastSeenDays, ipGeolocationCountryCode, ipGeolocationSubdivision, ipPhoneDistance, ipAddressDistance, isPhoneValid, phoneLineType, phoneCarrier, phoneCountryCode, phoneLastSeenDays, phoneEmailFirstSeenDays, phoneToName, phoneToAddress, addressValidityLevel, addressToName, identityNetworkScore, identityRiskScore, warnings, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountOwnerIdentityInsights {\n");
    sb.append("    isEmailValid: ").append(toIndentedString(isEmailValid)).append("\n");
    sb.append("    emailFirstSeenDays: ").append(toIndentedString(emailFirstSeenDays)).append("\n");
    sb.append("    emailDomainCreationDate: ").append(toIndentedString(emailDomainCreationDate)).append("\n");
    sb.append("    emailToName: ").append(toIndentedString(emailToName)).append("\n");
    sb.append("    ipRisk: ").append(toIndentedString(ipRisk)).append("\n");
    sb.append("    ipRiskScore: ").append(toIndentedString(ipRiskScore)).append("\n");
    sb.append("    ipLastSeenDays: ").append(toIndentedString(ipLastSeenDays)).append("\n");
    sb.append("    ipGeolocationCountryCode: ").append(toIndentedString(ipGeolocationCountryCode)).append("\n");
    sb.append("    ipGeolocationSubdivision: ").append(toIndentedString(ipGeolocationSubdivision)).append("\n");
    sb.append("    ipPhoneDistance: ").append(toIndentedString(ipPhoneDistance)).append("\n");
    sb.append("    ipAddressDistance: ").append(toIndentedString(ipAddressDistance)).append("\n");
    sb.append("    isPhoneValid: ").append(toIndentedString(isPhoneValid)).append("\n");
    sb.append("    phoneLineType: ").append(toIndentedString(phoneLineType)).append("\n");
    sb.append("    phoneCarrier: ").append(toIndentedString(phoneCarrier)).append("\n");
    sb.append("    phoneCountryCode: ").append(toIndentedString(phoneCountryCode)).append("\n");
    sb.append("    phoneLastSeenDays: ").append(toIndentedString(phoneLastSeenDays)).append("\n");
    sb.append("    phoneEmailFirstSeenDays: ").append(toIndentedString(phoneEmailFirstSeenDays)).append("\n");
    sb.append("    phoneToName: ").append(toIndentedString(phoneToName)).append("\n");
    sb.append("    phoneToAddress: ").append(toIndentedString(phoneToAddress)).append("\n");
    sb.append("    addressValidityLevel: ").append(toIndentedString(addressValidityLevel)).append("\n");
    sb.append("    addressToName: ").append(toIndentedString(addressToName)).append("\n");
    sb.append("    identityNetworkScore: ").append(toIndentedString(identityNetworkScore)).append("\n");
    sb.append("    identityRiskScore: ").append(toIndentedString(identityRiskScore)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isEmailValid");
    openapiFields.add("emailFirstSeenDays");
    openapiFields.add("emailDomainCreationDate");
    openapiFields.add("emailToName");
    openapiFields.add("ipRisk");
    openapiFields.add("ipRiskScore");
    openapiFields.add("ipLastSeenDays");
    openapiFields.add("ipGeolocationCountryCode");
    openapiFields.add("ipGeolocationSubdivision");
    openapiFields.add("ipPhoneDistance");
    openapiFields.add("ipAddressDistance");
    openapiFields.add("isPhoneValid");
    openapiFields.add("phoneLineType");
    openapiFields.add("phoneCarrier");
    openapiFields.add("phoneCountryCode");
    openapiFields.add("phoneLastSeenDays");
    openapiFields.add("phoneEmailFirstSeenDays");
    openapiFields.add("phoneToName");
    openapiFields.add("phoneToAddress");
    openapiFields.add("addressValidityLevel");
    openapiFields.add("addressToName");
    openapiFields.add("identityNetworkScore");
    openapiFields.add("identityRiskScore");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccountOwnerIdentityInsights
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AccountOwnerIdentityInsights.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountOwnerIdentityInsights is not found in the empty JSON string", AccountOwnerIdentityInsights.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("emailDomainCreationDate") != null && !jsonObj.get("emailDomainCreationDate").isJsonNull()) && !jsonObj.get("emailDomainCreationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailDomainCreationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailDomainCreationDate").toString()));
      }
      if ((jsonObj.get("emailToName") != null && !jsonObj.get("emailToName").isJsonNull()) && !jsonObj.get("emailToName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailToName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailToName").toString()));
      }
      if ((jsonObj.get("ipGeolocationCountryCode") != null && !jsonObj.get("ipGeolocationCountryCode").isJsonNull()) && !jsonObj.get("ipGeolocationCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipGeolocationCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipGeolocationCountryCode").toString()));
      }
      if ((jsonObj.get("ipGeolocationSubdivision") != null && !jsonObj.get("ipGeolocationSubdivision").isJsonNull()) && !jsonObj.get("ipGeolocationSubdivision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipGeolocationSubdivision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipGeolocationSubdivision").toString()));
      }
      if ((jsonObj.get("phoneLineType") != null && !jsonObj.get("phoneLineType").isJsonNull()) && !jsonObj.get("phoneLineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneLineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneLineType").toString()));
      }
      if ((jsonObj.get("phoneCarrier") != null && !jsonObj.get("phoneCarrier").isJsonNull()) && !jsonObj.get("phoneCarrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneCarrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneCarrier").toString()));
      }
      if ((jsonObj.get("phoneCountryCode") != null && !jsonObj.get("phoneCountryCode").isJsonNull()) && !jsonObj.get("phoneCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneCountryCode").toString()));
      }
      if ((jsonObj.get("phoneToName") != null && !jsonObj.get("phoneToName").isJsonNull()) && !jsonObj.get("phoneToName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneToName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneToName").toString()));
      }
      if ((jsonObj.get("phoneToAddress") != null && !jsonObj.get("phoneToAddress").isJsonNull()) && !jsonObj.get("phoneToAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneToAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneToAddress").toString()));
      }
      if ((jsonObj.get("addressToName") != null && !jsonObj.get("addressToName").isJsonNull()) && !jsonObj.get("addressToName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressToName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressToName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountOwnerIdentityInsights.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountOwnerIdentityInsights' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountOwnerIdentityInsights> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountOwnerIdentityInsights.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountOwnerIdentityInsights>() {
           @Override
           public void write(JsonWriter out, AccountOwnerIdentityInsights value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountOwnerIdentityInsights read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AccountOwnerIdentityInsights instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountOwnerIdentityInsights given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountOwnerIdentityInsights
  * @throws IOException if the JSON string is invalid with respect to AccountOwnerIdentityInsights
  */
  public static AccountOwnerIdentityInsights fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountOwnerIdentityInsights.class);
  }

 /**
  * Convert an instance of AccountOwnerIdentityInsights to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

