/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PaymentHistoryAccountSummary;
import com.konfigthis.client.model.PaymentHistoryCustomerMonthlySummary;
import com.konfigthis.client.model.PaymentHistoryTransactionsSummary;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Payment History computed analytics
 */
@ApiModel(description = "Payment History computed analytics")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentHistoryAnalytics {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_RISK_SCORE = "riskScore";
  @SerializedName(SERIALIZED_NAME_RISK_SCORE)
  private Double riskScore;

  public static final String SERIALIZED_NAME_TRANSACTION_HISTORY = "transactionHistory";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HISTORY)
  private Integer transactionHistory;

  public static final String SERIALIZED_NAME_TRANSACTIONS_SUMMARY = "transactionsSummary";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_SUMMARY)
  private PaymentHistoryTransactionsSummary transactionsSummary;

  public static final String SERIALIZED_NAME_ACCOUNT_SUMMARIES = "accountSummaries";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SUMMARIES)
  private List<PaymentHistoryAccountSummary> accountSummaries = null;

  public static final String SERIALIZED_NAME_CUSTOMER_SUMMARY_BY_MONTHS = "customerSummaryByMonths";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SUMMARY_BY_MONTHS)
  private List<PaymentHistoryCustomerMonthlySummary> customerSummaryByMonths = null;

  public PaymentHistoryAnalytics() {
  }

  public PaymentHistoryAnalytics status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Report status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "success", value = "Report status")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public PaymentHistoryAnalytics riskScore(Double riskScore) {
    
    
    
    
    this.riskScore = riskScore;
    return this;
  }

  public PaymentHistoryAnalytics riskScore(Integer riskScore) {
    
    
    
    
    this.riskScore = riskScore.doubleValue();
    return this;
  }

   /**
   * Calculated risk score
   * @return riskScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "82.45", value = "Calculated risk score")

  public Double getRiskScore() {
    return riskScore;
  }


  public void setRiskScore(Double riskScore) {
    
    
    
    this.riskScore = riskScore;
  }


  public PaymentHistoryAnalytics transactionHistory(Integer transactionHistory) {
    
    
    
    
    this.transactionHistory = transactionHistory;
    return this;
  }

   /**
   * Months of transactions
   * @return transactionHistory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12", value = "Months of transactions")

  public Integer getTransactionHistory() {
    return transactionHistory;
  }


  public void setTransactionHistory(Integer transactionHistory) {
    
    
    
    this.transactionHistory = transactionHistory;
  }


  public PaymentHistoryAnalytics transactionsSummary(PaymentHistoryTransactionsSummary transactionsSummary) {
    
    
    
    
    this.transactionsSummary = transactionsSummary;
    return this;
  }

   /**
   * Get transactionsSummary
   * @return transactionsSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentHistoryTransactionsSummary getTransactionsSummary() {
    return transactionsSummary;
  }


  public void setTransactionsSummary(PaymentHistoryTransactionsSummary transactionsSummary) {
    
    
    
    this.transactionsSummary = transactionsSummary;
  }


  public PaymentHistoryAnalytics accountSummaries(List<PaymentHistoryAccountSummary> accountSummaries) {
    
    
    
    
    this.accountSummaries = accountSummaries;
    return this;
  }

  public PaymentHistoryAnalytics addAccountSummariesItem(PaymentHistoryAccountSummary accountSummariesItem) {
    if (this.accountSummaries == null) {
      this.accountSummaries = new ArrayList<>();
    }
    this.accountSummaries.add(accountSummariesItem);
    return this;
  }

   /**
   * Account-level summary of transactions
   * @return accountSummaries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Account-level summary of transactions")

  public List<PaymentHistoryAccountSummary> getAccountSummaries() {
    return accountSummaries;
  }


  public void setAccountSummaries(List<PaymentHistoryAccountSummary> accountSummaries) {
    
    
    
    this.accountSummaries = accountSummaries;
  }


  public PaymentHistoryAnalytics customerSummaryByMonths(List<PaymentHistoryCustomerMonthlySummary> customerSummaryByMonths) {
    
    
    
    
    this.customerSummaryByMonths = customerSummaryByMonths;
    return this;
  }

  public PaymentHistoryAnalytics addCustomerSummaryByMonthsItem(PaymentHistoryCustomerMonthlySummary customerSummaryByMonthsItem) {
    if (this.customerSummaryByMonths == null) {
      this.customerSummaryByMonths = new ArrayList<>();
    }
    this.customerSummaryByMonths.add(customerSummaryByMonthsItem);
    return this;
  }

   /**
   * Customer-level summary of transactions per month
   * @return customerSummaryByMonths
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer-level summary of transactions per month")

  public List<PaymentHistoryCustomerMonthlySummary> getCustomerSummaryByMonths() {
    return customerSummaryByMonths;
  }


  public void setCustomerSummaryByMonths(List<PaymentHistoryCustomerMonthlySummary> customerSummaryByMonths) {
    
    
    
    this.customerSummaryByMonths = customerSummaryByMonths;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentHistoryAnalytics instance itself
   */
  public PaymentHistoryAnalytics putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentHistoryAnalytics paymentHistoryAnalytics = (PaymentHistoryAnalytics) o;
    return Objects.equals(this.status, paymentHistoryAnalytics.status) &&
        Objects.equals(this.riskScore, paymentHistoryAnalytics.riskScore) &&
        Objects.equals(this.transactionHistory, paymentHistoryAnalytics.transactionHistory) &&
        Objects.equals(this.transactionsSummary, paymentHistoryAnalytics.transactionsSummary) &&
        Objects.equals(this.accountSummaries, paymentHistoryAnalytics.accountSummaries) &&
        Objects.equals(this.customerSummaryByMonths, paymentHistoryAnalytics.customerSummaryByMonths)&&
        Objects.equals(this.additionalProperties, paymentHistoryAnalytics.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, riskScore, transactionHistory, transactionsSummary, accountSummaries, customerSummaryByMonths, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentHistoryAnalytics {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    riskScore: ").append(toIndentedString(riskScore)).append("\n");
    sb.append("    transactionHistory: ").append(toIndentedString(transactionHistory)).append("\n");
    sb.append("    transactionsSummary: ").append(toIndentedString(transactionsSummary)).append("\n");
    sb.append("    accountSummaries: ").append(toIndentedString(accountSummaries)).append("\n");
    sb.append("    customerSummaryByMonths: ").append(toIndentedString(customerSummaryByMonths)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("riskScore");
    openapiFields.add("transactionHistory");
    openapiFields.add("transactionsSummary");
    openapiFields.add("accountSummaries");
    openapiFields.add("customerSummaryByMonths");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentHistoryAnalytics
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentHistoryAnalytics.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentHistoryAnalytics is not found in the empty JSON string", PaymentHistoryAnalytics.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `transactionsSummary`
      if (jsonObj.get("transactionsSummary") != null && !jsonObj.get("transactionsSummary").isJsonNull()) {
        PaymentHistoryTransactionsSummary.validateJsonObject(jsonObj.getAsJsonObject("transactionsSummary"));
      }
      if (jsonObj.get("accountSummaries") != null && !jsonObj.get("accountSummaries").isJsonNull()) {
        JsonArray jsonArrayaccountSummaries = jsonObj.getAsJsonArray("accountSummaries");
        if (jsonArrayaccountSummaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accountSummaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accountSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("accountSummaries").toString()));
          }

          // validate the optional field `accountSummaries` (array)
          for (int i = 0; i < jsonArrayaccountSummaries.size(); i++) {
            PaymentHistoryAccountSummary.validateJsonObject(jsonArrayaccountSummaries.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerSummaryByMonths") != null && !jsonObj.get("customerSummaryByMonths").isJsonNull()) {
        JsonArray jsonArraycustomerSummaryByMonths = jsonObj.getAsJsonArray("customerSummaryByMonths");
        if (jsonArraycustomerSummaryByMonths != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerSummaryByMonths").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerSummaryByMonths` to be an array in the JSON string but got `%s`", jsonObj.get("customerSummaryByMonths").toString()));
          }

          // validate the optional field `customerSummaryByMonths` (array)
          for (int i = 0; i < jsonArraycustomerSummaryByMonths.size(); i++) {
            PaymentHistoryCustomerMonthlySummary.validateJsonObject(jsonArraycustomerSummaryByMonths.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentHistoryAnalytics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentHistoryAnalytics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentHistoryAnalytics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentHistoryAnalytics.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentHistoryAnalytics>() {
           @Override
           public void write(JsonWriter out, PaymentHistoryAnalytics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentHistoryAnalytics read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentHistoryAnalytics instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentHistoryAnalytics given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentHistoryAnalytics
  * @throws IOException if the JSON string is invalid with respect to PaymentHistoryAnalytics
  */
  public static PaymentHistoryAnalytics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentHistoryAnalytics.class);
  }

 /**
  * Convert an instance of PaymentHistoryAnalytics to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

