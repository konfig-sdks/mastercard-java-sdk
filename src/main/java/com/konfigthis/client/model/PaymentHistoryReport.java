/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ObbReportHeader;
import com.konfigthis.client.model.PaymentHistoryAnalytics;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Payment history report data as JSON
 */
@ApiModel(description = "Payment history report data as JSON")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentHistoryReport {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Long customerId;

  public static final String SERIALIZED_NAME_ACCOUNT_IDS = "accountIds";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_IDS)
  private List<Long> accountIds = null;

  public static final String SERIALIZED_NAME_BUSINESS_ID = "businessId";
  @SerializedName(SERIALIZED_NAME_BUSINESS_ID)
  private Integer businessId;

  public static final String SERIALIZED_NAME_REQUESTER_NAME = "requesterName";
  @SerializedName(SERIALIZED_NAME_REQUESTER_NAME)
  private String requesterName;

  public static final String SERIALIZED_NAME_REPORT_HEADER = "reportHeader";
  @SerializedName(SERIALIZED_NAME_REPORT_HEADER)
  private ObbReportHeader reportHeader;

  public static final String SERIALIZED_NAME_ANALYTICS = "analytics";
  @SerializedName(SERIALIZED_NAME_ANALYTICS)
  private PaymentHistoryAnalytics analytics;

  public PaymentHistoryReport() {
  }

  public PaymentHistoryReport title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title of the report
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Finicity Asset Ready Report (CRA)", required = true, value = "Title of the report")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public PaymentHistoryReport customerId(Long customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * A customer ID represented as a number. See Add Customer API for how to create a customer ID.
   * @return customerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1005061234", required = true, value = "A customer ID represented as a number. See Add Customer API for how to create a customer ID.")

  public Long getCustomerId() {
    return customerId;
  }


  public void setCustomerId(Long customerId) {
    
    
    
    this.customerId = customerId;
  }


  public PaymentHistoryReport accountIds(List<Long> accountIds) {
    
    
    
    
    this.accountIds = accountIds;
    return this;
  }

  public PaymentHistoryReport addAccountIdsItem(Long accountIdsItem) {
    if (this.accountIds == null) {
      this.accountIds = new ArrayList<>();
    }
    this.accountIds.add(accountIdsItem);
    return this;
  }

   /**
   * List of account IDs included in the report
   * @return accountIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of account IDs included in the report")

  public List<Long> getAccountIds() {
    return accountIds;
  }


  public void setAccountIds(List<Long> accountIds) {
    
    
    
    this.accountIds = accountIds;
  }


  public PaymentHistoryReport businessId(Integer businessId) {
    
    
    
    
    this.businessId = businessId;
    return this;
  }

   /**
   * Business ID
   * @return businessId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4444", value = "Business ID")

  public Integer getBusinessId() {
    return businessId;
  }


  public void setBusinessId(Integer businessId) {
    
    
    
    this.businessId = businessId;
  }


  public PaymentHistoryReport requesterName(String requesterName) {
    
    
    if (requesterName != null && requesterName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for requesterName. Length must be greater than or equal to 0.");
    }
    
    this.requesterName = requesterName;
    return this;
  }

   /**
   * Name of requester
   * @return requesterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mortgage ABC LLC", value = "Name of requester")

  public String getRequesterName() {
    return requesterName;
  }


  public void setRequesterName(String requesterName) {
    
    
    if (requesterName != null && requesterName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for requesterName. Length must be greater than or equal to 0.");
    }
    this.requesterName = requesterName;
  }


  public PaymentHistoryReport reportHeader(ObbReportHeader reportHeader) {
    
    
    
    
    this.reportHeader = reportHeader;
    return this;
  }

   /**
   * Customer and report metadata
   * @return reportHeader
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Customer and report metadata")

  public ObbReportHeader getReportHeader() {
    return reportHeader;
  }


  public void setReportHeader(ObbReportHeader reportHeader) {
    
    
    
    this.reportHeader = reportHeader;
  }


  public PaymentHistoryReport analytics(PaymentHistoryAnalytics analytics) {
    
    
    
    
    this.analytics = analytics;
    return this;
  }

   /**
   * Get analytics
   * @return analytics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentHistoryAnalytics getAnalytics() {
    return analytics;
  }


  public void setAnalytics(PaymentHistoryAnalytics analytics) {
    
    
    
    this.analytics = analytics;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentHistoryReport instance itself
   */
  public PaymentHistoryReport putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentHistoryReport paymentHistoryReport = (PaymentHistoryReport) o;
    return Objects.equals(this.title, paymentHistoryReport.title) &&
        Objects.equals(this.customerId, paymentHistoryReport.customerId) &&
        Objects.equals(this.accountIds, paymentHistoryReport.accountIds) &&
        Objects.equals(this.businessId, paymentHistoryReport.businessId) &&
        Objects.equals(this.requesterName, paymentHistoryReport.requesterName) &&
        Objects.equals(this.reportHeader, paymentHistoryReport.reportHeader) &&
        Objects.equals(this.analytics, paymentHistoryReport.analytics)&&
        Objects.equals(this.additionalProperties, paymentHistoryReport.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, customerId, accountIds, businessId, requesterName, reportHeader, analytics, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentHistoryReport {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    accountIds: ").append(toIndentedString(accountIds)).append("\n");
    sb.append("    businessId: ").append(toIndentedString(businessId)).append("\n");
    sb.append("    requesterName: ").append(toIndentedString(requesterName)).append("\n");
    sb.append("    reportHeader: ").append(toIndentedString(reportHeader)).append("\n");
    sb.append("    analytics: ").append(toIndentedString(analytics)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("customerId");
    openapiFields.add("accountIds");
    openapiFields.add("businessId");
    openapiFields.add("requesterName");
    openapiFields.add("reportHeader");
    openapiFields.add("analytics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("customerId");
    openapiRequiredFields.add("reportHeader");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentHistoryReport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentHistoryReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentHistoryReport is not found in the empty JSON string", PaymentHistoryReport.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentHistoryReport.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accountIds") != null && !jsonObj.get("accountIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountIds` to be an array in the JSON string but got `%s`", jsonObj.get("accountIds").toString()));
      }
      if ((jsonObj.get("requesterName") != null && !jsonObj.get("requesterName").isJsonNull()) && !jsonObj.get("requesterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requesterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requesterName").toString()));
      }
      // validate the required field `reportHeader`
      ObbReportHeader.validateJsonObject(jsonObj.getAsJsonObject("reportHeader"));
      // validate the optional field `analytics`
      if (jsonObj.get("analytics") != null && !jsonObj.get("analytics").isJsonNull()) {
        PaymentHistoryAnalytics.validateJsonObject(jsonObj.getAsJsonObject("analytics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentHistoryReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentHistoryReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentHistoryReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentHistoryReport.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentHistoryReport>() {
           @Override
           public void write(JsonWriter out, PaymentHistoryReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentHistoryReport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentHistoryReport instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentHistoryReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentHistoryReport
  * @throws IOException if the JSON string is invalid with respect to PaymentHistoryReport
  */
  public static PaymentHistoryReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentHistoryReport.class);
  }

 /**
  * Convert an instance of PaymentHistoryReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

