/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AppFinancialInstitutionStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Registration status details for the application
 */
@ApiModel(description = "Registration status details for the application")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AppStatus {
  public static final String SERIALIZED_NAME_PARTNER_ID = "partnerId";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  private String partnerId;

  public static final String SERIALIZED_NAME_PRE_APP_ID = "preAppId";
  @SerializedName(SERIALIZED_NAME_PRE_APP_ID)
  private String preAppId;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_APPLICATION_ID = "applicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE = "submittedDate";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE)
  private Long submittedDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private Long modifiedDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private String scopes;

  public static final String SERIALIZED_NAME_INSTITUTION_DETAILS = "institutionDetails";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_DETAILS)
  private List<AppFinancialInstitutionStatus> institutionDetails = null;

  public AppStatus() {
  }

  public AppStatus partnerId(String partnerId) {
    
    
    
    
    this.partnerId = partnerId;
    return this;
  }

   /**
   * Your Partner ID displayed in the [Developer Dashboard](https://developer.mastercard.com/account/log-in)
   * @return partnerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1234583871234", required = true, value = "Your Partner ID displayed in the [Developer Dashboard](https://developer.mastercard.com/account/log-in)")

  public String getPartnerId() {
    return partnerId;
  }


  public void setPartnerId(String partnerId) {
    
    
    
    this.partnerId = partnerId;
  }


  public AppStatus preAppId(String preAppId) {
    
    
    
    
    this.preAppId = preAppId;
    return this;
  }

   /**
   * Identifier to track the application registration from the App Registration and Get App Registration Status APIs
   * @return preAppId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2581", required = true, value = "Identifier to track the application registration from the App Registration and Get App Registration Status APIs")

  public String getPreAppId() {
    return preAppId;
  }


  public void setPreAppId(String preAppId) {
    
    
    
    this.preAppId = preAppId;
  }


  public AppStatus note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * A note on the registration. Typically used to indicate reasons for rejected apps.
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Approved", value = "A note on the registration. Typically used to indicate reasons for rejected apps.")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public AppStatus applicationId(String applicationId) {
    
    
    
    
    this.applicationId = applicationId;
    return this;
  }

   /**
   * &#x60;applicationId&#x60; value returned from the Get App Registration Status API and the partner assign the customers to. This cannot be changed once set. Only applicable in cases of partners with multiple registered applications. If the partner only has one app, this can usually be omitted. This field is populated after the app is in a status approved.
   * @return applicationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456789", value = "`applicationId` value returned from the Get App Registration Status API and the partner assign the customers to. This cannot be changed once set. Only applicable in cases of partners with multiple registered applications. If the partner only has one app, this can usually be omitted. This field is populated after the app is in a status approved.")

  public String getApplicationId() {
    return applicationId;
  }


  public void setApplicationId(String applicationId) {
    
    
    
    this.applicationId = applicationId;
  }


  public AppStatus appName(String appName) {
    
    
    
    
    this.appName = appName;
    return this;
  }

   /**
   * The name of the application assigned to the customer
   * @return appName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Awesome Budget App", required = true, value = "The name of the application assigned to the customer")

  public String getAppName() {
    return appName;
  }


  public void setAppName(String appName) {
    
    
    
    this.appName = appName;
  }


  public AppStatus submittedDate(Long submittedDate) {
    
    
    
    
    this.submittedDate = submittedDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return submittedDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1607450357", required = true, value = "A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getSubmittedDate() {
    return submittedDate;
  }


  public void setSubmittedDate(Long submittedDate) {
    
    
    
    this.submittedDate = submittedDate;
  }


  public AppStatus modifiedDate(Long modifiedDate) {
    
    
    
    
    this.modifiedDate = modifiedDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return modifiedDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1607450357", required = true, value = "A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getModifiedDate() {
    return modifiedDate;
  }


  public void setModifiedDate(Long modifiedDate) {
    
    
    
    this.modifiedDate = modifiedDate;
  }


  public AppStatus status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of an app registration request. \&quot;A\&quot; means approved. \&quot;P\&quot; means pending which is the status when initially submitted or when the app is modified and awaiting approval. \&quot;R\&quot; means rejected. If it is rejected there will be a note with the rejected reason.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "P", required = true, value = "The status of an app registration request. \"A\" means approved. \"P\" means pending which is the status when initially submitted or when the app is modified and awaiting approval. \"R\" means rejected. If it is rejected there will be a note with the rejected reason.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public AppStatus scopes(String scopes) {
    
    
    
    
    this.scopes = scopes;
    return this;
  }

   /**
   * Indicates scopes of data accessible to the app
   * @return scopes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Account Info", value = "Indicates scopes of data accessible to the app")

  public String getScopes() {
    return scopes;
  }


  public void setScopes(String scopes) {
    
    
    
    this.scopes = scopes;
  }


  public AppStatus institutionDetails(List<AppFinancialInstitutionStatus> institutionDetails) {
    
    
    
    
    this.institutionDetails = institutionDetails;
    return this;
  }

  public AppStatus addInstitutionDetailsItem(AppFinancialInstitutionStatus institutionDetailsItem) {
    if (this.institutionDetails == null) {
      this.institutionDetails = new ArrayList<>();
    }
    this.institutionDetails.add(institutionDetailsItem);
    return this;
  }

   /**
   * A list of the registration status for each FI for the application
   * @return institutionDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of the registration status for each FI for the application")

  public List<AppFinancialInstitutionStatus> getInstitutionDetails() {
    return institutionDetails;
  }


  public void setInstitutionDetails(List<AppFinancialInstitutionStatus> institutionDetails) {
    
    
    
    this.institutionDetails = institutionDetails;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AppStatus instance itself
   */
  public AppStatus putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppStatus appStatus = (AppStatus) o;
    return Objects.equals(this.partnerId, appStatus.partnerId) &&
        Objects.equals(this.preAppId, appStatus.preAppId) &&
        Objects.equals(this.note, appStatus.note) &&
        Objects.equals(this.applicationId, appStatus.applicationId) &&
        Objects.equals(this.appName, appStatus.appName) &&
        Objects.equals(this.submittedDate, appStatus.submittedDate) &&
        Objects.equals(this.modifiedDate, appStatus.modifiedDate) &&
        Objects.equals(this.status, appStatus.status) &&
        Objects.equals(this.scopes, appStatus.scopes) &&
        Objects.equals(this.institutionDetails, appStatus.institutionDetails)&&
        Objects.equals(this.additionalProperties, appStatus.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partnerId, preAppId, note, applicationId, appName, submittedDate, modifiedDate, status, scopes, institutionDetails, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppStatus {\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    preAppId: ").append(toIndentedString(preAppId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    submittedDate: ").append(toIndentedString(submittedDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    institutionDetails: ").append(toIndentedString(institutionDetails)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("partnerId");
    openapiFields.add("preAppId");
    openapiFields.add("note");
    openapiFields.add("applicationId");
    openapiFields.add("appName");
    openapiFields.add("submittedDate");
    openapiFields.add("modifiedDate");
    openapiFields.add("status");
    openapiFields.add("scopes");
    openapiFields.add("institutionDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("partnerId");
    openapiRequiredFields.add("preAppId");
    openapiRequiredFields.add("appName");
    openapiRequiredFields.add("submittedDate");
    openapiRequiredFields.add("modifiedDate");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AppStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppStatus is not found in the empty JSON string", AppStatus.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppStatus.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("partnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerId").toString()));
      }
      if (!jsonObj.get("preAppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preAppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preAppId").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("applicationId") != null && !jsonObj.get("applicationId").isJsonNull()) && !jsonObj.get("applicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationId").toString()));
      }
      if (!jsonObj.get("appName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appName").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull()) && !jsonObj.get("scopes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if (jsonObj.get("institutionDetails") != null && !jsonObj.get("institutionDetails").isJsonNull()) {
        JsonArray jsonArrayinstitutionDetails = jsonObj.getAsJsonArray("institutionDetails");
        if (jsonArrayinstitutionDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("institutionDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `institutionDetails` to be an array in the JSON string but got `%s`", jsonObj.get("institutionDetails").toString()));
          }

          // validate the optional field `institutionDetails` (array)
          for (int i = 0; i < jsonArrayinstitutionDetails.size(); i++) {
            AppFinancialInstitutionStatus.validateJsonObject(jsonArrayinstitutionDetails.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<AppStatus>() {
           @Override
           public void write(JsonWriter out, AppStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AppStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AppStatus instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppStatus
  * @throws IOException if the JSON string is invalid with respect to AppStatus
  */
  public static AppStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppStatus.class);
  }

 /**
  * Convert an instance of AppStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

