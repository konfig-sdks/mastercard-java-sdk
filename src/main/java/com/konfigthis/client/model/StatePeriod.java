/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Statistics for one period in the report of a StateAttribute.
 */
@ApiModel(description = "Statistics for one period in the report of a StateAttribute.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class StatePeriod {
  public static final String SERIALIZED_NAME_BEGINNING_VALUE = "beginningValue";
  @SerializedName(SERIALIZED_NAME_BEGINNING_VALUE)
  private Double beginningValue;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_ENDING_VALUE = "endingValue";
  @SerializedName(SERIALIZED_NAME_ENDING_VALUE)
  private Double endingValue;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Double max;

  public static final String SERIALIZED_NAME_MEAN = "mean";
  @SerializedName(SERIALIZED_NAME_MEAN)
  private Double mean;

  public static final String SERIALIZED_NAME_MEDIAN = "median";
  @SerializedName(SERIALIZED_NAME_MEDIAN)
  private Double median;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Double min;

  public static final String SERIALIZED_NAME_STANDARD_DEVIATION = "standardDeviation";
  @SerializedName(SERIALIZED_NAME_STANDARD_DEVIATION)
  private Double standardDeviation;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_SUM = "sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Double sum;

  public StatePeriod() {
  }

  public StatePeriod beginningValue(Double beginningValue) {
    
    
    
    
    this.beginningValue = beginningValue;
    return this;
  }

  public StatePeriod beginningValue(Integer beginningValue) {
    
    
    
    
    this.beginningValue = beginningValue.doubleValue();
    return this;
  }

   /**
   * Value on the first date in the period
   * @return beginningValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "60.21", required = true, value = "Value on the first date in the period")

  public Double getBeginningValue() {
    return beginningValue;
  }


  public void setBeginningValue(Double beginningValue) {
    
    
    
    this.beginningValue = beginningValue;
  }


  public StatePeriod count(Integer count) {
    
    
    
    
    this.count = count;
    return this;
  }

   /**
   * Count of data points during the period
   * @return count
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "Count of data points during the period")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    
    
    
    this.count = count;
  }


  public StatePeriod endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date for the period being reported
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Sat Dec 31 16:00:00 PST 2022", required = true, value = "End date for the period being reported")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public StatePeriod endingValue(Double endingValue) {
    
    
    
    
    this.endingValue = endingValue;
    return this;
  }

  public StatePeriod endingValue(Integer endingValue) {
    
    
    
    
    this.endingValue = endingValue.doubleValue();
    return this;
  }

   /**
   * Value on the last date in the period
   * @return endingValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "60.21", required = true, value = "Value on the last date in the period")

  public Double getEndingValue() {
    return endingValue;
  }


  public void setEndingValue(Double endingValue) {
    
    
    
    this.endingValue = endingValue;
  }


  public StatePeriod max(Double max) {
    
    
    
    
    this.max = max;
    return this;
  }

  public StatePeriod max(Integer max) {
    
    
    
    
    this.max = max.doubleValue();
    return this;
  }

   /**
   * Maximum amount during the period
   * @return max
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60.21", value = "Maximum amount during the period")

  public Double getMax() {
    return max;
  }


  public void setMax(Double max) {
    
    
    
    this.max = max;
  }


  public StatePeriod mean(Double mean) {
    
    
    
    
    this.mean = mean;
    return this;
  }

  public StatePeriod mean(Integer mean) {
    
    
    
    
    this.mean = mean.doubleValue();
    return this;
  }

   /**
   * Mean of amounts during the period
   * @return mean
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "42.22", value = "Mean of amounts during the period")

  public Double getMean() {
    return mean;
  }


  public void setMean(Double mean) {
    
    
    
    this.mean = mean;
  }


  public StatePeriod median(Double median) {
    
    
    
    
    this.median = median;
    return this;
  }

  public StatePeriod median(Integer median) {
    
    
    
    
    this.median = median.doubleValue();
    return this;
  }

   /**
   * Median of amounts during the period
   * @return median
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "42.22", value = "Median of amounts during the period")

  public Double getMedian() {
    return median;
  }


  public void setMedian(Double median) {
    
    
    
    this.median = median;
  }


  public StatePeriod min(Double min) {
    
    
    
    
    this.min = min;
    return this;
  }

  public StatePeriod min(Integer min) {
    
    
    
    
    this.min = min.doubleValue();
    return this;
  }

   /**
   * Minimum amount during the period
   * @return min
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "30.22", value = "Minimum amount during the period")

  public Double getMin() {
    return min;
  }


  public void setMin(Double min) {
    
    
    
    this.min = min;
  }


  public StatePeriod standardDeviation(Double standardDeviation) {
    
    
    
    
    this.standardDeviation = standardDeviation;
    return this;
  }

  public StatePeriod standardDeviation(Integer standardDeviation) {
    
    
    
    
    this.standardDeviation = standardDeviation.doubleValue();
    return this;
  }

   /**
   * Standard deviation of amounts during the period
   * @return standardDeviation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14.995", value = "Standard deviation of amounts during the period")

  public Double getStandardDeviation() {
    return standardDeviation;
  }


  public void setStandardDeviation(Double standardDeviation) {
    
    
    
    this.standardDeviation = standardDeviation;
  }


  public StatePeriod startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date for the period being reported
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Wed Nov 30 16:00:00 PST 2022", required = true, value = "Start date for the period being reported")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public StatePeriod sum(Double sum) {
    
    
    
    
    this.sum = sum;
    return this;
  }

  public StatePeriod sum(Integer sum) {
    
    
    
    
    this.sum = sum.doubleValue();
    return this;
  }

   /**
   * Sum of amounts during the period
   * @return sum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "90.43", value = "Sum of amounts during the period")

  public Double getSum() {
    return sum;
  }


  public void setSum(Double sum) {
    
    
    
    this.sum = sum;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StatePeriod instance itself
   */
  public StatePeriod putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatePeriod statePeriod = (StatePeriod) o;
    return Objects.equals(this.beginningValue, statePeriod.beginningValue) &&
        Objects.equals(this.count, statePeriod.count) &&
        Objects.equals(this.endDate, statePeriod.endDate) &&
        Objects.equals(this.endingValue, statePeriod.endingValue) &&
        Objects.equals(this.max, statePeriod.max) &&
        Objects.equals(this.mean, statePeriod.mean) &&
        Objects.equals(this.median, statePeriod.median) &&
        Objects.equals(this.min, statePeriod.min) &&
        Objects.equals(this.standardDeviation, statePeriod.standardDeviation) &&
        Objects.equals(this.startDate, statePeriod.startDate) &&
        Objects.equals(this.sum, statePeriod.sum)&&
        Objects.equals(this.additionalProperties, statePeriod.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beginningValue, count, endDate, endingValue, max, mean, median, min, standardDeviation, startDate, sum, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatePeriod {\n");
    sb.append("    beginningValue: ").append(toIndentedString(beginningValue)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    endingValue: ").append(toIndentedString(endingValue)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    median: ").append(toIndentedString(median)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    standardDeviation: ").append(toIndentedString(standardDeviation)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beginningValue");
    openapiFields.add("count");
    openapiFields.add("endDate");
    openapiFields.add("endingValue");
    openapiFields.add("max");
    openapiFields.add("mean");
    openapiFields.add("median");
    openapiFields.add("min");
    openapiFields.add("standardDeviation");
    openapiFields.add("startDate");
    openapiFields.add("sum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("beginningValue");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("endingValue");
    openapiRequiredFields.add("startDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StatePeriod
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StatePeriod.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatePeriod is not found in the empty JSON string", StatePeriod.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StatePeriod.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatePeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatePeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatePeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatePeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<StatePeriod>() {
           @Override
           public void write(JsonWriter out, StatePeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StatePeriod read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             StatePeriod instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StatePeriod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StatePeriod
  * @throws IOException if the JSON string is invalid with respect to StatePeriod
  */
  public static StatePeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatePeriod.class);
  }

 /**
  * Convert an instance of StatePeriod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

