/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Statement represents the bank statements for a given customer&#39;s account
 */
@ApiModel(description = "Statement represents the bank statements for a given customer's account")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomerAccountMultipleStatement {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_AS_OF_DATE = "asOfDate";
  @SerializedName(SERIALIZED_NAME_AS_OF_DATE)
  private Long asOfDate;

  public static final String SERIALIZED_NAME_DOCUMENT_DATE = "documentDate";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DATE)
  private String documentDate;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public CustomerAccountMultipleStatement() {
  }

  public CustomerAccountMultipleStatement description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Date range representing the period for when the statement data is generated.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date range representing the period for when the statement data is generated.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CustomerAccountMultipleStatement id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * An asset ID. Generated by Connect or by using the Store Customer Pay Statement API.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "097545c5-1c2a-4f20-a5ef-77f0820344c9-2018601178", value = "An asset ID. Generated by Connect or by using the Store Customer Pay Statement API.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CustomerAccountMultipleStatement asOfDate(Long asOfDate) {
    
    
    
    
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return asOfDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1607450357", required = true, value = "A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getAsOfDate() {
    return asOfDate;
  }


  public void setAsOfDate(Long asOfDate) {
    
    
    
    this.asOfDate = asOfDate;
  }


  public CustomerAccountMultipleStatement documentDate(String documentDate) {
    
    
    
    
    this.documentDate = documentDate;
    return this;
  }

   /**
   * The date when the statement was generated.
   * @return documentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the statement was generated.")

  public String getDocumentDate() {
    return documentDate;
  }


  public void setDocumentDate(String documentDate) {
    
    
    
    this.documentDate = documentDate;
  }


  public CustomerAccountMultipleStatement index(String index) {
    
    
    
    
    this.index = index;
    return this;
  }

   /**
   * Returns the index of the month for the statement. It may go up to 24 months back. The valid range is 1-24.
   * @return index
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Returns the index of the month for the statement. It may go up to 24 months back. The valid range is 1-24.")

  public String getIndex() {
    return index;
  }


  public void setIndex(String index) {
    
    
    
    this.index = index;
  }


  public CustomerAccountMultipleStatement code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Error code for  the bank statement not generated
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Error code for  the bank statement not generated")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public CustomerAccountMultipleStatement message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * Error message for the bank statement not generated
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Error message for the bank statement not generated")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomerAccountMultipleStatement instance itself
   */
  public CustomerAccountMultipleStatement putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerAccountMultipleStatement customerAccountMultipleStatement = (CustomerAccountMultipleStatement) o;
    return Objects.equals(this.description, customerAccountMultipleStatement.description) &&
        Objects.equals(this.id, customerAccountMultipleStatement.id) &&
        Objects.equals(this.asOfDate, customerAccountMultipleStatement.asOfDate) &&
        Objects.equals(this.documentDate, customerAccountMultipleStatement.documentDate) &&
        Objects.equals(this.index, customerAccountMultipleStatement.index) &&
        Objects.equals(this.code, customerAccountMultipleStatement.code) &&
        Objects.equals(this.message, customerAccountMultipleStatement.message)&&
        Objects.equals(this.additionalProperties, customerAccountMultipleStatement.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, asOfDate, documentDate, index, code, message, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerAccountMultipleStatement {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    documentDate: ").append(toIndentedString(documentDate)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("asOfDate");
    openapiFields.add("documentDate");
    openapiFields.add("index");
    openapiFields.add("code");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asOfDate");
    openapiRequiredFields.add("index");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerAccountMultipleStatement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerAccountMultipleStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerAccountMultipleStatement is not found in the empty JSON string", CustomerAccountMultipleStatement.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerAccountMultipleStatement.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("documentDate") != null && !jsonObj.get("documentDate").isJsonNull()) && !jsonObj.get("documentDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentDate").toString()));
      }
      if (!jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerAccountMultipleStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerAccountMultipleStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerAccountMultipleStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerAccountMultipleStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerAccountMultipleStatement>() {
           @Override
           public void write(JsonWriter out, CustomerAccountMultipleStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerAccountMultipleStatement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomerAccountMultipleStatement instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerAccountMultipleStatement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerAccountMultipleStatement
  * @throws IOException if the JSON string is invalid with respect to CustomerAccountMultipleStatement
  */
  public static CustomerAccountMultipleStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerAccountMultipleStatement.class);
  }

 /**
  * Convert an instance of CustomerAccountMultipleStatement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

