/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomerAccountDetail;
import com.konfigthis.client.model.CustomerAccountPosition;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * An account represents a bank account such as a checking or savings that the customer has added via the Connect interface.
 */
@ApiModel(description = "An account represents a bank account such as a checking or savings that the customer has added via the Connect interface.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomerAccount {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER_DISPLAY = "accountNumberDisplay";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER_DISPLAY)
  private String accountNumberDisplay;

  public static final String SERIALIZED_NAME_REAL_ACCOUNT_NUMBER_LAST4 = "realAccountNumberLast4";
  @SerializedName(SERIALIZED_NAME_REAL_ACCOUNT_NUMBER_LAST4)
  private String realAccountNumberLast4;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Double balance;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_AGGREGATION_STATUS_CODE = "aggregationStatusCode";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_STATUS_CODE)
  private Integer aggregationStatusCode;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_INSTITUTION_ID = "institutionId";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_ID)
  private String institutionId;

  public static final String SERIALIZED_NAME_BALANCE_DATE = "balanceDate";
  @SerializedName(SERIALIZED_NAME_BALANCE_DATE)
  private Long balanceDate;

  public static final String SERIALIZED_NAME_AGGREGATION_SUCCESS_DATE = "aggregationSuccessDate";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_SUCCESS_DATE)
  private Long aggregationSuccessDate;

  public static final String SERIALIZED_NAME_AGGREGATION_ATTEMPT_DATE = "aggregationAttemptDate";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_ATTEMPT_DATE)
  private Long aggregationAttemptDate;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private Long createdDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "lastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  private Long lastUpdatedDate;

  public static final String SERIALIZED_NAME_MARKET_SEGMENT = "marketSegment";
  @SerializedName(SERIALIZED_NAME_MARKET_SEGMENT)
  private String marketSegment;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_LAST_TRANSACTION_DATE = "lastTransactionDate";
  @SerializedName(SERIALIZED_NAME_LAST_TRANSACTION_DATE)
  private Long lastTransactionDate;

  public static final String SERIALIZED_NAME_OLDEST_TRANSACTION_DATE = "oldestTransactionDate";
  @SerializedName(SERIALIZED_NAME_OLDEST_TRANSACTION_DATE)
  private Long oldestTransactionDate;

  public static final String SERIALIZED_NAME_INSTITUTION_LOGIN_ID = "institutionLoginId";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_LOGIN_ID)
  private Long institutionLoginId;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private CustomerAccountDetail detail;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private List<CustomerAccountPosition> position = null;

  public static final String SERIALIZED_NAME_DISPLAY_POSITION = "displayPosition";
  @SerializedName(SERIALIZED_NAME_DISPLAY_POSITION)
  private Integer displayPosition;

  public static final String SERIALIZED_NAME_PARENT_ACCOUNT = "parentAccount";
  @SerializedName(SERIALIZED_NAME_PARENT_ACCOUNT)
  private String parentAccount;

  public CustomerAccount() {
  }

  public CustomerAccount id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * An account ID
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5011648377", required = true, value = "An account ID")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CustomerAccount number(String number) {
    
    
    
    
    this.number = number;
    return this;
  }

   /**
   * The account number from the institution
   * @return number
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2000004444", required = true, value = "The account number from the institution")

  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    
    
    
    this.number = number;
  }


  public CustomerAccount accountNumberDisplay(String accountNumberDisplay) {
    
    
    
    
    this.accountNumberDisplay = accountNumberDisplay;
    return this;
  }

   /**
   * The account number from a financial institution in truncated format:    * Last four digits: \&quot;1234\&quot;    * Last four digits with suffix: \&quot;1234-9\&quot;    * Full value for string accounts: \&quot;john@gmail.com\&quot; example: &#39;1234-9&#39;
   * @return accountNumberDisplay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The account number from a financial institution in truncated format:    * Last four digits: \"1234\"    * Last four digits with suffix: \"1234-9\"    * Full value for string accounts: \"john@gmail.com\" example: '1234-9'")

  public String getAccountNumberDisplay() {
    return accountNumberDisplay;
  }


  public void setAccountNumberDisplay(String accountNumberDisplay) {
    
    
    
    this.accountNumberDisplay = accountNumberDisplay;
  }


  public CustomerAccount realAccountNumberLast4(String realAccountNumberLast4) {
    
    
    
    
    this.realAccountNumberLast4 = realAccountNumberLast4;
    return this;
  }

   /**
   * The last 4 digits of the ACH account number
   * @return realAccountNumberLast4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5678", value = "The last 4 digits of the ACH account number")

  public String getRealAccountNumberLast4() {
    return realAccountNumberLast4;
  }


  public void setRealAccountNumberLast4(String realAccountNumberLast4) {
    
    
    
    this.realAccountNumberLast4 = realAccountNumberLast4;
  }


  public CustomerAccount name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The account name from the institution
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Super Checking", required = true, value = "The account name from the institution")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CustomerAccount balance(Double balance) {
    
    
    
    
    this.balance = balance;
    return this;
  }

  public CustomerAccount balance(Integer balance) {
    
    
    
    
    this.balance = balance.doubleValue();
    return this;
  }

   /**
   * The cleared balance of the account as of &#x60;balanceDate&#x60;
   * @return balance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "401.26", value = "The cleared balance of the account as of `balanceDate`")

  public Double getBalance() {
    return balance;
  }


  public void setBalance(Double balance) {
    
    
    
    this.balance = balance;
  }


  public CustomerAccount type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The list of supported account types. * \&quot;checking\&quot;: Standard checking * \&quot;savings\&quot;: Standard savings * \&quot;cd\&quot;: Certificates of deposit * \&quot;moneyMarket\&quot;: Money Market * \&quot;creditCard\&quot;: Standard credit cards * \&quot;lineOfCredit\&quot;: Home equity, line of credit * \&quot;investment\&quot;: Generic investment (no details) * \&quot;investmentTaxDeferred\&quot;: Generic tax-advantaged investment (no details) * \&quot;employeeStockPurchasePlan\&quot;: ESPP, Employee Stock Ownership Plans (ESOP), Stock Purchase Plans * \&quot;ira\&quot;: Individual Retirement Account (not Rollover or Roth) * \&quot;401k\&quot;: 401K Plan * \&quot;roth\&quot;: Roth IRA, Roth 401K * \&quot;403b\&quot;: 403B Plan * \&quot;529plan\&quot;: 529 Plan (True value is 529) * \&quot;rollover\&quot;: Rollover IRA * \&quot;ugma\&quot;: Uniform Gifts to Minors Act * \&quot;utma\&quot;: Uniform Transfers to Minors Act * \&quot;keogh\&quot;: Keogh Plan * \&quot;457plan\&quot;: 457 Plan (True value is 457) * \&quot;401a\&quot;: 401A Plan * \&quot;brokerageAccount\&quot;: Brokerage Account * \&quot;educationSavings\&quot;: Education Savings Account that is not a 529 * \&quot;healthSavingsAccount\&quot;: HSA (Health Savings Accounts) * \&quot;pension\&quot;: Pension * \&quot;profitSharingPlan\&quot;: Profit Sharing Plan * \&quot;roth401k\&quot;: Roth 401K * \&quot;sepIRA\&quot;: Simplified Employee Pension IRA * \&quot;simpleIRA\&quot;: Simple IRA * \&quot;thriftSavingsPlan\&quot;: Thrift Savings Plan * \&quot;variableAnnuity\&quot;: Variable Annuity * \&quot;cryptocurrency\&quot;: Cryptocurrency Wallet, Cryptocurrency Account * \&quot;mortgage\&quot;: Standard Mortgages * \&quot;loan\&quot;: Auto loans, equity loans, other loans * \&quot;studentLoan\&quot;: Student Loan * \&quot;studentLoanGroup\&quot;: Student Loan Group * \&quot;studentLoanAccount\&quot;: Student Loan Account
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "checking", required = true, value = "The list of supported account types. * \"checking\": Standard checking * \"savings\": Standard savings * \"cd\": Certificates of deposit * \"moneyMarket\": Money Market * \"creditCard\": Standard credit cards * \"lineOfCredit\": Home equity, line of credit * \"investment\": Generic investment (no details) * \"investmentTaxDeferred\": Generic tax-advantaged investment (no details) * \"employeeStockPurchasePlan\": ESPP, Employee Stock Ownership Plans (ESOP), Stock Purchase Plans * \"ira\": Individual Retirement Account (not Rollover or Roth) * \"401k\": 401K Plan * \"roth\": Roth IRA, Roth 401K * \"403b\": 403B Plan * \"529plan\": 529 Plan (True value is 529) * \"rollover\": Rollover IRA * \"ugma\": Uniform Gifts to Minors Act * \"utma\": Uniform Transfers to Minors Act * \"keogh\": Keogh Plan * \"457plan\": 457 Plan (True value is 457) * \"401a\": 401A Plan * \"brokerageAccount\": Brokerage Account * \"educationSavings\": Education Savings Account that is not a 529 * \"healthSavingsAccount\": HSA (Health Savings Accounts) * \"pension\": Pension * \"profitSharingPlan\": Profit Sharing Plan * \"roth401k\": Roth 401K * \"sepIRA\": Simplified Employee Pension IRA * \"simpleIRA\": Simple IRA * \"thriftSavingsPlan\": Thrift Savings Plan * \"variableAnnuity\": Variable Annuity * \"cryptocurrency\": Cryptocurrency Wallet, Cryptocurrency Account * \"mortgage\": Standard Mortgages * \"loan\": Auto loans, equity loans, other loans * \"studentLoan\": Student Loan * \"studentLoanGroup\": Student Loan Group * \"studentLoanAccount\": Student Loan Account")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public CustomerAccount aggregationStatusCode(Integer aggregationStatusCode) {
    
    
    
    
    this.aggregationStatusCode = aggregationStatusCode;
    return this;
  }

   /**
   * The status of the most recent aggregation attempt (see [Aggregation Status Codes](https://developer.mastercard.com/open-banking-us/documentation/products/manage/account-aggregation/#aggregation-status-codes)). Won&#39;t be present until you have run your first aggregation for the account.
   * @return aggregationStatusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of the most recent aggregation attempt (see [Aggregation Status Codes](https://developer.mastercard.com/open-banking-us/documentation/products/manage/account-aggregation/#aggregation-status-codes)). Won't be present until you have run your first aggregation for the account.")

  public Integer getAggregationStatusCode() {
    return aggregationStatusCode;
  }


  public void setAggregationStatusCode(Integer aggregationStatusCode) {
    
    
    
    this.aggregationStatusCode = aggregationStatusCode;
  }


  public CustomerAccount status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * \&quot;pending\&quot; during account discovery, always \&quot;active\&quot; following   successful account activation
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "active", required = true, value = "\"pending\" during account discovery, always \"active\" following   successful account activation")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public CustomerAccount customerId(String customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * A customer ID. See Add Customer API for how to create a customer ID.
   * @return customerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1005061234", required = true, value = "A customer ID. See Add Customer API for how to create a customer ID.")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    
    
    
    this.customerId = customerId;
  }


  public CustomerAccount institutionId(String institutionId) {
    
    
    
    
    this.institutionId = institutionId;
    return this;
  }

   /**
   * The ID of a financial institution
   * @return institutionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4222", required = true, value = "The ID of a financial institution")

  public String getInstitutionId() {
    return institutionId;
  }


  public void setInstitutionId(String institutionId) {
    
    
    
    this.institutionId = institutionId;
  }


  public CustomerAccount balanceDate(Long balanceDate) {
    
    
    
    
    this.balanceDate = balanceDate;
    return this;
  }

   /**
   * A timestamp showing when the balance was captured. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return balanceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "A timestamp showing when the balance was captured. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getBalanceDate() {
    return balanceDate;
  }


  public void setBalanceDate(Long balanceDate) {
    
    
    
    this.balanceDate = balanceDate;
  }


  public CustomerAccount aggregationSuccessDate(Long aggregationSuccessDate) {
    
    
    
    
    this.aggregationSuccessDate = aggregationSuccessDate;
    return this;
  }

   /**
   * A timestamp showing the last successful aggregation of the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return aggregationSuccessDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "A timestamp showing the last successful aggregation of the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getAggregationSuccessDate() {
    return aggregationSuccessDate;
  }


  public void setAggregationSuccessDate(Long aggregationSuccessDate) {
    
    
    
    this.aggregationSuccessDate = aggregationSuccessDate;
  }


  public CustomerAccount aggregationAttemptDate(Long aggregationAttemptDate) {
    
    
    
    
    this.aggregationAttemptDate = aggregationAttemptDate;
    return this;
  }

   /**
   * A timestamp showing the last aggregation attempt, whether successful or not. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return aggregationAttemptDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "A timestamp showing the last aggregation attempt, whether successful or not. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getAggregationAttemptDate() {
    return aggregationAttemptDate;
  }


  public void setAggregationAttemptDate(Long aggregationAttemptDate) {
    
    
    
    this.aggregationAttemptDate = aggregationAttemptDate;
  }


  public CustomerAccount createdDate(Long createdDate) {
    
    
    
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * A timestamp showing when the account was added to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return createdDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1607450357", required = true, value = "A timestamp showing when the account was added to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(Long createdDate) {
    
    
    
    this.createdDate = createdDate;
  }


  public CustomerAccount lastUpdatedDate(Long lastUpdatedDate) {
    
    
    
    
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

   /**
   * A timestamp showing when the account was last modified to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return lastUpdatedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "A timestamp showing when the account was last modified to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getLastUpdatedDate() {
    return lastUpdatedDate;
  }


  public void setLastUpdatedDate(Long lastUpdatedDate) {
    
    
    
    this.lastUpdatedDate = lastUpdatedDate;
  }


  public CustomerAccount marketSegment(String marketSegment) {
    
    
    
    
    this.marketSegment = marketSegment;
    return this;
  }

   /**
   * The market segment of the account. Possible values: personal, business
   * @return marketSegment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "personal", value = "The market segment of the account. Possible values: personal, business")

  public String getMarketSegment() {
    return marketSegment;
  }


  public void setMarketSegment(String marketSegment) {
    
    
    
    this.marketSegment = marketSegment;
  }


  public CustomerAccount currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * A currency code
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USD", required = true, value = "A currency code")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public CustomerAccount lastTransactionDate(Long lastTransactionDate) {
    
    
    
    
    this.lastTransactionDate = lastTransactionDate;
    return this;
  }

   /**
   * The date of the latest transaction on the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return lastTransactionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "The date of the latest transaction on the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getLastTransactionDate() {
    return lastTransactionDate;
  }


  public void setLastTransactionDate(Long lastTransactionDate) {
    
    
    
    this.lastTransactionDate = lastTransactionDate;
  }


  public CustomerAccount oldestTransactionDate(Long oldestTransactionDate) {
    
    
    
    
    this.oldestTransactionDate = oldestTransactionDate;
    return this;
  }

   /**
   * The date of the oldest transaction in the transactions for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return oldestTransactionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "The date of the oldest transaction in the transactions for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getOldestTransactionDate() {
    return oldestTransactionDate;
  }


  public void setOldestTransactionDate(Long oldestTransactionDate) {
    
    
    
    this.oldestTransactionDate = oldestTransactionDate;
  }


  public CustomerAccount institutionLoginId(Long institutionLoginId) {
    
    
    
    
    this.institutionLoginId = institutionLoginId;
    return this;
  }

   /**
   * An institution login ID (from the account record), represented as a number
   * @return institutionLoginId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1007302745", required = true, value = "An institution login ID (from the account record), represented as a number")

  public Long getInstitutionLoginId() {
    return institutionLoginId;
  }


  public void setInstitutionLoginId(Long institutionLoginId) {
    
    
    
    this.institutionLoginId = institutionLoginId;
  }


  public CustomerAccount detail(CustomerAccountDetail detail) {
    
    
    
    
    this.detail = detail;
    return this;
  }

   /**
   * Get detail
   * @return detail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomerAccountDetail getDetail() {
    return detail;
  }


  public void setDetail(CustomerAccountDetail detail) {
    
    
    
    this.detail = detail;
  }


  public CustomerAccount position(List<CustomerAccountPosition> position) {
    
    
    
    
    this.position = position;
    return this;
  }

  public CustomerAccount addPositionItem(CustomerAccountPosition positionItem) {
    if (this.position == null) {
      this.position = new ArrayList<>();
    }
    this.position.add(positionItem);
    return this;
  }

   /**
   * Investment holdings
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Investment holdings")

  public List<CustomerAccountPosition> getPosition() {
    return position;
  }


  public void setPosition(List<CustomerAccountPosition> position) {
    
    
    
    this.position = position;
  }


  public CustomerAccount displayPosition(Integer displayPosition) {
    
    
    
    
    this.displayPosition = displayPosition;
    return this;
  }

   /**
   * Display position of the account at the financial institution, \&quot;1\&quot;     being the top listed account
   * @return displayPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Display position of the account at the financial institution, \"1\"     being the top listed account")

  public Integer getDisplayPosition() {
    return displayPosition;
  }


  public void setDisplayPosition(Integer displayPosition) {
    
    
    
    this.displayPosition = displayPosition;
  }


  public CustomerAccount parentAccount(String parentAccount) {
    
    
    
    
    this.parentAccount = parentAccount;
    return this;
  }

   /**
   * The assigned account ID for the account one level higher in the student loan account hierarchy
   * @return parentAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5011648377", value = "The assigned account ID for the account one level higher in the student loan account hierarchy")

  public String getParentAccount() {
    return parentAccount;
  }


  public void setParentAccount(String parentAccount) {
    
    
    
    this.parentAccount = parentAccount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomerAccount instance itself
   */
  public CustomerAccount putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerAccount customerAccount = (CustomerAccount) o;
    return Objects.equals(this.id, customerAccount.id) &&
        Objects.equals(this.number, customerAccount.number) &&
        Objects.equals(this.accountNumberDisplay, customerAccount.accountNumberDisplay) &&
        Objects.equals(this.realAccountNumberLast4, customerAccount.realAccountNumberLast4) &&
        Objects.equals(this.name, customerAccount.name) &&
        Objects.equals(this.balance, customerAccount.balance) &&
        Objects.equals(this.type, customerAccount.type) &&
        Objects.equals(this.aggregationStatusCode, customerAccount.aggregationStatusCode) &&
        Objects.equals(this.status, customerAccount.status) &&
        Objects.equals(this.customerId, customerAccount.customerId) &&
        Objects.equals(this.institutionId, customerAccount.institutionId) &&
        Objects.equals(this.balanceDate, customerAccount.balanceDate) &&
        Objects.equals(this.aggregationSuccessDate, customerAccount.aggregationSuccessDate) &&
        Objects.equals(this.aggregationAttemptDate, customerAccount.aggregationAttemptDate) &&
        Objects.equals(this.createdDate, customerAccount.createdDate) &&
        Objects.equals(this.lastUpdatedDate, customerAccount.lastUpdatedDate) &&
        Objects.equals(this.marketSegment, customerAccount.marketSegment) &&
        Objects.equals(this.currency, customerAccount.currency) &&
        Objects.equals(this.lastTransactionDate, customerAccount.lastTransactionDate) &&
        Objects.equals(this.oldestTransactionDate, customerAccount.oldestTransactionDate) &&
        Objects.equals(this.institutionLoginId, customerAccount.institutionLoginId) &&
        Objects.equals(this.detail, customerAccount.detail) &&
        Objects.equals(this.position, customerAccount.position) &&
        Objects.equals(this.displayPosition, customerAccount.displayPosition) &&
        Objects.equals(this.parentAccount, customerAccount.parentAccount)&&
        Objects.equals(this.additionalProperties, customerAccount.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, number, accountNumberDisplay, realAccountNumberLast4, name, balance, type, aggregationStatusCode, status, customerId, institutionId, balanceDate, aggregationSuccessDate, aggregationAttemptDate, createdDate, lastUpdatedDate, marketSegment, currency, lastTransactionDate, oldestTransactionDate, institutionLoginId, detail, position, displayPosition, parentAccount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerAccount {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    accountNumberDisplay: ").append(toIndentedString(accountNumberDisplay)).append("\n");
    sb.append("    realAccountNumberLast4: ").append(toIndentedString(realAccountNumberLast4)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    aggregationStatusCode: ").append(toIndentedString(aggregationStatusCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    sb.append("    balanceDate: ").append(toIndentedString(balanceDate)).append("\n");
    sb.append("    aggregationSuccessDate: ").append(toIndentedString(aggregationSuccessDate)).append("\n");
    sb.append("    aggregationAttemptDate: ").append(toIndentedString(aggregationAttemptDate)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    marketSegment: ").append(toIndentedString(marketSegment)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    lastTransactionDate: ").append(toIndentedString(lastTransactionDate)).append("\n");
    sb.append("    oldestTransactionDate: ").append(toIndentedString(oldestTransactionDate)).append("\n");
    sb.append("    institutionLoginId: ").append(toIndentedString(institutionLoginId)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    displayPosition: ").append(toIndentedString(displayPosition)).append("\n");
    sb.append("    parentAccount: ").append(toIndentedString(parentAccount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("number");
    openapiFields.add("accountNumberDisplay");
    openapiFields.add("realAccountNumberLast4");
    openapiFields.add("name");
    openapiFields.add("balance");
    openapiFields.add("type");
    openapiFields.add("aggregationStatusCode");
    openapiFields.add("status");
    openapiFields.add("customerId");
    openapiFields.add("institutionId");
    openapiFields.add("balanceDate");
    openapiFields.add("aggregationSuccessDate");
    openapiFields.add("aggregationAttemptDate");
    openapiFields.add("createdDate");
    openapiFields.add("lastUpdatedDate");
    openapiFields.add("marketSegment");
    openapiFields.add("currency");
    openapiFields.add("lastTransactionDate");
    openapiFields.add("oldestTransactionDate");
    openapiFields.add("institutionLoginId");
    openapiFields.add("detail");
    openapiFields.add("position");
    openapiFields.add("displayPosition");
    openapiFields.add("parentAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("accountNumberDisplay");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("customerId");
    openapiRequiredFields.add("institutionId");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("institutionLoginId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerAccount is not found in the empty JSON string", CustomerAccount.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerAccount.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if (!jsonObj.get("accountNumberDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumberDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumberDisplay").toString()));
      }
      if ((jsonObj.get("realAccountNumberLast4") != null && !jsonObj.get("realAccountNumberLast4").isJsonNull()) && !jsonObj.get("realAccountNumberLast4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realAccountNumberLast4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realAccountNumberLast4").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if (!jsonObj.get("institutionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institutionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institutionId").toString()));
      }
      if ((jsonObj.get("marketSegment") != null && !jsonObj.get("marketSegment").isJsonNull()) && !jsonObj.get("marketSegment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketSegment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketSegment").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `detail`
      if (jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) {
        CustomerAccountDetail.validateJsonObject(jsonObj.getAsJsonObject("detail"));
      }
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        JsonArray jsonArrayposition = jsonObj.getAsJsonArray("position");
        if (jsonArrayposition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("position").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `position` to be an array in the JSON string but got `%s`", jsonObj.get("position").toString()));
          }

          // validate the optional field `position` (array)
          for (int i = 0; i < jsonArrayposition.size(); i++) {
            CustomerAccountPosition.validateJsonObject(jsonArrayposition.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("parentAccount") != null && !jsonObj.get("parentAccount").isJsonNull()) && !jsonObj.get("parentAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentAccount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerAccount>() {
           @Override
           public void write(JsonWriter out, CustomerAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomerAccount instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerAccount
  * @throws IOException if the JSON string is invalid with respect to CustomerAccount
  */
  public static CustomerAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerAccount.class);
  }

 /**
  * Convert an instance of CustomerAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

