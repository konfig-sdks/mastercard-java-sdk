/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.NewAddress;
import com.konfigthis.client.model.PhoneNumberFormat;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NewBusiness
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NewBusiness {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERSONALLY_LIABLE = "personallyLiable";
  @SerializedName(SERIALIZED_NAME_PERSONALLY_LIABLE)
  private Boolean personallyLiable;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private NewAddress address;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private PhoneNumberFormat phoneNumber;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public NewBusiness() {
  }

  public NewBusiness name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * The legal name of the business
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ABC Tires Inc", required = true, value = "The legal name of the business")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public NewBusiness personallyLiable(Boolean personallyLiable) {
    
    
    
    
    this.personallyLiable = personallyLiable;
    return this;
  }

   /**
   * Indicates whether a business owner is personally liable for a loan
   * @return personallyLiable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Indicates whether a business owner is personally liable for a loan")

  public Boolean getPersonallyLiable() {
    return personallyLiable;
  }


  public void setPersonallyLiable(Boolean personallyLiable) {
    
    
    
    this.personallyLiable = personallyLiable;
  }


  public NewBusiness address(NewAddress address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public NewAddress getAddress() {
    return address;
  }


  public void setAddress(NewAddress address) {
    
    
    
    this.address = address;
  }


  public NewBusiness phoneNumber(PhoneNumberFormat phoneNumber) {
    
    
    
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Get phoneNumber
   * @return phoneNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PhoneNumberFormat getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(PhoneNumberFormat phoneNumber) {
    
    
    
    this.phoneNumber = phoneNumber;
  }


  public NewBusiness url(URI url) {
    
    
    if (url != null && url.length() < 0) {
      throw new IllegalArgumentException("Invalid value for url. Length must be greater than or equal to 0.");
    }
    
    this.url = url;
    return this;
  }

   /**
   * A URL for the business website
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.finicity.com/", value = "A URL for the business website")

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    
    
    if (url != null && url.length() < 0) {
      throw new IllegalArgumentException("Invalid value for url. Length must be greater than or equal to 0.");
    }
    this.url = url;
  }


  public NewBusiness email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * An email address
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "myname@mycompany.com", value = "An email address")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public NewBusiness type(String type) {
    
    
    if (type != null && type.length() < 0) {
      throw new IllegalArgumentException("Invalid value for type. Length must be greater than or equal to 0.");
    }
    
    this.type = type;
    return this;
  }

   /**
   * The business type eg LLC, Corp, S Corp, C Corp, B Corp, Sole Propriertorship, Nonprofit, etc.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Nonprofit", value = "The business type eg LLC, Corp, S Corp, C Corp, B Corp, Sole Propriertorship, Nonprofit, etc.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    if (type != null && type.length() < 0) {
      throw new IllegalArgumentException("Invalid value for type. Length must be greater than or equal to 0.");
    }
    this.type = type;
  }


  public NewBusiness taxId(String taxId) {
    
    
    if (taxId != null && taxId.length() < 9) {
      throw new IllegalArgumentException("Invalid value for taxId. Length must be greater than or equal to 9.");
    }
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Provide details of the tax id for the business
   * @return taxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A1234561Z", value = "Provide details of the tax id for the business")

  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    
    
    if (taxId != null && taxId.length() < 9) {
      throw new IllegalArgumentException("Invalid value for taxId. Length must be greater than or equal to 9.");
    }
    this.taxId = taxId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NewBusiness instance itself
   */
  public NewBusiness putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewBusiness newBusiness = (NewBusiness) o;
    return Objects.equals(this.name, newBusiness.name) &&
        Objects.equals(this.personallyLiable, newBusiness.personallyLiable) &&
        Objects.equals(this.address, newBusiness.address) &&
        Objects.equals(this.phoneNumber, newBusiness.phoneNumber) &&
        Objects.equals(this.url, newBusiness.url) &&
        Objects.equals(this.email, newBusiness.email) &&
        Objects.equals(this.type, newBusiness.type) &&
        Objects.equals(this.taxId, newBusiness.taxId)&&
        Objects.equals(this.additionalProperties, newBusiness.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, personallyLiable, address, phoneNumber, url, email, type, taxId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewBusiness {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    personallyLiable: ").append(toIndentedString(personallyLiable)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("personallyLiable");
    openapiFields.add("address");
    openapiFields.add("phoneNumber");
    openapiFields.add("url");
    openapiFields.add("email");
    openapiFields.add("type");
    openapiFields.add("taxId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("personallyLiable");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("phoneNumber");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NewBusiness
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NewBusiness.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewBusiness is not found in the empty JSON string", NewBusiness.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewBusiness.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `address`
      NewAddress.validateJsonObject(jsonObj.getAsJsonObject("address"));
      // validate the required field `phoneNumber`
      PhoneNumberFormat.validateJsonObject(jsonObj.getAsJsonObject("phoneNumber"));
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewBusiness.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewBusiness' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewBusiness> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewBusiness.class));

       return (TypeAdapter<T>) new TypeAdapter<NewBusiness>() {
           @Override
           public void write(JsonWriter out, NewBusiness value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NewBusiness read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NewBusiness instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NewBusiness given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NewBusiness
  * @throws IOException if the JSON string is invalid with respect to NewBusiness
  */
  public static NewBusiness fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewBusiness.class);
  }

 /**
  * Convert an instance of NewBusiness to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

