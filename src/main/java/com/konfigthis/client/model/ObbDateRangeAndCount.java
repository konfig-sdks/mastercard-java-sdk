/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ObbDateRangeAndCount
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ObbDateRangeAndCount {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_PERIOD_BEGIN_DATE = "periodBeginDate";
  @SerializedName(SERIALIZED_NAME_PERIOD_BEGIN_DATE)
  private String periodBeginDate;

  public static final String SERIALIZED_NAME_PERIOD_END_DATE = "periodEndDate";
  @SerializedName(SERIALIZED_NAME_PERIOD_END_DATE)
  private String periodEndDate;

  public ObbDateRangeAndCount() {
  }

  public ObbDateRangeAndCount count(Integer count) {
    
    
    
    
    this.count = count;
    return this;
  }

   /**
   * Count of occurrences for the given period
   * @return count
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5", required = true, value = "Count of occurrences for the given period")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    
    
    
    this.count = count;
  }


  public ObbDateRangeAndCount period(String period) {
    
    
    if (period != null && period.length() < 8) {
      throw new IllegalArgumentException("Invalid value for period. Length must be greater than or equal to 8.");
    }
    
    this.period = period;
    return this;
  }

   /**
   * Period represented by this metric
   * @return period
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "last30to1", required = true, value = "Period represented by this metric")

  public String getPeriod() {
    return period;
  }


  public void setPeriod(String period) {
    
    
    if (period != null && period.length() < 8) {
      throw new IllegalArgumentException("Invalid value for period. Length must be greater than or equal to 8.");
    }
    this.period = period;
  }


  public ObbDateRangeAndCount periodBeginDate(String periodBeginDate) {
    
    
    if (periodBeginDate != null && periodBeginDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for periodBeginDate. Length must be greater than or equal to 10.");
    }
    
    this.periodBeginDate = periodBeginDate;
    return this;
  }

   /**
   * Begin date of the period being reported
   * @return periodBeginDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2022-03-01", required = true, value = "Begin date of the period being reported")

  public String getPeriodBeginDate() {
    return periodBeginDate;
  }


  public void setPeriodBeginDate(String periodBeginDate) {
    
    
    if (periodBeginDate != null && periodBeginDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for periodBeginDate. Length must be greater than or equal to 10.");
    }
    this.periodBeginDate = periodBeginDate;
  }


  public ObbDateRangeAndCount periodEndDate(String periodEndDate) {
    
    
    if (periodEndDate != null && periodEndDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for periodEndDate. Length must be greater than or equal to 10.");
    }
    
    this.periodEndDate = periodEndDate;
    return this;
  }

   /**
   * End date of the period being reported
   * @return periodEndDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2022-03-30", required = true, value = "End date of the period being reported")

  public String getPeriodEndDate() {
    return periodEndDate;
  }


  public void setPeriodEndDate(String periodEndDate) {
    
    
    if (periodEndDate != null && periodEndDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for periodEndDate. Length must be greater than or equal to 10.");
    }
    this.periodEndDate = periodEndDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ObbDateRangeAndCount instance itself
   */
  public ObbDateRangeAndCount putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObbDateRangeAndCount obbDateRangeAndCount = (ObbDateRangeAndCount) o;
    return Objects.equals(this.count, obbDateRangeAndCount.count) &&
        Objects.equals(this.period, obbDateRangeAndCount.period) &&
        Objects.equals(this.periodBeginDate, obbDateRangeAndCount.periodBeginDate) &&
        Objects.equals(this.periodEndDate, obbDateRangeAndCount.periodEndDate)&&
        Objects.equals(this.additionalProperties, obbDateRangeAndCount.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, period, periodBeginDate, periodEndDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObbDateRangeAndCount {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    periodBeginDate: ").append(toIndentedString(periodBeginDate)).append("\n");
    sb.append("    periodEndDate: ").append(toIndentedString(periodEndDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("period");
    openapiFields.add("periodBeginDate");
    openapiFields.add("periodEndDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("period");
    openapiRequiredFields.add("periodBeginDate");
    openapiRequiredFields.add("periodEndDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ObbDateRangeAndCount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ObbDateRangeAndCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObbDateRangeAndCount is not found in the empty JSON string", ObbDateRangeAndCount.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObbDateRangeAndCount.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      if (!jsonObj.get("periodBeginDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `periodBeginDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("periodBeginDate").toString()));
      }
      if (!jsonObj.get("periodEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `periodEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("periodEndDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObbDateRangeAndCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObbDateRangeAndCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObbDateRangeAndCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObbDateRangeAndCount.class));

       return (TypeAdapter<T>) new TypeAdapter<ObbDateRangeAndCount>() {
           @Override
           public void write(JsonWriter out, ObbDateRangeAndCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObbDateRangeAndCount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ObbDateRangeAndCount instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObbDateRangeAndCount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObbDateRangeAndCount
  * @throws IOException if the JSON string is invalid with respect to ObbDateRangeAndCount
  */
  public static ObbDateRangeAndCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObbDateRangeAndCount.class);
  }

 /**
  * Convert an instance of ObbDateRangeAndCount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

