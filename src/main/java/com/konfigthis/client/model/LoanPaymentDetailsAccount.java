/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LoanPaymentDetailsGroup;
import com.konfigthis.client.model.LoanPaymentDetailsLoan;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LoanPaymentDetailsAccount
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LoanPaymentDetailsAccount {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_PAYMENT_NUMBER = "accountPaymentNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PAYMENT_NUMBER)
  private String accountPaymentNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_PAYMENT_ADDRESS = "accountPaymentAddress";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PAYMENT_ADDRESS)
  private String accountPaymentAddress;

  public static final String SERIALIZED_NAME_ACCOUNT_FUTURE_PAYOFF_AMOUNT = "accountFuturePayoffAmount";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_FUTURE_PAYOFF_AMOUNT)
  private Double accountFuturePayoffAmount;

  public static final String SERIALIZED_NAME_ACCOUNT_FUTURE_PAYOFF_DATE = "accountFuturePayoffDate";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_FUTURE_PAYOFF_DATE)
  private OffsetDateTime accountFuturePayoffDate;

  public static final String SERIALIZED_NAME_GROUP_DETAIL = "groupDetail";
  @SerializedName(SERIALIZED_NAME_GROUP_DETAIL)
  private List<LoanPaymentDetailsGroup> groupDetail = null;

  public static final String SERIALIZED_NAME_LOAN_DETAIL = "loanDetail";
  @SerializedName(SERIALIZED_NAME_LOAN_DETAIL)
  private List<LoanPaymentDetailsLoan> loanDetail = null;

  public LoanPaymentDetailsAccount() {
  }

  public LoanPaymentDetailsAccount accountId(String accountId) {
    
    
    
    
    this.accountId = accountId;
    return this;
  }

   /**
   * An account ID
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5011648377", required = true, value = "An account ID")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    
    
    
    this.accountId = accountId;
  }


  public LoanPaymentDetailsAccount accountNumber(String accountNumber) {
    
    
    
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Institution&#39;s ID of the Student Loan Account
   * @return accountNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "9876543210", required = true, value = "Institution's ID of the Student Loan Account")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    
    this.accountNumber = accountNumber;
  }


  public LoanPaymentDetailsAccount accountPaymentNumber(String accountPaymentNumber) {
    
    
    
    
    this.accountPaymentNumber = accountPaymentNumber;
    return this;
  }

   /**
   * The payment number given by the institution. This number is typically for manual payments. This is not an ACH payment number.
   * @return accountPaymentNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1234895413", required = true, value = "The payment number given by the institution. This number is typically for manual payments. This is not an ACH payment number.")

  public String getAccountPaymentNumber() {
    return accountPaymentNumber;
  }


  public void setAccountPaymentNumber(String accountPaymentNumber) {
    
    
    
    this.accountPaymentNumber = accountPaymentNumber;
  }


  public LoanPaymentDetailsAccount accountPaymentAddress(String accountPaymentAddress) {
    
    
    
    
    this.accountPaymentAddress = accountPaymentAddress;
    return this;
  }

   /**
   * The payment address to which send manual payments should be sent
   * @return accountPaymentAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "P.O. Box 123 Sioux Falls, IA 51054", required = true, value = "The payment address to which send manual payments should be sent")

  public String getAccountPaymentAddress() {
    return accountPaymentAddress;
  }


  public void setAccountPaymentAddress(String accountPaymentAddress) {
    
    
    
    this.accountPaymentAddress = accountPaymentAddress;
  }


  public LoanPaymentDetailsAccount accountFuturePayoffAmount(Double accountFuturePayoffAmount) {
    
    
    
    
    this.accountFuturePayoffAmount = accountFuturePayoffAmount;
    return this;
  }

  public LoanPaymentDetailsAccount accountFuturePayoffAmount(Integer accountFuturePayoffAmount) {
    
    
    
    
    this.accountFuturePayoffAmount = accountFuturePayoffAmount.doubleValue();
    return this;
  }

   /**
   * The payoff amount for the account
   * @return accountFuturePayoffAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10000", value = "The payoff amount for the account")

  public Double getAccountFuturePayoffAmount() {
    return accountFuturePayoffAmount;
  }


  public void setAccountFuturePayoffAmount(Double accountFuturePayoffAmount) {
    
    
    
    this.accountFuturePayoffAmount = accountFuturePayoffAmount;
  }


  public LoanPaymentDetailsAccount accountFuturePayoffDate(OffsetDateTime accountFuturePayoffDate) {
    
    
    
    
    this.accountFuturePayoffDate = accountFuturePayoffDate;
    return this;
  }

   /**
   * The date to which the \&quot;Future Payoff Amount\&quot; applies
   * @return accountFuturePayoffDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-01T00:00Z", value = "The date to which the \"Future Payoff Amount\" applies")

  public OffsetDateTime getAccountFuturePayoffDate() {
    return accountFuturePayoffDate;
  }


  public void setAccountFuturePayoffDate(OffsetDateTime accountFuturePayoffDate) {
    
    
    
    this.accountFuturePayoffDate = accountFuturePayoffDate;
  }


  public LoanPaymentDetailsAccount groupDetail(List<LoanPaymentDetailsGroup> groupDetail) {
    
    
    
    
    this.groupDetail = groupDetail;
    return this;
  }

  public LoanPaymentDetailsAccount addGroupDetailItem(LoanPaymentDetailsGroup groupDetailItem) {
    if (this.groupDetail == null) {
      this.groupDetail = new ArrayList<>();
    }
    this.groupDetail.add(groupDetailItem);
    return this;
  }

   /**
   * Group details
   * @return groupDetail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Group details")

  public List<LoanPaymentDetailsGroup> getGroupDetail() {
    return groupDetail;
  }


  public void setGroupDetail(List<LoanPaymentDetailsGroup> groupDetail) {
    
    
    
    this.groupDetail = groupDetail;
  }


  public LoanPaymentDetailsAccount loanDetail(List<LoanPaymentDetailsLoan> loanDetail) {
    
    
    
    
    this.loanDetail = loanDetail;
    return this;
  }

  public LoanPaymentDetailsAccount addLoanDetailItem(LoanPaymentDetailsLoan loanDetailItem) {
    if (this.loanDetail == null) {
      this.loanDetail = new ArrayList<>();
    }
    this.loanDetail.add(loanDetailItem);
    return this;
  }

   /**
   * Loan details
   * @return loanDetail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Loan details")

  public List<LoanPaymentDetailsLoan> getLoanDetail() {
    return loanDetail;
  }


  public void setLoanDetail(List<LoanPaymentDetailsLoan> loanDetail) {
    
    
    
    this.loanDetail = loanDetail;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LoanPaymentDetailsAccount instance itself
   */
  public LoanPaymentDetailsAccount putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanPaymentDetailsAccount loanPaymentDetailsAccount = (LoanPaymentDetailsAccount) o;
    return Objects.equals(this.accountId, loanPaymentDetailsAccount.accountId) &&
        Objects.equals(this.accountNumber, loanPaymentDetailsAccount.accountNumber) &&
        Objects.equals(this.accountPaymentNumber, loanPaymentDetailsAccount.accountPaymentNumber) &&
        Objects.equals(this.accountPaymentAddress, loanPaymentDetailsAccount.accountPaymentAddress) &&
        Objects.equals(this.accountFuturePayoffAmount, loanPaymentDetailsAccount.accountFuturePayoffAmount) &&
        Objects.equals(this.accountFuturePayoffDate, loanPaymentDetailsAccount.accountFuturePayoffDate) &&
        Objects.equals(this.groupDetail, loanPaymentDetailsAccount.groupDetail) &&
        Objects.equals(this.loanDetail, loanPaymentDetailsAccount.loanDetail)&&
        Objects.equals(this.additionalProperties, loanPaymentDetailsAccount.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountNumber, accountPaymentNumber, accountPaymentAddress, accountFuturePayoffAmount, accountFuturePayoffDate, groupDetail, loanDetail, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanPaymentDetailsAccount {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountPaymentNumber: ").append(toIndentedString(accountPaymentNumber)).append("\n");
    sb.append("    accountPaymentAddress: ").append(toIndentedString(accountPaymentAddress)).append("\n");
    sb.append("    accountFuturePayoffAmount: ").append(toIndentedString(accountFuturePayoffAmount)).append("\n");
    sb.append("    accountFuturePayoffDate: ").append(toIndentedString(accountFuturePayoffDate)).append("\n");
    sb.append("    groupDetail: ").append(toIndentedString(groupDetail)).append("\n");
    sb.append("    loanDetail: ").append(toIndentedString(loanDetail)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("accountNumber");
    openapiFields.add("accountPaymentNumber");
    openapiFields.add("accountPaymentAddress");
    openapiFields.add("accountFuturePayoffAmount");
    openapiFields.add("accountFuturePayoffDate");
    openapiFields.add("groupDetail");
    openapiFields.add("loanDetail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("accountNumber");
    openapiRequiredFields.add("accountPaymentNumber");
    openapiRequiredFields.add("accountPaymentAddress");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LoanPaymentDetailsAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LoanPaymentDetailsAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoanPaymentDetailsAccount is not found in the empty JSON string", LoanPaymentDetailsAccount.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoanPaymentDetailsAccount.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if (!jsonObj.get("accountPaymentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountPaymentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountPaymentNumber").toString()));
      }
      if (!jsonObj.get("accountPaymentAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountPaymentAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountPaymentAddress").toString()));
      }
      if (jsonObj.get("groupDetail") != null && !jsonObj.get("groupDetail").isJsonNull()) {
        JsonArray jsonArraygroupDetail = jsonObj.getAsJsonArray("groupDetail");
        if (jsonArraygroupDetail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupDetail").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupDetail` to be an array in the JSON string but got `%s`", jsonObj.get("groupDetail").toString()));
          }

          // validate the optional field `groupDetail` (array)
          for (int i = 0; i < jsonArraygroupDetail.size(); i++) {
            LoanPaymentDetailsGroup.validateJsonObject(jsonArraygroupDetail.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("loanDetail") != null && !jsonObj.get("loanDetail").isJsonNull()) {
        JsonArray jsonArrayloanDetail = jsonObj.getAsJsonArray("loanDetail");
        if (jsonArrayloanDetail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loanDetail").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loanDetail` to be an array in the JSON string but got `%s`", jsonObj.get("loanDetail").toString()));
          }

          // validate the optional field `loanDetail` (array)
          for (int i = 0; i < jsonArrayloanDetail.size(); i++) {
            LoanPaymentDetailsLoan.validateJsonObject(jsonArrayloanDetail.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoanPaymentDetailsAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoanPaymentDetailsAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoanPaymentDetailsAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoanPaymentDetailsAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<LoanPaymentDetailsAccount>() {
           @Override
           public void write(JsonWriter out, LoanPaymentDetailsAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LoanPaymentDetailsAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LoanPaymentDetailsAccount instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoanPaymentDetailsAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoanPaymentDetailsAccount
  * @throws IOException if the JSON string is invalid with respect to LoanPaymentDetailsAccount
  */
  public static LoanPaymentDetailsAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoanPaymentDetailsAccount.class);
  }

 /**
  * Convert an instance of LoanPaymentDetailsAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

