/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ObbDailyBalance;
import com.konfigthis.client.model.ObbDateRangeAndAmount;
import com.konfigthis.client.model.ObbDateRangeAndCount;
import com.konfigthis.client.model.ObbNumWeeksAverageBalanceIncreasing;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Balance analytics metrics and calculations
 */
@ApiModel(description = "Balance analytics metrics and calculations")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BalanceAnalyticsMetrics {
  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "availableBalance";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
  private Double availableBalance;

  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE_DATE = "availableBalanceDate";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE_DATE)
  private String availableBalanceDate;

  public static final String SERIALIZED_NAME_AVERAGE_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "averageDailyBalanceByMonthForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDateRangeAndAmount> averageDailyBalanceByMonthForTheReportTimePeriod = null;

  public static final String SERIALIZED_NAME_AVERAGE_DAILY_BALANCE_FOR_THE_REPORT_TIME_PERIOD = "averageDailyBalanceForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DAILY_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  private Double averageDailyBalanceForTheReportTimePeriod;

  public static final String SERIALIZED_NAME_AVERAGE_WEEKDAY_BALANCE_FOR_THE_REPORT_TIME_PERIOD = "averageWeekdayBalanceForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WEEKDAY_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  private Double averageWeekdayBalanceForTheReportTimePeriod;

  public static final String SERIALIZED_NAME_COUNT_DAILY_NEGATIVE_BALANCES_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "countDailyNegativeBalancesByMonthForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_COUNT_DAILY_NEGATIVE_BALANCES_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDateRangeAndCount> countDailyNegativeBalancesByMonthForTheReportTimePeriod = null;

  public static final String SERIALIZED_NAME_CURRENT_RUNNING_BALANCE = "currentRunningBalance";
  @SerializedName(SERIALIZED_NAME_CURRENT_RUNNING_BALANCE)
  private Double currentRunningBalance;

  public static final String SERIALIZED_NAME_CURRENT_RUNNING_BALANCE_DATE = "currentRunningBalanceDate";
  @SerializedName(SERIALIZED_NAME_CURRENT_RUNNING_BALANCE_DATE)
  private String currentRunningBalanceDate;

  public static final String SERIALIZED_NAME_DAILY_BALANCES_BY_WEEKDAY_FOR_THE_REPORT_TIME_PERIOD = "dailyBalancesByWeekdayForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_DAILY_BALANCES_BY_WEEKDAY_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDailyBalance> dailyBalancesByWeekdayForTheReportTimePeriod = null;

  public static final String SERIALIZED_NAME_DAILY_BALANCES_FOR_THE_REPORT_TIME_PERIOD = "dailyBalancesForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_DAILY_BALANCES_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDailyBalance> dailyBalancesForTheReportTimePeriod = null;

  public static final String SERIALIZED_NAME_HISTORIC_NUMBER_OF_WEEKS_AVERAGE_BALANCE_INCREASING = "historicNumberOfWeeksAverageBalanceIncreasing";
  @SerializedName(SERIALIZED_NAME_HISTORIC_NUMBER_OF_WEEKS_AVERAGE_BALANCE_INCREASING)
  private ObbNumWeeksAverageBalanceIncreasing historicNumberOfWeeksAverageBalanceIncreasing;

  public static final String SERIALIZED_NAME_MAXIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "maximumDailyBalanceByMonthForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDateRangeAndAmount> maximumDailyBalanceByMonthForTheReportTimePeriod = null;

  public static final String SERIALIZED_NAME_MAXIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD = "maximumRunningBalanceForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  private Double maximumRunningBalanceForTheReportTimePeriod;

  public static final String SERIALIZED_NAME_MINIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "minimumDailyBalanceByMonthForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_MINIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  private List<ObbDateRangeAndAmount> minimumDailyBalanceByMonthForTheReportTimePeriod = null;

  public static final String SERIALIZED_NAME_MINIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD = "minimumRunningBalanceForTheReportTimePeriod";
  @SerializedName(SERIALIZED_NAME_MINIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  private Double minimumRunningBalanceForTheReportTimePeriod;

  public BalanceAnalyticsMetrics() {
  }

  public BalanceAnalyticsMetrics availableBalance(Double availableBalance) {
    
    
    
    
    this.availableBalance = availableBalance;
    return this;
  }

  public BalanceAnalyticsMetrics availableBalance(Integer availableBalance) {
    
    
    
    
    this.availableBalance = availableBalance.doubleValue();
    return this;
  }

   /**
   * Available Balance
   * @return availableBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000.01", value = "Available Balance")

  public Double getAvailableBalance() {
    return availableBalance;
  }


  public void setAvailableBalance(Double availableBalance) {
    
    
    
    this.availableBalance = availableBalance;
  }


  public BalanceAnalyticsMetrics availableBalanceDate(String availableBalanceDate) {
    
    
    if (availableBalanceDate != null && availableBalanceDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for availableBalanceDate. Length must be greater than or equal to 25.");
    }
    
    this.availableBalanceDate = availableBalanceDate;
    return this;
  }

   /**
   * Available Balance date
   * @return availableBalanceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-02-18T02:34:00-07:00", value = "Available Balance date")

  public String getAvailableBalanceDate() {
    return availableBalanceDate;
  }


  public void setAvailableBalanceDate(String availableBalanceDate) {
    
    
    if (availableBalanceDate != null && availableBalanceDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for availableBalanceDate. Length must be greater than or equal to 25.");
    }
    this.availableBalanceDate = availableBalanceDate;
  }


  public BalanceAnalyticsMetrics averageDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageDailyBalanceByMonthForTheReportTimePeriod) {
    
    
    
    
    this.averageDailyBalanceByMonthForTheReportTimePeriod = averageDailyBalanceByMonthForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addAverageDailyBalanceByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount averageDailyBalanceByMonthForTheReportTimePeriodItem) {
    if (this.averageDailyBalanceByMonthForTheReportTimePeriod == null) {
      this.averageDailyBalanceByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.averageDailyBalanceByMonthForTheReportTimePeriod.add(averageDailyBalanceByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Average daily ending balance each month over the report time period
   * @return averageDailyBalanceByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Average daily ending balance each month over the report time period")

  public List<ObbDateRangeAndAmount> getAverageDailyBalanceByMonthForTheReportTimePeriod() {
    return averageDailyBalanceByMonthForTheReportTimePeriod;
  }


  public void setAverageDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageDailyBalanceByMonthForTheReportTimePeriod) {
    
    
    
    this.averageDailyBalanceByMonthForTheReportTimePeriod = averageDailyBalanceByMonthForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics averageDailyBalanceForTheReportTimePeriod(Double averageDailyBalanceForTheReportTimePeriod) {
    
    
    
    
    this.averageDailyBalanceForTheReportTimePeriod = averageDailyBalanceForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics averageDailyBalanceForTheReportTimePeriod(Integer averageDailyBalanceForTheReportTimePeriod) {
    
    
    
    
    this.averageDailyBalanceForTheReportTimePeriod = averageDailyBalanceForTheReportTimePeriod.doubleValue();
    return this;
  }

   /**
   * Average Daily Balance
   * @return averageDailyBalanceForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-10442.53", value = "Average Daily Balance")

  public Double getAverageDailyBalanceForTheReportTimePeriod() {
    return averageDailyBalanceForTheReportTimePeriod;
  }


  public void setAverageDailyBalanceForTheReportTimePeriod(Double averageDailyBalanceForTheReportTimePeriod) {
    
    
    
    this.averageDailyBalanceForTheReportTimePeriod = averageDailyBalanceForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics averageWeekdayBalanceForTheReportTimePeriod(Double averageWeekdayBalanceForTheReportTimePeriod) {
    
    
    
    
    this.averageWeekdayBalanceForTheReportTimePeriod = averageWeekdayBalanceForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics averageWeekdayBalanceForTheReportTimePeriod(Integer averageWeekdayBalanceForTheReportTimePeriod) {
    
    
    
    
    this.averageWeekdayBalanceForTheReportTimePeriod = averageWeekdayBalanceForTheReportTimePeriod.doubleValue();
    return this;
  }

   /**
   * Average Weekday Balance
   * @return averageWeekdayBalanceForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-10442.53", value = "Average Weekday Balance")

  public Double getAverageWeekdayBalanceForTheReportTimePeriod() {
    return averageWeekdayBalanceForTheReportTimePeriod;
  }


  public void setAverageWeekdayBalanceForTheReportTimePeriod(Double averageWeekdayBalanceForTheReportTimePeriod) {
    
    
    
    this.averageWeekdayBalanceForTheReportTimePeriod = averageWeekdayBalanceForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics countDailyNegativeBalancesByMonthForTheReportTimePeriod(List<ObbDateRangeAndCount> countDailyNegativeBalancesByMonthForTheReportTimePeriod) {
    
    
    
    
    this.countDailyNegativeBalancesByMonthForTheReportTimePeriod = countDailyNegativeBalancesByMonthForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addCountDailyNegativeBalancesByMonthForTheReportTimePeriodItem(ObbDateRangeAndCount countDailyNegativeBalancesByMonthForTheReportTimePeriodItem) {
    if (this.countDailyNegativeBalancesByMonthForTheReportTimePeriod == null) {
      this.countDailyNegativeBalancesByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.countDailyNegativeBalancesByMonthForTheReportTimePeriod.add(countDailyNegativeBalancesByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Number of negative daily ending balances each month over the report time period
   * @return countDailyNegativeBalancesByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of negative daily ending balances each month over the report time period")

  public List<ObbDateRangeAndCount> getCountDailyNegativeBalancesByMonthForTheReportTimePeriod() {
    return countDailyNegativeBalancesByMonthForTheReportTimePeriod;
  }


  public void setCountDailyNegativeBalancesByMonthForTheReportTimePeriod(List<ObbDateRangeAndCount> countDailyNegativeBalancesByMonthForTheReportTimePeriod) {
    
    
    
    this.countDailyNegativeBalancesByMonthForTheReportTimePeriod = countDailyNegativeBalancesByMonthForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics currentRunningBalance(Double currentRunningBalance) {
    
    
    
    
    this.currentRunningBalance = currentRunningBalance;
    return this;
  }

  public BalanceAnalyticsMetrics currentRunningBalance(Integer currentRunningBalance) {
    
    
    
    
    this.currentRunningBalance = currentRunningBalance.doubleValue();
    return this;
  }

   /**
   * Current Running Balance Date
   * @return currentRunningBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000.01", value = "Current Running Balance Date")

  public Double getCurrentRunningBalance() {
    return currentRunningBalance;
  }


  public void setCurrentRunningBalance(Double currentRunningBalance) {
    
    
    
    this.currentRunningBalance = currentRunningBalance;
  }


  public BalanceAnalyticsMetrics currentRunningBalanceDate(String currentRunningBalanceDate) {
    
    
    if (currentRunningBalanceDate != null && currentRunningBalanceDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for currentRunningBalanceDate. Length must be greater than or equal to 25.");
    }
    
    this.currentRunningBalanceDate = currentRunningBalanceDate;
    return this;
  }

   /**
   * Current Running Balance date
   * @return currentRunningBalanceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-02-10T05:00:00-07:00", value = "Current Running Balance date")

  public String getCurrentRunningBalanceDate() {
    return currentRunningBalanceDate;
  }


  public void setCurrentRunningBalanceDate(String currentRunningBalanceDate) {
    
    
    if (currentRunningBalanceDate != null && currentRunningBalanceDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for currentRunningBalanceDate. Length must be greater than or equal to 25.");
    }
    this.currentRunningBalanceDate = currentRunningBalanceDate;
  }


  public BalanceAnalyticsMetrics dailyBalancesByWeekdayForTheReportTimePeriod(List<ObbDailyBalance> dailyBalancesByWeekdayForTheReportTimePeriod) {
    
    
    
    
    this.dailyBalancesByWeekdayForTheReportTimePeriod = dailyBalancesByWeekdayForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addDailyBalancesByWeekdayForTheReportTimePeriodItem(ObbDailyBalance dailyBalancesByWeekdayForTheReportTimePeriodItem) {
    if (this.dailyBalancesByWeekdayForTheReportTimePeriod == null) {
      this.dailyBalancesByWeekdayForTheReportTimePeriod = new ArrayList<>();
    }
    this.dailyBalancesByWeekdayForTheReportTimePeriod.add(dailyBalancesByWeekdayForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Daily balance of the account during weekdays over the length of the report
   * @return dailyBalancesByWeekdayForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"date\":\"2022-03-23\",\"dayOfWeek\":\"Monday\",\"endingBalance\":21527.3}]", value = "Daily balance of the account during weekdays over the length of the report")

  public List<ObbDailyBalance> getDailyBalancesByWeekdayForTheReportTimePeriod() {
    return dailyBalancesByWeekdayForTheReportTimePeriod;
  }


  public void setDailyBalancesByWeekdayForTheReportTimePeriod(List<ObbDailyBalance> dailyBalancesByWeekdayForTheReportTimePeriod) {
    
    
    
    this.dailyBalancesByWeekdayForTheReportTimePeriod = dailyBalancesByWeekdayForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics dailyBalancesForTheReportTimePeriod(List<ObbDailyBalance> dailyBalancesForTheReportTimePeriod) {
    
    
    
    
    this.dailyBalancesForTheReportTimePeriod = dailyBalancesForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addDailyBalancesForTheReportTimePeriodItem(ObbDailyBalance dailyBalancesForTheReportTimePeriodItem) {
    if (this.dailyBalancesForTheReportTimePeriod == null) {
      this.dailyBalancesForTheReportTimePeriod = new ArrayList<>();
    }
    this.dailyBalancesForTheReportTimePeriod.add(dailyBalancesForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Daily balance of the account over the length of the report
   * @return dailyBalancesForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"date\":\"2022-03-22\",\"dayOfWeek\":\"Sunday\",\"endingBalance\":21527.3}]", value = "Daily balance of the account over the length of the report")

  public List<ObbDailyBalance> getDailyBalancesForTheReportTimePeriod() {
    return dailyBalancesForTheReportTimePeriod;
  }


  public void setDailyBalancesForTheReportTimePeriod(List<ObbDailyBalance> dailyBalancesForTheReportTimePeriod) {
    
    
    
    this.dailyBalancesForTheReportTimePeriod = dailyBalancesForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics historicNumberOfWeeksAverageBalanceIncreasing(ObbNumWeeksAverageBalanceIncreasing historicNumberOfWeeksAverageBalanceIncreasing) {
    
    
    
    
    this.historicNumberOfWeeksAverageBalanceIncreasing = historicNumberOfWeeksAverageBalanceIncreasing;
    return this;
  }

   /**
   * Get historicNumberOfWeeksAverageBalanceIncreasing
   * @return historicNumberOfWeeksAverageBalanceIncreasing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ObbNumWeeksAverageBalanceIncreasing getHistoricNumberOfWeeksAverageBalanceIncreasing() {
    return historicNumberOfWeeksAverageBalanceIncreasing;
  }


  public void setHistoricNumberOfWeeksAverageBalanceIncreasing(ObbNumWeeksAverageBalanceIncreasing historicNumberOfWeeksAverageBalanceIncreasing) {
    
    
    
    this.historicNumberOfWeeksAverageBalanceIncreasing = historicNumberOfWeeksAverageBalanceIncreasing;
  }


  public BalanceAnalyticsMetrics maximumDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> maximumDailyBalanceByMonthForTheReportTimePeriod) {
    
    
    
    
    this.maximumDailyBalanceByMonthForTheReportTimePeriod = maximumDailyBalanceByMonthForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addMaximumDailyBalanceByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount maximumDailyBalanceByMonthForTheReportTimePeriodItem) {
    if (this.maximumDailyBalanceByMonthForTheReportTimePeriod == null) {
      this.maximumDailyBalanceByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.maximumDailyBalanceByMonthForTheReportTimePeriod.add(maximumDailyBalanceByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Maximum daily ending balance each month over the report time period
   * @return maximumDailyBalanceByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum daily ending balance each month over the report time period")

  public List<ObbDateRangeAndAmount> getMaximumDailyBalanceByMonthForTheReportTimePeriod() {
    return maximumDailyBalanceByMonthForTheReportTimePeriod;
  }


  public void setMaximumDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> maximumDailyBalanceByMonthForTheReportTimePeriod) {
    
    
    
    this.maximumDailyBalanceByMonthForTheReportTimePeriod = maximumDailyBalanceByMonthForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics maximumRunningBalanceForTheReportTimePeriod(Double maximumRunningBalanceForTheReportTimePeriod) {
    
    
    
    
    this.maximumRunningBalanceForTheReportTimePeriod = maximumRunningBalanceForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics maximumRunningBalanceForTheReportTimePeriod(Integer maximumRunningBalanceForTheReportTimePeriod) {
    
    
    
    
    this.maximumRunningBalanceForTheReportTimePeriod = maximumRunningBalanceForTheReportTimePeriod.doubleValue();
    return this;
  }

   /**
   * Maximum Running Balance
   * @return maximumRunningBalanceForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-28749.44", value = "Maximum Running Balance")

  public Double getMaximumRunningBalanceForTheReportTimePeriod() {
    return maximumRunningBalanceForTheReportTimePeriod;
  }


  public void setMaximumRunningBalanceForTheReportTimePeriod(Double maximumRunningBalanceForTheReportTimePeriod) {
    
    
    
    this.maximumRunningBalanceForTheReportTimePeriod = maximumRunningBalanceForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics minimumDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> minimumDailyBalanceByMonthForTheReportTimePeriod) {
    
    
    
    
    this.minimumDailyBalanceByMonthForTheReportTimePeriod = minimumDailyBalanceByMonthForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addMinimumDailyBalanceByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount minimumDailyBalanceByMonthForTheReportTimePeriodItem) {
    if (this.minimumDailyBalanceByMonthForTheReportTimePeriod == null) {
      this.minimumDailyBalanceByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.minimumDailyBalanceByMonthForTheReportTimePeriod.add(minimumDailyBalanceByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Minimum daily ending balance each month over the report time period
   * @return minimumDailyBalanceByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum daily ending balance each month over the report time period")

  public List<ObbDateRangeAndAmount> getMinimumDailyBalanceByMonthForTheReportTimePeriod() {
    return minimumDailyBalanceByMonthForTheReportTimePeriod;
  }


  public void setMinimumDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> minimumDailyBalanceByMonthForTheReportTimePeriod) {
    
    
    
    this.minimumDailyBalanceByMonthForTheReportTimePeriod = minimumDailyBalanceByMonthForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics minimumRunningBalanceForTheReportTimePeriod(Double minimumRunningBalanceForTheReportTimePeriod) {
    
    
    
    
    this.minimumRunningBalanceForTheReportTimePeriod = minimumRunningBalanceForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics minimumRunningBalanceForTheReportTimePeriod(Integer minimumRunningBalanceForTheReportTimePeriod) {
    
    
    
    
    this.minimumRunningBalanceForTheReportTimePeriod = minimumRunningBalanceForTheReportTimePeriod.doubleValue();
    return this;
  }

   /**
   * Minimum Running Balance
   * @return minimumRunningBalanceForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-28749.44", value = "Minimum Running Balance")

  public Double getMinimumRunningBalanceForTheReportTimePeriod() {
    return minimumRunningBalanceForTheReportTimePeriod;
  }


  public void setMinimumRunningBalanceForTheReportTimePeriod(Double minimumRunningBalanceForTheReportTimePeriod) {
    
    
    
    this.minimumRunningBalanceForTheReportTimePeriod = minimumRunningBalanceForTheReportTimePeriod;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BalanceAnalyticsMetrics instance itself
   */
  public BalanceAnalyticsMetrics putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BalanceAnalyticsMetrics balanceAnalyticsMetrics = (BalanceAnalyticsMetrics) o;
    return Objects.equals(this.availableBalance, balanceAnalyticsMetrics.availableBalance) &&
        Objects.equals(this.availableBalanceDate, balanceAnalyticsMetrics.availableBalanceDate) &&
        Objects.equals(this.averageDailyBalanceByMonthForTheReportTimePeriod, balanceAnalyticsMetrics.averageDailyBalanceByMonthForTheReportTimePeriod) &&
        Objects.equals(this.averageDailyBalanceForTheReportTimePeriod, balanceAnalyticsMetrics.averageDailyBalanceForTheReportTimePeriod) &&
        Objects.equals(this.averageWeekdayBalanceForTheReportTimePeriod, balanceAnalyticsMetrics.averageWeekdayBalanceForTheReportTimePeriod) &&
        Objects.equals(this.countDailyNegativeBalancesByMonthForTheReportTimePeriod, balanceAnalyticsMetrics.countDailyNegativeBalancesByMonthForTheReportTimePeriod) &&
        Objects.equals(this.currentRunningBalance, balanceAnalyticsMetrics.currentRunningBalance) &&
        Objects.equals(this.currentRunningBalanceDate, balanceAnalyticsMetrics.currentRunningBalanceDate) &&
        Objects.equals(this.dailyBalancesByWeekdayForTheReportTimePeriod, balanceAnalyticsMetrics.dailyBalancesByWeekdayForTheReportTimePeriod) &&
        Objects.equals(this.dailyBalancesForTheReportTimePeriod, balanceAnalyticsMetrics.dailyBalancesForTheReportTimePeriod) &&
        Objects.equals(this.historicNumberOfWeeksAverageBalanceIncreasing, balanceAnalyticsMetrics.historicNumberOfWeeksAverageBalanceIncreasing) &&
        Objects.equals(this.maximumDailyBalanceByMonthForTheReportTimePeriod, balanceAnalyticsMetrics.maximumDailyBalanceByMonthForTheReportTimePeriod) &&
        Objects.equals(this.maximumRunningBalanceForTheReportTimePeriod, balanceAnalyticsMetrics.maximumRunningBalanceForTheReportTimePeriod) &&
        Objects.equals(this.minimumDailyBalanceByMonthForTheReportTimePeriod, balanceAnalyticsMetrics.minimumDailyBalanceByMonthForTheReportTimePeriod) &&
        Objects.equals(this.minimumRunningBalanceForTheReportTimePeriod, balanceAnalyticsMetrics.minimumRunningBalanceForTheReportTimePeriod)&&
        Objects.equals(this.additionalProperties, balanceAnalyticsMetrics.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableBalance, availableBalanceDate, averageDailyBalanceByMonthForTheReportTimePeriod, averageDailyBalanceForTheReportTimePeriod, averageWeekdayBalanceForTheReportTimePeriod, countDailyNegativeBalancesByMonthForTheReportTimePeriod, currentRunningBalance, currentRunningBalanceDate, dailyBalancesByWeekdayForTheReportTimePeriod, dailyBalancesForTheReportTimePeriod, historicNumberOfWeeksAverageBalanceIncreasing, maximumDailyBalanceByMonthForTheReportTimePeriod, maximumRunningBalanceForTheReportTimePeriod, minimumDailyBalanceByMonthForTheReportTimePeriod, minimumRunningBalanceForTheReportTimePeriod, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BalanceAnalyticsMetrics {\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    availableBalanceDate: ").append(toIndentedString(availableBalanceDate)).append("\n");
    sb.append("    averageDailyBalanceByMonthForTheReportTimePeriod: ").append(toIndentedString(averageDailyBalanceByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    averageDailyBalanceForTheReportTimePeriod: ").append(toIndentedString(averageDailyBalanceForTheReportTimePeriod)).append("\n");
    sb.append("    averageWeekdayBalanceForTheReportTimePeriod: ").append(toIndentedString(averageWeekdayBalanceForTheReportTimePeriod)).append("\n");
    sb.append("    countDailyNegativeBalancesByMonthForTheReportTimePeriod: ").append(toIndentedString(countDailyNegativeBalancesByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    currentRunningBalance: ").append(toIndentedString(currentRunningBalance)).append("\n");
    sb.append("    currentRunningBalanceDate: ").append(toIndentedString(currentRunningBalanceDate)).append("\n");
    sb.append("    dailyBalancesByWeekdayForTheReportTimePeriod: ").append(toIndentedString(dailyBalancesByWeekdayForTheReportTimePeriod)).append("\n");
    sb.append("    dailyBalancesForTheReportTimePeriod: ").append(toIndentedString(dailyBalancesForTheReportTimePeriod)).append("\n");
    sb.append("    historicNumberOfWeeksAverageBalanceIncreasing: ").append(toIndentedString(historicNumberOfWeeksAverageBalanceIncreasing)).append("\n");
    sb.append("    maximumDailyBalanceByMonthForTheReportTimePeriod: ").append(toIndentedString(maximumDailyBalanceByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    maximumRunningBalanceForTheReportTimePeriod: ").append(toIndentedString(maximumRunningBalanceForTheReportTimePeriod)).append("\n");
    sb.append("    minimumDailyBalanceByMonthForTheReportTimePeriod: ").append(toIndentedString(minimumDailyBalanceByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    minimumRunningBalanceForTheReportTimePeriod: ").append(toIndentedString(minimumRunningBalanceForTheReportTimePeriod)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableBalance");
    openapiFields.add("availableBalanceDate");
    openapiFields.add("averageDailyBalanceByMonthForTheReportTimePeriod");
    openapiFields.add("averageDailyBalanceForTheReportTimePeriod");
    openapiFields.add("averageWeekdayBalanceForTheReportTimePeriod");
    openapiFields.add("countDailyNegativeBalancesByMonthForTheReportTimePeriod");
    openapiFields.add("currentRunningBalance");
    openapiFields.add("currentRunningBalanceDate");
    openapiFields.add("dailyBalancesByWeekdayForTheReportTimePeriod");
    openapiFields.add("dailyBalancesForTheReportTimePeriod");
    openapiFields.add("historicNumberOfWeeksAverageBalanceIncreasing");
    openapiFields.add("maximumDailyBalanceByMonthForTheReportTimePeriod");
    openapiFields.add("maximumRunningBalanceForTheReportTimePeriod");
    openapiFields.add("minimumDailyBalanceByMonthForTheReportTimePeriod");
    openapiFields.add("minimumRunningBalanceForTheReportTimePeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BalanceAnalyticsMetrics
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BalanceAnalyticsMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BalanceAnalyticsMetrics is not found in the empty JSON string", BalanceAnalyticsMetrics.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("availableBalanceDate") != null && !jsonObj.get("availableBalanceDate").isJsonNull()) && !jsonObj.get("availableBalanceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableBalanceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableBalanceDate").toString()));
      }
      if (jsonObj.get("averageDailyBalanceByMonthForTheReportTimePeriod") != null && !jsonObj.get("averageDailyBalanceByMonthForTheReportTimePeriod").isJsonNull()) {
        JsonArray jsonArrayaverageDailyBalanceByMonthForTheReportTimePeriod = jsonObj.getAsJsonArray("averageDailyBalanceByMonthForTheReportTimePeriod");
        if (jsonArrayaverageDailyBalanceByMonthForTheReportTimePeriod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("averageDailyBalanceByMonthForTheReportTimePeriod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `averageDailyBalanceByMonthForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("averageDailyBalanceByMonthForTheReportTimePeriod").toString()));
          }

          // validate the optional field `averageDailyBalanceByMonthForTheReportTimePeriod` (array)
          for (int i = 0; i < jsonArrayaverageDailyBalanceByMonthForTheReportTimePeriod.size(); i++) {
            ObbDateRangeAndAmount.validateJsonObject(jsonArrayaverageDailyBalanceByMonthForTheReportTimePeriod.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("countDailyNegativeBalancesByMonthForTheReportTimePeriod") != null && !jsonObj.get("countDailyNegativeBalancesByMonthForTheReportTimePeriod").isJsonNull()) {
        JsonArray jsonArraycountDailyNegativeBalancesByMonthForTheReportTimePeriod = jsonObj.getAsJsonArray("countDailyNegativeBalancesByMonthForTheReportTimePeriod");
        if (jsonArraycountDailyNegativeBalancesByMonthForTheReportTimePeriod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("countDailyNegativeBalancesByMonthForTheReportTimePeriod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `countDailyNegativeBalancesByMonthForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("countDailyNegativeBalancesByMonthForTheReportTimePeriod").toString()));
          }

          // validate the optional field `countDailyNegativeBalancesByMonthForTheReportTimePeriod` (array)
          for (int i = 0; i < jsonArraycountDailyNegativeBalancesByMonthForTheReportTimePeriod.size(); i++) {
            ObbDateRangeAndCount.validateJsonObject(jsonArraycountDailyNegativeBalancesByMonthForTheReportTimePeriod.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("currentRunningBalanceDate") != null && !jsonObj.get("currentRunningBalanceDate").isJsonNull()) && !jsonObj.get("currentRunningBalanceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentRunningBalanceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentRunningBalanceDate").toString()));
      }
      if (jsonObj.get("dailyBalancesByWeekdayForTheReportTimePeriod") != null && !jsonObj.get("dailyBalancesByWeekdayForTheReportTimePeriod").isJsonNull()) {
        JsonArray jsonArraydailyBalancesByWeekdayForTheReportTimePeriod = jsonObj.getAsJsonArray("dailyBalancesByWeekdayForTheReportTimePeriod");
        if (jsonArraydailyBalancesByWeekdayForTheReportTimePeriod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dailyBalancesByWeekdayForTheReportTimePeriod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dailyBalancesByWeekdayForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("dailyBalancesByWeekdayForTheReportTimePeriod").toString()));
          }

          // validate the optional field `dailyBalancesByWeekdayForTheReportTimePeriod` (array)
          for (int i = 0; i < jsonArraydailyBalancesByWeekdayForTheReportTimePeriod.size(); i++) {
            ObbDailyBalance.validateJsonObject(jsonArraydailyBalancesByWeekdayForTheReportTimePeriod.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("dailyBalancesForTheReportTimePeriod") != null && !jsonObj.get("dailyBalancesForTheReportTimePeriod").isJsonNull()) {
        JsonArray jsonArraydailyBalancesForTheReportTimePeriod = jsonObj.getAsJsonArray("dailyBalancesForTheReportTimePeriod");
        if (jsonArraydailyBalancesForTheReportTimePeriod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dailyBalancesForTheReportTimePeriod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dailyBalancesForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("dailyBalancesForTheReportTimePeriod").toString()));
          }

          // validate the optional field `dailyBalancesForTheReportTimePeriod` (array)
          for (int i = 0; i < jsonArraydailyBalancesForTheReportTimePeriod.size(); i++) {
            ObbDailyBalance.validateJsonObject(jsonArraydailyBalancesForTheReportTimePeriod.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `historicNumberOfWeeksAverageBalanceIncreasing`
      if (jsonObj.get("historicNumberOfWeeksAverageBalanceIncreasing") != null && !jsonObj.get("historicNumberOfWeeksAverageBalanceIncreasing").isJsonNull()) {
        ObbNumWeeksAverageBalanceIncreasing.validateJsonObject(jsonObj.getAsJsonObject("historicNumberOfWeeksAverageBalanceIncreasing"));
      }
      if (jsonObj.get("maximumDailyBalanceByMonthForTheReportTimePeriod") != null && !jsonObj.get("maximumDailyBalanceByMonthForTheReportTimePeriod").isJsonNull()) {
        JsonArray jsonArraymaximumDailyBalanceByMonthForTheReportTimePeriod = jsonObj.getAsJsonArray("maximumDailyBalanceByMonthForTheReportTimePeriod");
        if (jsonArraymaximumDailyBalanceByMonthForTheReportTimePeriod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("maximumDailyBalanceByMonthForTheReportTimePeriod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `maximumDailyBalanceByMonthForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("maximumDailyBalanceByMonthForTheReportTimePeriod").toString()));
          }

          // validate the optional field `maximumDailyBalanceByMonthForTheReportTimePeriod` (array)
          for (int i = 0; i < jsonArraymaximumDailyBalanceByMonthForTheReportTimePeriod.size(); i++) {
            ObbDateRangeAndAmount.validateJsonObject(jsonArraymaximumDailyBalanceByMonthForTheReportTimePeriod.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("minimumDailyBalanceByMonthForTheReportTimePeriod") != null && !jsonObj.get("minimumDailyBalanceByMonthForTheReportTimePeriod").isJsonNull()) {
        JsonArray jsonArrayminimumDailyBalanceByMonthForTheReportTimePeriod = jsonObj.getAsJsonArray("minimumDailyBalanceByMonthForTheReportTimePeriod");
        if (jsonArrayminimumDailyBalanceByMonthForTheReportTimePeriod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("minimumDailyBalanceByMonthForTheReportTimePeriod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `minimumDailyBalanceByMonthForTheReportTimePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("minimumDailyBalanceByMonthForTheReportTimePeriod").toString()));
          }

          // validate the optional field `minimumDailyBalanceByMonthForTheReportTimePeriod` (array)
          for (int i = 0; i < jsonArrayminimumDailyBalanceByMonthForTheReportTimePeriod.size(); i++) {
            ObbDateRangeAndAmount.validateJsonObject(jsonArrayminimumDailyBalanceByMonthForTheReportTimePeriod.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BalanceAnalyticsMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BalanceAnalyticsMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BalanceAnalyticsMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BalanceAnalyticsMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<BalanceAnalyticsMetrics>() {
           @Override
           public void write(JsonWriter out, BalanceAnalyticsMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BalanceAnalyticsMetrics read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BalanceAnalyticsMetrics instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BalanceAnalyticsMetrics given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BalanceAnalyticsMetrics
  * @throws IOException if the JSON string is invalid with respect to BalanceAnalyticsMetrics
  */
  public static BalanceAnalyticsMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BalanceAnalyticsMetrics.class);
  }

 /**
  * Convert an instance of BalanceAnalyticsMetrics to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

