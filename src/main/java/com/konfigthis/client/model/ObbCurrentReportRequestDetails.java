/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Requested attributes of the report
 */
@ApiModel(description = "Requested attributes of the report")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ObbCurrentReportRequestDetails {
  public static final String SERIALIZED_NAME_REPORT_BEGIN_DATE = "reportBeginDate";
  @SerializedName(SERIALIZED_NAME_REPORT_BEGIN_DATE)
  private String reportBeginDate;

  public static final String SERIALIZED_NAME_REPORT_END_DATE = "reportEndDate";
  @SerializedName(SERIALIZED_NAME_REPORT_END_DATE)
  private String reportEndDate;

  public static final String SERIALIZED_NAME_REPORT_REQUEST_DATE = "reportRequestDate";
  @SerializedName(SERIALIZED_NAME_REPORT_REQUEST_DATE)
  private String reportRequestDate;

  public static final String SERIALIZED_NAME_REQUESTED_DAYS_FOR_REPORT = "requestedDaysForReport";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DAYS_FOR_REPORT)
  private Integer requestedDaysForReport;

  public static final String SERIALIZED_NAME_REQUESTED_REPORT_BEGIN_DATE = "requestedReportBeginDate";
  @SerializedName(SERIALIZED_NAME_REQUESTED_REPORT_BEGIN_DATE)
  private String requestedReportBeginDate;

  public ObbCurrentReportRequestDetails() {
  }

  public ObbCurrentReportRequestDetails reportBeginDate(String reportBeginDate) {
    
    
    if (reportBeginDate != null && reportBeginDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for reportBeginDate. Length must be greater than or equal to 10.");
    }
    
    this.reportBeginDate = reportBeginDate;
    return this;
  }

   /**
   * Date from when the requested data is available
   * @return reportBeginDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-03-01", value = "Date from when the requested data is available")

  public String getReportBeginDate() {
    return reportBeginDate;
  }


  public void setReportBeginDate(String reportBeginDate) {
    
    
    if (reportBeginDate != null && reportBeginDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for reportBeginDate. Length must be greater than or equal to 10.");
    }
    this.reportBeginDate = reportBeginDate;
  }


  public ObbCurrentReportRequestDetails reportEndDate(String reportEndDate) {
    
    
    if (reportEndDate != null && reportEndDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for reportEndDate. Length must be greater than or equal to 10.");
    }
    
    this.reportEndDate = reportEndDate;
    return this;
  }

   /**
   * Date to which the requested data is available
   * @return reportEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-03-30", value = "Date to which the requested data is available")

  public String getReportEndDate() {
    return reportEndDate;
  }


  public void setReportEndDate(String reportEndDate) {
    
    
    if (reportEndDate != null && reportEndDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for reportEndDate. Length must be greater than or equal to 10.");
    }
    this.reportEndDate = reportEndDate;
  }


  public ObbCurrentReportRequestDetails reportRequestDate(String reportRequestDate) {
    
    
    if (reportRequestDate != null && reportRequestDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for reportRequestDate. Length must be greater than or equal to 25.");
    }
    
    this.reportRequestDate = reportRequestDate;
    return this;
  }

   /**
   * The date and time the report was requested
   * @return reportRequestDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2022-03-30T14:47:19-07:00", required = true, value = "The date and time the report was requested")

  public String getReportRequestDate() {
    return reportRequestDate;
  }


  public void setReportRequestDate(String reportRequestDate) {
    
    
    if (reportRequestDate != null && reportRequestDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for reportRequestDate. Length must be greater than or equal to 25.");
    }
    this.reportRequestDate = reportRequestDate;
  }


  public ObbCurrentReportRequestDetails requestedDaysForReport(Integer requestedDaysForReport) {
    
    
    
    
    this.requestedDaysForReport = requestedDaysForReport;
    return this;
  }

   /**
   * Number of days requested for the report
   * @return requestedDaysForReport
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "90", required = true, value = "Number of days requested for the report")

  public Integer getRequestedDaysForReport() {
    return requestedDaysForReport;
  }


  public void setRequestedDaysForReport(Integer requestedDaysForReport) {
    
    
    
    this.requestedDaysForReport = requestedDaysForReport;
  }


  public ObbCurrentReportRequestDetails requestedReportBeginDate(String requestedReportBeginDate) {
    
    
    if (requestedReportBeginDate != null && requestedReportBeginDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for requestedReportBeginDate. Length must be greater than or equal to 10.");
    }
    
    this.requestedReportBeginDate = requestedReportBeginDate;
    return this;
  }

   /**
   * Date the report would have begun on if enough data was available for which the partner requested
   * @return requestedReportBeginDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2022-01-01", required = true, value = "Date the report would have begun on if enough data was available for which the partner requested")

  public String getRequestedReportBeginDate() {
    return requestedReportBeginDate;
  }


  public void setRequestedReportBeginDate(String requestedReportBeginDate) {
    
    
    if (requestedReportBeginDate != null && requestedReportBeginDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for requestedReportBeginDate. Length must be greater than or equal to 10.");
    }
    this.requestedReportBeginDate = requestedReportBeginDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ObbCurrentReportRequestDetails instance itself
   */
  public ObbCurrentReportRequestDetails putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObbCurrentReportRequestDetails obbCurrentReportRequestDetails = (ObbCurrentReportRequestDetails) o;
    return Objects.equals(this.reportBeginDate, obbCurrentReportRequestDetails.reportBeginDate) &&
        Objects.equals(this.reportEndDate, obbCurrentReportRequestDetails.reportEndDate) &&
        Objects.equals(this.reportRequestDate, obbCurrentReportRequestDetails.reportRequestDate) &&
        Objects.equals(this.requestedDaysForReport, obbCurrentReportRequestDetails.requestedDaysForReport) &&
        Objects.equals(this.requestedReportBeginDate, obbCurrentReportRequestDetails.requestedReportBeginDate)&&
        Objects.equals(this.additionalProperties, obbCurrentReportRequestDetails.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportBeginDate, reportEndDate, reportRequestDate, requestedDaysForReport, requestedReportBeginDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObbCurrentReportRequestDetails {\n");
    sb.append("    reportBeginDate: ").append(toIndentedString(reportBeginDate)).append("\n");
    sb.append("    reportEndDate: ").append(toIndentedString(reportEndDate)).append("\n");
    sb.append("    reportRequestDate: ").append(toIndentedString(reportRequestDate)).append("\n");
    sb.append("    requestedDaysForReport: ").append(toIndentedString(requestedDaysForReport)).append("\n");
    sb.append("    requestedReportBeginDate: ").append(toIndentedString(requestedReportBeginDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reportBeginDate");
    openapiFields.add("reportEndDate");
    openapiFields.add("reportRequestDate");
    openapiFields.add("requestedDaysForReport");
    openapiFields.add("requestedReportBeginDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reportRequestDate");
    openapiRequiredFields.add("requestedDaysForReport");
    openapiRequiredFields.add("requestedReportBeginDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ObbCurrentReportRequestDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ObbCurrentReportRequestDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObbCurrentReportRequestDetails is not found in the empty JSON string", ObbCurrentReportRequestDetails.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObbCurrentReportRequestDetails.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("reportBeginDate") != null && !jsonObj.get("reportBeginDate").isJsonNull()) && !jsonObj.get("reportBeginDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportBeginDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportBeginDate").toString()));
      }
      if ((jsonObj.get("reportEndDate") != null && !jsonObj.get("reportEndDate").isJsonNull()) && !jsonObj.get("reportEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportEndDate").toString()));
      }
      if (!jsonObj.get("reportRequestDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportRequestDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportRequestDate").toString()));
      }
      if (!jsonObj.get("requestedReportBeginDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedReportBeginDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedReportBeginDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObbCurrentReportRequestDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObbCurrentReportRequestDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObbCurrentReportRequestDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObbCurrentReportRequestDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ObbCurrentReportRequestDetails>() {
           @Override
           public void write(JsonWriter out, ObbCurrentReportRequestDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObbCurrentReportRequestDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ObbCurrentReportRequestDetails instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObbCurrentReportRequestDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObbCurrentReportRequestDetails
  * @throws IOException if the JSON string is invalid with respect to ObbCurrentReportRequestDetails
  */
  public static ObbCurrentReportRequestDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObbCurrentReportRequestDetails.class);
  }

 /**
  * Convert an instance of ObbCurrentReportRequestDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

