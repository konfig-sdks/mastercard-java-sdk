/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ThirdPartyAccessPeriod;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Product for which access token to be generated
 */
@ApiModel(description = "Product for which access token to be generated")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ThirdPartyAccessProduct {
  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private String product;

  public static final String SERIALIZED_NAME_PAYOR_ID = "payorId";
  @SerializedName(SERIALIZED_NAME_PAYOR_ID)
  private String payorId;

  public static final String SERIALIZED_NAME_MAX_CALLS = "maxCalls";
  @SerializedName(SERIALIZED_NAME_MAX_CALLS)
  private Integer maxCalls;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACCESS_PERIOD = "accessPeriod";
  @SerializedName(SERIALIZED_NAME_ACCESS_PERIOD)
  private ThirdPartyAccessPeriod accessPeriod;

  public ThirdPartyAccessProduct() {
  }

  public ThirdPartyAccessProduct product(String product) {
    
    
    
    
    this.product = product;
    return this;
  }

   /**
   * Third party access token can be generated for the following product types:   * \&quot;moneyTransferDetails\&quot;: Retrieve account details for money transfer * \&quot;availableBalance\&quot;: Retrieves the latest cached available and cleared     account balances for an account. * \&quot;availableBalanceLive\&quot;: Retrieves the available and cleared account balances live from the financial institution * \&quot;accountOwner\&quot;: Retrieves names and addresses of the account owner from a financial institution. * \&quot;paymentIndicator\&quot;: Get the Payment Success Indicator response, scoring the likelihood of payment settlement * \&quot;paymentFeedback\&quot;: Create feedback loop for Payment Success Indicator (PSI) and/or Payment Routing Optimizer (PRO) * \&quot;paymentRouting\&quot;: Product recommends the best rail to use as well as the best time to initiate the payment
   * @return product
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "moneyTransferDetails", required = true, value = "Third party access token can be generated for the following product types:   * \"moneyTransferDetails\": Retrieve account details for money transfer * \"availableBalance\": Retrieves the latest cached available and cleared     account balances for an account. * \"availableBalanceLive\": Retrieves the available and cleared account balances live from the financial institution * \"accountOwner\": Retrieves names and addresses of the account owner from a financial institution. * \"paymentIndicator\": Get the Payment Success Indicator response, scoring the likelihood of payment settlement * \"paymentFeedback\": Create feedback loop for Payment Success Indicator (PSI) and/or Payment Routing Optimizer (PRO) * \"paymentRouting\": Product recommends the best rail to use as well as the best time to initiate the payment")

  public String getProduct() {
    return product;
  }


  public void setProduct(String product) {
    
    
    
    this.product = product;
  }


  public ThirdPartyAccessProduct payorId(String payorId) {
    
    
    
    
    this.payorId = payorId;
    return this;
  }

   /**
   * The Finicity Partner ID who should be billed when the Requester requests data from Finicity. If no value specified, then the Recipient will be billed.
   * @return payorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2445581559892", value = "The Finicity Partner ID who should be billed when the Requester requests data from Finicity. If no value specified, then the Recipient will be billed.")

  public String getPayorId() {
    return payorId;
  }


  public void setPayorId(String payorId) {
    
    
    
    this.payorId = payorId;
  }


  public ThirdPartyAccessProduct maxCalls(Integer maxCalls) {
    
    
    
    
    this.maxCalls = maxCalls;
    return this;
  }

   /**
   * Max number of calls to the consented product (consented API)
   * @return maxCalls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200", value = "Max number of calls to the consented product (consented API)")

  public Integer getMaxCalls() {
    return maxCalls;
  }


  public void setMaxCalls(Integer maxCalls) {
    
    
    
    this.maxCalls = maxCalls;
  }


  public ThirdPartyAccessProduct accountId(String accountId) {
    
    
    
    
    this.accountId = accountId;
    return this;
  }

   /**
   * An account ID
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5011648377", required = true, value = "An account ID")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    
    
    
    this.accountId = accountId;
  }


  public ThirdPartyAccessProduct accessPeriod(ThirdPartyAccessPeriod accessPeriod) {
    
    
    
    
    this.accessPeriod = accessPeriod;
    return this;
  }

   /**
   * Get accessPeriod
   * @return accessPeriod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ThirdPartyAccessPeriod getAccessPeriod() {
    return accessPeriod;
  }


  public void setAccessPeriod(ThirdPartyAccessPeriod accessPeriod) {
    
    
    
    this.accessPeriod = accessPeriod;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ThirdPartyAccessProduct instance itself
   */
  public ThirdPartyAccessProduct putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThirdPartyAccessProduct thirdPartyAccessProduct = (ThirdPartyAccessProduct) o;
    return Objects.equals(this.product, thirdPartyAccessProduct.product) &&
        Objects.equals(this.payorId, thirdPartyAccessProduct.payorId) &&
        Objects.equals(this.maxCalls, thirdPartyAccessProduct.maxCalls) &&
        Objects.equals(this.accountId, thirdPartyAccessProduct.accountId) &&
        Objects.equals(this.accessPeriod, thirdPartyAccessProduct.accessPeriod)&&
        Objects.equals(this.additionalProperties, thirdPartyAccessProduct.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(product, payorId, maxCalls, accountId, accessPeriod, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThirdPartyAccessProduct {\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    payorId: ").append(toIndentedString(payorId)).append("\n");
    sb.append("    maxCalls: ").append(toIndentedString(maxCalls)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accessPeriod: ").append(toIndentedString(accessPeriod)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("product");
    openapiFields.add("payorId");
    openapiFields.add("maxCalls");
    openapiFields.add("accountId");
    openapiFields.add("accessPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("product");
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("accessPeriod");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ThirdPartyAccessProduct
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ThirdPartyAccessProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThirdPartyAccessProduct is not found in the empty JSON string", ThirdPartyAccessProduct.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ThirdPartyAccessProduct.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
      if ((jsonObj.get("payorId") != null && !jsonObj.get("payorId").isJsonNull()) && !jsonObj.get("payorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorId").toString()));
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the required field `accessPeriod`
      ThirdPartyAccessPeriod.validateJsonObject(jsonObj.getAsJsonObject("accessPeriod"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThirdPartyAccessProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThirdPartyAccessProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThirdPartyAccessProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThirdPartyAccessProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<ThirdPartyAccessProduct>() {
           @Override
           public void write(JsonWriter out, ThirdPartyAccessProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ThirdPartyAccessProduct read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ThirdPartyAccessProduct instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ThirdPartyAccessProduct given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ThirdPartyAccessProduct
  * @throws IOException if the JSON string is invalid with respect to ThirdPartyAccessProduct
  */
  public static ThirdPartyAccessProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThirdPartyAccessProduct.class);
  }

 /**
  * Convert an instance of ThirdPartyAccessProduct to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

