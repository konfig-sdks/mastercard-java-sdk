/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Categorization;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Transaction
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Transaction {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Long accountId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Long customerId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private Long transactionDate;

  public static final String SERIALIZED_NAME_POSTED_DATE = "postedDate";
  @SerializedName(SERIALIZED_NAME_POSTED_DATE)
  private Long postedDate;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private Long createdDate;

  public static final String SERIALIZED_NAME_FIRST_EFFECTIVE_DATE = "firstEffectiveDate";
  @SerializedName(SERIALIZED_NAME_FIRST_EFFECTIVE_DATE)
  private Long firstEffectiveDate;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private Long effectiveDate;

  public static final String SERIALIZED_NAME_OPTION_EXPIRE_DATE = "optionExpireDate";
  @SerializedName(SERIALIZED_NAME_OPTION_EXPIRE_DATE)
  private Long optionExpireDate;

  public static final String SERIALIZED_NAME_CHECK_NUM = "checkNum";
  @SerializedName(SERIALIZED_NAME_CHECK_NUM)
  private String checkNum;

  public static final String SERIALIZED_NAME_ESCROW_AMOUNT = "escrowAmount";
  @SerializedName(SERIALIZED_NAME_ESCROW_AMOUNT)
  private Double escrowAmount;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "feeAmount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private Double feeAmount;

  public static final String SERIALIZED_NAME_SUSPENSE_AMOUNT = "suspenseAmount";
  @SerializedName(SERIALIZED_NAME_SUSPENSE_AMOUNT)
  private Double suspenseAmount;

  public static final String SERIALIZED_NAME_INTEREST_AMOUNT = "interestAmount";
  @SerializedName(SERIALIZED_NAME_INTEREST_AMOUNT)
  private Double interestAmount;

  public static final String SERIALIZED_NAME_PRINCIPAL_AMOUNT = "principalAmount";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_AMOUNT)
  private Double principalAmount;

  public static final String SERIALIZED_NAME_OPTION_STRIKE_PRICE = "optionStrikePrice";
  @SerializedName(SERIALIZED_NAME_OPTION_STRIKE_PRICE)
  private Double optionStrikePrice;

  public static final String SERIALIZED_NAME_UNIT_QUANTITY = "unitQuantity";
  @SerializedName(SERIALIZED_NAME_UNIT_QUANTITY)
  private Integer unitQuantity;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Double unitPrice;

  public static final String SERIALIZED_NAME_CATEGORIZATION = "categorization";
  @SerializedName(SERIALIZED_NAME_CATEGORIZATION)
  private Categorization categorization;

  public static final String SERIALIZED_NAME_RUNNING_BALANCE_AMOUNT = "runningBalanceAmount";
  @SerializedName(SERIALIZED_NAME_RUNNING_BALANCE_AMOUNT)
  private Double runningBalanceAmount;

  public static final String SERIALIZED_NAME_SUBACCOUNT_SECURITY_TYPE = "subaccountSecurityType";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_SECURITY_TYPE)
  private String subaccountSecurityType;

  public static final String SERIALIZED_NAME_COMMISSION_AMOUNT = "commissionAmount";
  @SerializedName(SERIALIZED_NAME_COMMISSION_AMOUNT)
  private Integer commissionAmount;

  public static final String SERIALIZED_NAME_TICKER = "ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  private String ticker;

  public static final String SERIALIZED_NAME_INVESTMENT_TRANSACTION_TYPE = "investmentTransactionType";
  @SerializedName(SERIALIZED_NAME_INVESTMENT_TRANSACTION_TYPE)
  private String investmentTransactionType;

  public static final String SERIALIZED_NAME_TAXES_AMOUNT = "taxesAmount";
  @SerializedName(SERIALIZED_NAME_TAXES_AMOUNT)
  private Integer taxesAmount;

  public static final String SERIALIZED_NAME_CURRENCY_SYMBOL = "currencySymbol";
  @SerializedName(SERIALIZED_NAME_CURRENCY_SYMBOL)
  private String currencySymbol;

  public static final String SERIALIZED_NAME_INCOME_TYPE = "incomeType";
  @SerializedName(SERIALIZED_NAME_INCOME_TYPE)
  private String incomeType;

  public static final String SERIALIZED_NAME_SPLIT_DENOMINATOR = "splitDenominator";
  @SerializedName(SERIALIZED_NAME_SPLIT_DENOMINATOR)
  private Double splitDenominator;

  public static final String SERIALIZED_NAME_SPLIT_NUMERATOR = "splitNumerator";
  @SerializedName(SERIALIZED_NAME_SPLIT_NUMERATOR)
  private Double splitNumerator;

  public static final String SERIALIZED_NAME_SHARES_PER_CONTRACT = "sharesPerContract";
  @SerializedName(SERIALIZED_NAME_SHARES_PER_CONTRACT)
  private Double sharesPerContract;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_FUND = "subAccountFund";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_FUND)
  private String subAccountFund;

  public static final String SERIALIZED_NAME_SECURITY_ID = "securityId";
  @SerializedName(SERIALIZED_NAME_SECURITY_ID)
  private String securityId;

  public static final String SERIALIZED_NAME_SECURITY_ID_TYPE = "securityIdType";
  @SerializedName(SERIALIZED_NAME_SECURITY_ID_TYPE)
  private String securityIdType;

  public Transaction() {
  }

  public Transaction description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description value is from the financial institution (FI), often known as the payee. The value \&quot;No description provided by institution\&quot; is returned when the FI doesn&#39;t provide one
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Buy Stock", required = true, value = "The description value is from the financial institution (FI), often known as the payee. The value \"No description provided by institution\" is returned when the FI doesn't provide one")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Transaction id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * A transaction ID
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "21284820852", required = true, value = "A transaction ID")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public Transaction amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public Transaction amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "-828.9", required = true, value = "The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public Transaction accountId(Long accountId) {
    
    
    
    
    this.accountId = accountId;
    return this;
  }

   /**
   * An account ID represented as a number
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5011648377", required = true, value = "An account ID represented as a number")

  public Long getAccountId() {
    return accountId;
  }


  public void setAccountId(Long accountId) {
    
    
    
    this.accountId = accountId;
  }


  public Transaction customerId(Long customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * A customer ID represented as a number. See Add Customer API for how to create a customer ID.
   * @return customerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1005061234", required = true, value = "A customer ID represented as a number. See Add Customer API for how to create a customer ID.")

  public Long getCustomerId() {
    return customerId;
  }


  public void setCustomerId(Long customerId) {
    
    
    
    this.customerId = customerId;
  }


  public Transaction status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * One of \&quot;active\&quot;, \&quot;pending\&quot;, or \&quot;shadow\&quot; (see [Transaction Status](https://developer.mastercard.com/open-banking-us/documentation/products/manage/transaction-data/#transaction-status))
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "active", required = true, value = "One of \"active\", \"pending\", or \"shadow\" (see [Transaction Status](https://developer.mastercard.com/open-banking-us/documentation/products/manage/transaction-data/#transaction-status))")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public Transaction memo(String memo) {
    
    
    
    
    this.memo = memo;
    return this;
  }

   /**
   * The institution must provide either a description, a memo, or both. We recommended concatenating the two fields into a single value.
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UWM HOLDINGS CORPORATION - CLASS A COMMON STOCK", value = "The institution must provide either a description, a memo, or both. We recommended concatenating the two fields into a single value.")

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    
    
    
    this.memo = memo;
  }


  public Transaction type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * If provided by the institution, the following values may be returned in the field of a record: * \&quot;atm\&quot;  * \&quot;cash\&quot;  * \&quot;check\&quot;  * \&quot;credit\&quot;  * \&quot;debit\&quot;  * \&quot;deposit\&quot;  * \&quot;directDebit\&quot;  * \&quot;directDeposit\&quot;  * \&quot;dividend\&quot;  * \&quot;fee\&quot;  * \&quot;interest\&quot;  * \&quot;other\&quot;  * \&quot;payment\&quot;  * \&quot;pointOfSale\&quot;  * \&quot;repeatPayment\&quot;  * \&quot;serviceCharge\&quot;  * \&quot;transfer\&quot;
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "atm", value = "If provided by the institution, the following values may be returned in the field of a record: * \"atm\"  * \"cash\"  * \"check\"  * \"credit\"  * \"debit\"  * \"deposit\"  * \"directDebit\"  * \"directDeposit\"  * \"dividend\"  * \"fee\"  * \"interest\"  * \"other\"  * \"payment\"  * \"pointOfSale\"  * \"repeatPayment\"  * \"serviceCharge\"  * \"transfer\"")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public Transaction transactionDate(Long transactionDate) {
    
    
    
    
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it occurred. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return transactionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it occurred. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getTransactionDate() {
    return transactionDate;
  }


  public void setTransactionDate(Long transactionDate) {
    
    
    
    this.transactionDate = transactionDate;
  }


  public Transaction postedDate(Long postedDate) {
    
    
    
    
    this.postedDate = postedDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was posted or cleared by the institution. This value isn&#39;t required for student loan transaction data. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return postedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was posted or cleared by the institution. This value isn't required for student loan transaction data. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getPostedDate() {
    return postedDate;
  }


  public void setPostedDate(Long postedDate) {
    
    
    
    this.postedDate = postedDate;
  }


  public Transaction createdDate(Long createdDate) {
    
    
    
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was added to our platform. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return createdDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1607450357", required = true, value = "A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was added to our platform. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(Long createdDate) {
    
    
    
    this.createdDate = createdDate;
  }


  public Transaction firstEffectiveDate(Long firstEffectiveDate) {
    
    
    
    
    this.firstEffectiveDate = firstEffectiveDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the first timestamp of the transaction recorded in the &#x60;effectiveDate&#x60; field. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return firstEffectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "A date in Unix epoch time (in seconds). Represents the first timestamp of the transaction recorded in the `effectiveDate` field. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getFirstEffectiveDate() {
    return firstEffectiveDate;
  }


  public void setFirstEffectiveDate(Long firstEffectiveDate) {
    
    
    
    this.firstEffectiveDate = firstEffectiveDate;
  }


  public Transaction effectiveDate(Long effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it became effective on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it became effective on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(Long effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public Transaction optionExpireDate(Long optionExpireDate) {
    
    
    
    
    this.optionExpireDate = optionExpireDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction expiration date when it became expires on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return optionExpireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "A date in Unix epoch time (in seconds). Represents the timestamp of the transaction expiration date when it became expires on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).")

  public Long getOptionExpireDate() {
    return optionExpireDate;
  }


  public void setOptionExpireDate(Long optionExpireDate) {
    
    
    
    this.optionExpireDate = optionExpireDate;
  }


  public Transaction checkNum(String checkNum) {
    
    
    
    
    this.checkNum = checkNum;
    return this;
  }

   /**
   * The check number of the transaction
   * @return checkNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "299", value = "The check number of the transaction")

  public String getCheckNum() {
    return checkNum;
  }


  public void setCheckNum(String checkNum) {
    
    
    
    this.checkNum = checkNum;
  }


  public Transaction escrowAmount(Double escrowAmount) {
    
    
    
    
    this.escrowAmount = escrowAmount;
    return this;
  }

  public Transaction escrowAmount(Integer escrowAmount) {
    
    
    
    
    this.escrowAmount = escrowAmount.doubleValue();
    return this;
  }

   /**
   * The portion of the transaction allocated to escrow
   * @return escrowAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2534", value = "The portion of the transaction allocated to escrow")

  public Double getEscrowAmount() {
    return escrowAmount;
  }


  public void setEscrowAmount(Double escrowAmount) {
    
    
    
    this.escrowAmount = escrowAmount;
  }


  public Transaction feeAmount(Double feeAmount) {
    
    
    
    
    this.feeAmount = feeAmount;
    return this;
  }

  public Transaction feeAmount(Integer feeAmount) {
    
    
    
    
    this.feeAmount = feeAmount.doubleValue();
    return this;
  }

   /**
   * The portion of the overall transaction amount applied to fees
   * @return feeAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.51", value = "The portion of the overall transaction amount applied to fees")

  public Double getFeeAmount() {
    return feeAmount;
  }


  public void setFeeAmount(Double feeAmount) {
    
    
    
    this.feeAmount = feeAmount;
  }


  public Transaction suspenseAmount(Double suspenseAmount) {
    
    
    
    
    this.suspenseAmount = suspenseAmount;
    return this;
  }

  public Transaction suspenseAmount(Integer suspenseAmount) {
    
    
    
    
    this.suspenseAmount = suspenseAmount.doubleValue();
    return this;
  }

   /**
   * Temporarily hold funds if you overpay or underpay your monthly payment
   * @return suspenseAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.25", value = "Temporarily hold funds if you overpay or underpay your monthly payment")

  public Double getSuspenseAmount() {
    return suspenseAmount;
  }


  public void setSuspenseAmount(Double suspenseAmount) {
    
    
    
    this.suspenseAmount = suspenseAmount;
  }


  public Transaction interestAmount(Double interestAmount) {
    
    
    
    
    this.interestAmount = interestAmount;
    return this;
  }

  public Transaction interestAmount(Integer interestAmount) {
    
    
    
    
    this.interestAmount = interestAmount.doubleValue();
    return this;
  }

   /**
   * The portion of the transaction allocated to interest
   * @return interestAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "132", value = "The portion of the transaction allocated to interest")

  public Double getInterestAmount() {
    return interestAmount;
  }


  public void setInterestAmount(Double interestAmount) {
    
    
    
    this.interestAmount = interestAmount;
  }


  public Transaction principalAmount(Double principalAmount) {
    
    
    
    
    this.principalAmount = principalAmount;
    return this;
  }

  public Transaction principalAmount(Integer principalAmount) {
    
    
    
    
    this.principalAmount = principalAmount.doubleValue();
    return this;
  }

   /**
   * The portion of the transaction allocated to principal
   * @return principalAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "32560", value = "The portion of the transaction allocated to principal")

  public Double getPrincipalAmount() {
    return principalAmount;
  }


  public void setPrincipalAmount(Double principalAmount) {
    
    
    
    this.principalAmount = principalAmount;
  }


  public Transaction optionStrikePrice(Double optionStrikePrice) {
    
    
    
    
    this.optionStrikePrice = optionStrikePrice;
    return this;
  }

  public Transaction optionStrikePrice(Integer optionStrikePrice) {
    
    
    
    
    this.optionStrikePrice = optionStrikePrice.doubleValue();
    return this;
  }

   /**
   * The strike price of the option contract
   * @return optionStrikePrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "32560", value = "The strike price of the option contract")

  public Double getOptionStrikePrice() {
    return optionStrikePrice;
  }


  public void setOptionStrikePrice(Double optionStrikePrice) {
    
    
    
    this.optionStrikePrice = optionStrikePrice;
  }


  public Transaction unitQuantity(Integer unitQuantity) {
    
    
    
    
    this.unitQuantity = unitQuantity;
    return this;
  }

   /**
   * The number of units (individual shares) in the transaction
   * @return unitQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "150", value = "The number of units (individual shares) in the transaction")

  public Integer getUnitQuantity() {
    return unitQuantity;
  }


  public void setUnitQuantity(Integer unitQuantity) {
    
    
    
    this.unitQuantity = unitQuantity;
  }


  public Transaction unitPrice(Double unitPrice) {
    
    
    
    
    this.unitPrice = unitPrice;
    return this;
  }

  public Transaction unitPrice(Integer unitPrice) {
    
    
    
    
    this.unitPrice = unitPrice.doubleValue();
    return this;
  }

   /**
   * Share price for the investment unit: stocks, mutual funds, ETFs
   * @return unitPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5.53", value = "Share price for the investment unit: stocks, mutual funds, ETFs")

  public Double getUnitPrice() {
    return unitPrice;
  }


  public void setUnitPrice(Double unitPrice) {
    
    
    
    this.unitPrice = unitPrice;
  }


  public Transaction categorization(Categorization categorization) {
    
    
    
    
    this.categorization = categorization;
    return this;
  }

   /**
   * Get categorization
   * @return categorization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Categorization getCategorization() {
    return categorization;
  }


  public void setCategorization(Categorization categorization) {
    
    
    
    this.categorization = categorization;
  }


  public Transaction runningBalanceAmount(Double runningBalanceAmount) {
    
    
    
    
    this.runningBalanceAmount = runningBalanceAmount;
    return this;
  }

  public Transaction runningBalanceAmount(Integer runningBalanceAmount) {
    
    
    
    
    this.runningBalanceAmount = runningBalanceAmount.doubleValue();
    return this;
  }

   /**
   * The ending balance after the transaction was posted
   * @return runningBalanceAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000", value = "The ending balance after the transaction was posted")

  public Double getRunningBalanceAmount() {
    return runningBalanceAmount;
  }


  public void setRunningBalanceAmount(Double runningBalanceAmount) {
    
    
    
    this.runningBalanceAmount = runningBalanceAmount;
  }


  public Transaction subaccountSecurityType(String subaccountSecurityType) {
    
    
    
    
    this.subaccountSecurityType = subaccountSecurityType;
    return this;
  }

   /**
   * The type of sub account the funds came from
   * @return subaccountSecurityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MARGIN", value = "The type of sub account the funds came from")

  public String getSubaccountSecurityType() {
    return subaccountSecurityType;
  }


  public void setSubaccountSecurityType(String subaccountSecurityType) {
    
    
    
    this.subaccountSecurityType = subaccountSecurityType;
  }


  public Transaction commissionAmount(Integer commissionAmount) {
    
    
    
    
    this.commissionAmount = commissionAmount;
    return this;
  }

   /**
   * Transaction commission
   * @return commissionAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Transaction commission")

  public Integer getCommissionAmount() {
    return commissionAmount;
  }


  public void setCommissionAmount(Integer commissionAmount) {
    
    
    
    this.commissionAmount = commissionAmount;
  }


  public Transaction ticker(String ticker) {
    
    
    
    
    this.ticker = ticker;
    return this;
  }

   /**
   * Ticker symbol for the investment related to the transaction
   * @return ticker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UWMC", value = "Ticker symbol for the investment related to the transaction")

  public String getTicker() {
    return ticker;
  }


  public void setTicker(String ticker) {
    
    
    
    this.ticker = ticker;
  }


  public Transaction investmentTransactionType(String investmentTransactionType) {
    
    
    
    
    this.investmentTransactionType = investmentTransactionType;
    return this;
  }

   /**
   * Keywords in the &#x60;description&#x60; and &#x60;memo&#x60; fields were used to translate investment transactions into these types.  Possible values: * \&quot;cancel\&quot;  * \&quot;purchaseToClose\&quot;  * \&quot;purchaseToCover\&quot;  * \&quot;contribution\&quot;  * \&quot;optionExercise\&quot;  * \&quot;optionExpiration\&quot;  * \&quot;fee\&quot;  * \&quot;soldToClose\&quot;  * \&quot;soldToOpen\&quot;  * \&quot;split\&quot;  * \&quot;transfer\&quot;  * \&quot;returnOfCapital\&quot;  * \&quot;income\&quot;  * \&quot;purchased\&quot;  * \&quot;sold\&quot;  * \&quot;dividendReinvest\&quot;  * \&quot;tax\&quot;  * \&quot;dividend\&quot;  * \&quot;reinvestOfIncome\&quot;  * \&quot;interest\&quot;  * \&quot;deposit\&quot;  * \&quot;otherInfo\&quot;
   * @return investmentTransactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "transfer", value = "Keywords in the `description` and `memo` fields were used to translate investment transactions into these types.  Possible values: * \"cancel\"  * \"purchaseToClose\"  * \"purchaseToCover\"  * \"contribution\"  * \"optionExercise\"  * \"optionExpiration\"  * \"fee\"  * \"soldToClose\"  * \"soldToOpen\"  * \"split\"  * \"transfer\"  * \"returnOfCapital\"  * \"income\"  * \"purchased\"  * \"sold\"  * \"dividendReinvest\"  * \"tax\"  * \"dividend\"  * \"reinvestOfIncome\"  * \"interest\"  * \"deposit\"  * \"otherInfo\"")

  public String getInvestmentTransactionType() {
    return investmentTransactionType;
  }


  public void setInvestmentTransactionType(String investmentTransactionType) {
    
    
    
    this.investmentTransactionType = investmentTransactionType;
  }


  public Transaction taxesAmount(Integer taxesAmount) {
    
    
    
    
    this.taxesAmount = taxesAmount;
    return this;
  }

   /**
   * Taxes applicable to the investment trade
   * @return taxesAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Taxes applicable to the investment trade")

  public Integer getTaxesAmount() {
    return taxesAmount;
  }


  public void setTaxesAmount(Integer taxesAmount) {
    
    
    
    this.taxesAmount = taxesAmount;
  }


  public Transaction currencySymbol(String currencySymbol) {
    
    
    
    
    this.currencySymbol = currencySymbol;
    return this;
  }

   /**
   * If the foreign amount value is present then this is the currency code of that foreign amount
   * @return currencySymbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "If the foreign amount value is present then this is the currency code of that foreign amount")

  public String getCurrencySymbol() {
    return currencySymbol;
  }


  public void setCurrencySymbol(String currencySymbol) {
    
    
    
    this.currencySymbol = currencySymbol;
  }


  public Transaction incomeType(String incomeType) {
    
    
    
    
    this.incomeType = incomeType;
    return this;
  }

   /**
   * Capital gains applied in short, long, or miscellaneous terms for tax purposes
   * @return incomeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DIV", value = "Capital gains applied in short, long, or miscellaneous terms for tax purposes")

  public String getIncomeType() {
    return incomeType;
  }


  public void setIncomeType(String incomeType) {
    
    
    
    this.incomeType = incomeType;
  }


  public Transaction splitDenominator(Double splitDenominator) {
    
    
    
    
    this.splitDenominator = splitDenominator;
    return this;
  }

  public Transaction splitDenominator(Integer splitDenominator) {
    
    
    
    
    this.splitDenominator = splitDenominator.doubleValue();
    return this;
  }

   /**
   * Denominator of the stock split for the transaction
   * @return splitDenominator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "152", value = "Denominator of the stock split for the transaction")

  public Double getSplitDenominator() {
    return splitDenominator;
  }


  public void setSplitDenominator(Double splitDenominator) {
    
    
    
    this.splitDenominator = splitDenominator;
  }


  public Transaction splitNumerator(Double splitNumerator) {
    
    
    
    
    this.splitNumerator = splitNumerator;
    return this;
  }

  public Transaction splitNumerator(Integer splitNumerator) {
    
    
    
    
    this.splitNumerator = splitNumerator.doubleValue();
    return this;
  }

   /**
   * Numerator of the stock split for the transaction
   * @return splitNumerator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "Numerator of the stock split for the transaction")

  public Double getSplitNumerator() {
    return splitNumerator;
  }


  public void setSplitNumerator(Double splitNumerator) {
    
    
    
    this.splitNumerator = splitNumerator;
  }


  public Transaction sharesPerContract(Double sharesPerContract) {
    
    
    
    
    this.sharesPerContract = sharesPerContract;
    return this;
  }

  public Transaction sharesPerContract(Integer sharesPerContract) {
    
    
    
    
    this.sharesPerContract = sharesPerContract.doubleValue();
    return this;
  }

   /**
   * Shares per contract of the underlying stock option
   * @return sharesPerContract
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Shares per contract of the underlying stock option")

  public Double getSharesPerContract() {
    return sharesPerContract;
  }


  public void setSharesPerContract(Double sharesPerContract) {
    
    
    
    this.sharesPerContract = sharesPerContract;
  }


  public Transaction subAccountFund(String subAccountFund) {
    
    
    
    
    this.subAccountFund = subAccountFund;
    return this;
  }

   /**
   * The sub account where the funds came from
   * @return subAccountFund
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MARGIN", value = "The sub account where the funds came from")

  public String getSubAccountFund() {
    return subAccountFund;
  }


  public void setSubAccountFund(String subAccountFund) {
    
    
    
    this.subAccountFund = subAccountFund;
  }


  public Transaction securityId(String securityId) {
    
    
    
    
    this.securityId = securityId;
    return this;
  }

   /**
   * The security ID of the transaction
   * @return securityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "91823B109", value = "The security ID of the transaction")

  public String getSecurityId() {
    return securityId;
  }


  public void setSecurityId(String securityId) {
    
    
    
    this.securityId = securityId;
  }


  public Transaction securityIdType(String securityIdType) {
    
    
    
    
    this.securityIdType = securityIdType;
    return this;
  }

   /**
   * The security type. This field is related to the &#x60;securityId&#x60; field. Possible values: * \&quot;CUSIP\&quot;  * \&quot;ISIN\&quot;  * \&quot;SEDOL\&quot;  * \&quot;SICC\&quot;  * \&quot;VALOR\&quot;  * \&quot;WKN\&quot;
   * @return securityIdType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CUSIP", value = "The security type. This field is related to the `securityId` field. Possible values: * \"CUSIP\"  * \"ISIN\"  * \"SEDOL\"  * \"SICC\"  * \"VALOR\"  * \"WKN\"")

  public String getSecurityIdType() {
    return securityIdType;
  }


  public void setSecurityIdType(String securityIdType) {
    
    
    
    this.securityIdType = securityIdType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Transaction instance itself
   */
  public Transaction putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.description, transaction.description) &&
        Objects.equals(this.id, transaction.id) &&
        Objects.equals(this.amount, transaction.amount) &&
        Objects.equals(this.accountId, transaction.accountId) &&
        Objects.equals(this.customerId, transaction.customerId) &&
        Objects.equals(this.status, transaction.status) &&
        Objects.equals(this.memo, transaction.memo) &&
        Objects.equals(this.type, transaction.type) &&
        Objects.equals(this.transactionDate, transaction.transactionDate) &&
        Objects.equals(this.postedDate, transaction.postedDate) &&
        Objects.equals(this.createdDate, transaction.createdDate) &&
        Objects.equals(this.firstEffectiveDate, transaction.firstEffectiveDate) &&
        Objects.equals(this.effectiveDate, transaction.effectiveDate) &&
        Objects.equals(this.optionExpireDate, transaction.optionExpireDate) &&
        Objects.equals(this.checkNum, transaction.checkNum) &&
        Objects.equals(this.escrowAmount, transaction.escrowAmount) &&
        Objects.equals(this.feeAmount, transaction.feeAmount) &&
        Objects.equals(this.suspenseAmount, transaction.suspenseAmount) &&
        Objects.equals(this.interestAmount, transaction.interestAmount) &&
        Objects.equals(this.principalAmount, transaction.principalAmount) &&
        Objects.equals(this.optionStrikePrice, transaction.optionStrikePrice) &&
        Objects.equals(this.unitQuantity, transaction.unitQuantity) &&
        Objects.equals(this.unitPrice, transaction.unitPrice) &&
        Objects.equals(this.categorization, transaction.categorization) &&
        Objects.equals(this.runningBalanceAmount, transaction.runningBalanceAmount) &&
        Objects.equals(this.subaccountSecurityType, transaction.subaccountSecurityType) &&
        Objects.equals(this.commissionAmount, transaction.commissionAmount) &&
        Objects.equals(this.ticker, transaction.ticker) &&
        Objects.equals(this.investmentTransactionType, transaction.investmentTransactionType) &&
        Objects.equals(this.taxesAmount, transaction.taxesAmount) &&
        Objects.equals(this.currencySymbol, transaction.currencySymbol) &&
        Objects.equals(this.incomeType, transaction.incomeType) &&
        Objects.equals(this.splitDenominator, transaction.splitDenominator) &&
        Objects.equals(this.splitNumerator, transaction.splitNumerator) &&
        Objects.equals(this.sharesPerContract, transaction.sharesPerContract) &&
        Objects.equals(this.subAccountFund, transaction.subAccountFund) &&
        Objects.equals(this.securityId, transaction.securityId) &&
        Objects.equals(this.securityIdType, transaction.securityIdType)&&
        Objects.equals(this.additionalProperties, transaction.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, amount, accountId, customerId, status, memo, type, transactionDate, postedDate, createdDate, firstEffectiveDate, effectiveDate, optionExpireDate, checkNum, escrowAmount, feeAmount, suspenseAmount, interestAmount, principalAmount, optionStrikePrice, unitQuantity, unitPrice, categorization, runningBalanceAmount, subaccountSecurityType, commissionAmount, ticker, investmentTransactionType, taxesAmount, currencySymbol, incomeType, splitDenominator, splitNumerator, sharesPerContract, subAccountFund, securityId, securityIdType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    postedDate: ").append(toIndentedString(postedDate)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    firstEffectiveDate: ").append(toIndentedString(firstEffectiveDate)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    optionExpireDate: ").append(toIndentedString(optionExpireDate)).append("\n");
    sb.append("    checkNum: ").append(toIndentedString(checkNum)).append("\n");
    sb.append("    escrowAmount: ").append(toIndentedString(escrowAmount)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    suspenseAmount: ").append(toIndentedString(suspenseAmount)).append("\n");
    sb.append("    interestAmount: ").append(toIndentedString(interestAmount)).append("\n");
    sb.append("    principalAmount: ").append(toIndentedString(principalAmount)).append("\n");
    sb.append("    optionStrikePrice: ").append(toIndentedString(optionStrikePrice)).append("\n");
    sb.append("    unitQuantity: ").append(toIndentedString(unitQuantity)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    categorization: ").append(toIndentedString(categorization)).append("\n");
    sb.append("    runningBalanceAmount: ").append(toIndentedString(runningBalanceAmount)).append("\n");
    sb.append("    subaccountSecurityType: ").append(toIndentedString(subaccountSecurityType)).append("\n");
    sb.append("    commissionAmount: ").append(toIndentedString(commissionAmount)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    investmentTransactionType: ").append(toIndentedString(investmentTransactionType)).append("\n");
    sb.append("    taxesAmount: ").append(toIndentedString(taxesAmount)).append("\n");
    sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
    sb.append("    incomeType: ").append(toIndentedString(incomeType)).append("\n");
    sb.append("    splitDenominator: ").append(toIndentedString(splitDenominator)).append("\n");
    sb.append("    splitNumerator: ").append(toIndentedString(splitNumerator)).append("\n");
    sb.append("    sharesPerContract: ").append(toIndentedString(sharesPerContract)).append("\n");
    sb.append("    subAccountFund: ").append(toIndentedString(subAccountFund)).append("\n");
    sb.append("    securityId: ").append(toIndentedString(securityId)).append("\n");
    sb.append("    securityIdType: ").append(toIndentedString(securityIdType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("amount");
    openapiFields.add("accountId");
    openapiFields.add("customerId");
    openapiFields.add("status");
    openapiFields.add("memo");
    openapiFields.add("type");
    openapiFields.add("transactionDate");
    openapiFields.add("postedDate");
    openapiFields.add("createdDate");
    openapiFields.add("firstEffectiveDate");
    openapiFields.add("effectiveDate");
    openapiFields.add("optionExpireDate");
    openapiFields.add("checkNum");
    openapiFields.add("escrowAmount");
    openapiFields.add("feeAmount");
    openapiFields.add("suspenseAmount");
    openapiFields.add("interestAmount");
    openapiFields.add("principalAmount");
    openapiFields.add("optionStrikePrice");
    openapiFields.add("unitQuantity");
    openapiFields.add("unitPrice");
    openapiFields.add("categorization");
    openapiFields.add("runningBalanceAmount");
    openapiFields.add("subaccountSecurityType");
    openapiFields.add("commissionAmount");
    openapiFields.add("ticker");
    openapiFields.add("investmentTransactionType");
    openapiFields.add("taxesAmount");
    openapiFields.add("currencySymbol");
    openapiFields.add("incomeType");
    openapiFields.add("splitDenominator");
    openapiFields.add("splitNumerator");
    openapiFields.add("sharesPerContract");
    openapiFields.add("subAccountFund");
    openapiFields.add("securityId");
    openapiFields.add("securityIdType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("customerId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("createdDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Transaction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Transaction.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("checkNum") != null && !jsonObj.get("checkNum").isJsonNull()) && !jsonObj.get("checkNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkNum").toString()));
      }
      // validate the optional field `categorization`
      if (jsonObj.get("categorization") != null && !jsonObj.get("categorization").isJsonNull()) {
        Categorization.validateJsonObject(jsonObj.getAsJsonObject("categorization"));
      }
      if ((jsonObj.get("subaccountSecurityType") != null && !jsonObj.get("subaccountSecurityType").isJsonNull()) && !jsonObj.get("subaccountSecurityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountSecurityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountSecurityType").toString()));
      }
      if ((jsonObj.get("ticker") != null && !jsonObj.get("ticker").isJsonNull()) && !jsonObj.get("ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticker").toString()));
      }
      if ((jsonObj.get("investmentTransactionType") != null && !jsonObj.get("investmentTransactionType").isJsonNull()) && !jsonObj.get("investmentTransactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `investmentTransactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("investmentTransactionType").toString()));
      }
      if ((jsonObj.get("currencySymbol") != null && !jsonObj.get("currencySymbol").isJsonNull()) && !jsonObj.get("currencySymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencySymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencySymbol").toString()));
      }
      if ((jsonObj.get("incomeType") != null && !jsonObj.get("incomeType").isJsonNull()) && !jsonObj.get("incomeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incomeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incomeType").toString()));
      }
      if ((jsonObj.get("subAccountFund") != null && !jsonObj.get("subAccountFund").isJsonNull()) && !jsonObj.get("subAccountFund").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountFund` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountFund").toString()));
      }
      if ((jsonObj.get("securityId") != null && !jsonObj.get("securityId").isJsonNull()) && !jsonObj.get("securityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityId").toString()));
      }
      if ((jsonObj.get("securityIdType") != null && !jsonObj.get("securityIdType").isJsonNull()) && !jsonObj.get("securityIdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityIdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityIdType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction>() {
           @Override
           public void write(JsonWriter out, Transaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Transaction instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Transaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Transaction
  * @throws IOException if the JSON string is invalid with respect to Transaction
  */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

 /**
  * Convert an instance of Transaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

