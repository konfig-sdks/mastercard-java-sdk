/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MainPayStatementFields
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MainPayStatementFields {
  public static final String SERIALIZED_NAME_PAY_DATE = "payDate";
  @SerializedName(SERIALIZED_NAME_PAY_DATE)
  private Long payDate;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Long startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Long endDate;

  public static final String SERIALIZED_NAME_PAY_PERIOD_HOURS = "payPeriodHours";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD_HOURS)
  private Double payPeriodHours;

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "payFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private String payFrequency;

  public static final String SERIALIZED_NAME_PAY_TYPE = "payType";
  @SerializedName(SERIALIZED_NAME_PAY_TYPE)
  private String payType;

  public static final String SERIALIZED_NAME_GROSS_PAY_AMOUNT = "grossPayAmount";
  @SerializedName(SERIALIZED_NAME_GROSS_PAY_AMOUNT)
  private Double grossPayAmount;

  public static final String SERIALIZED_NAME_GROSS_PAY_AMOUNT_Y_T_D = "grossPayAmountYTD";
  @SerializedName(SERIALIZED_NAME_GROSS_PAY_AMOUNT_Y_T_D)
  private Double grossPayAmountYTD;

  public static final String SERIALIZED_NAME_NET_PAY_AMOUNT = "netPayAmount";
  @SerializedName(SERIALIZED_NAME_NET_PAY_AMOUNT)
  private Double netPayAmount;

  public static final String SERIALIZED_NAME_NET_PAY_AMOUNT_Y_T_D = "netPayAmountYTD";
  @SerializedName(SERIALIZED_NAME_NET_PAY_AMOUNT_Y_T_D)
  private Double netPayAmountYTD;

  public MainPayStatementFields() {
  }

  public MainPayStatementFields payDate(Long payDate) {
    
    
    
    
    this.payDate = payDate;
    return this;
  }

   /**
   * Pay date for the pay period
   * @return payDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1607450357", required = true, value = "Pay date for the pay period")

  public Long getPayDate() {
    return payDate;
  }


  public void setPayDate(Long payDate) {
    
    
    
    this.payDate = payDate;
  }


  public MainPayStatementFields startDate(Long startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date for the pay period
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "Start date for the pay period")

  public Long getStartDate() {
    return startDate;
  }


  public void setStartDate(Long startDate) {
    
    
    
    this.startDate = startDate;
  }


  public MainPayStatementFields endDate(Long endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date for the pay period
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1607450357", value = "End date for the pay period")

  public Long getEndDate() {
    return endDate;
  }


  public void setEndDate(Long endDate) {
    
    
    
    this.endDate = endDate;
  }


  public MainPayStatementFields payPeriodHours(Double payPeriodHours) {
    
    
    
    
    this.payPeriodHours = payPeriodHours;
    return this;
  }

  public MainPayStatementFields payPeriodHours(Integer payPeriodHours) {
    
    
    
    
    this.payPeriodHours = payPeriodHours.doubleValue();
    return this;
  }

   /**
   * Sum of all hours worked each week for the pay period
   * @return payPeriodHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "39.75", value = "Sum of all hours worked each week for the pay period")

  public Double getPayPeriodHours() {
    return payPeriodHours;
  }


  public void setPayPeriodHours(Double payPeriodHours) {
    
    
    
    this.payPeriodHours = payPeriodHours;
  }


  public MainPayStatementFields payFrequency(String payFrequency) {
    
    
    
    
    this.payFrequency = payFrequency;
    return this;
  }

   /**
   * The current pay frequency, or how often a regular pay check is distributed:  * &#x60;Daily&#x60;  * &#x60;Weekly&#x60;  * &#x60;Bi-Weekly&#x60;  * &#x60;Semi-Monthly&#x60;  * &#x60;Monthly&#x60;  * &#x60;Quarterly&#x60;  * &#x60;Semi-Annual&#x60;  * &#x60;Annual&#x60;  * &#x60;Every 2.6 wks&#x60;  * &#x60;Every 4 wks&#x60;  * &#x60;Every 5.2 wks&#x60;  * &#x60;Other&#x60; 
   * @return payFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Weekly", value = "The current pay frequency, or how often a regular pay check is distributed:  * `Daily`  * `Weekly`  * `Bi-Weekly`  * `Semi-Monthly`  * `Monthly`  * `Quarterly`  * `Semi-Annual`  * `Annual`  * `Every 2.6 wks`  * `Every 4 wks`  * `Every 5.2 wks`  * `Other` ")

  public String getPayFrequency() {
    return payFrequency;
  }


  public void setPayFrequency(String payFrequency) {
    
    
    
    this.payFrequency = payFrequency;
  }


  public MainPayStatementFields payType(String payType) {
    
    
    
    
    this.payType = payType;
    return this;
  }

   /**
   * Current pay type:  * &#x60;Salary&#x60;  * &#x60;Hourly&#x60;  * &#x60;Daily&#x60; 
   * @return payType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hourly", value = "Current pay type:  * `Salary`  * `Hourly`  * `Daily` ")

  public String getPayType() {
    return payType;
  }


  public void setPayType(String payType) {
    
    
    
    this.payType = payType;
  }


  public MainPayStatementFields grossPayAmount(Double grossPayAmount) {
    
    
    
    
    this.grossPayAmount = grossPayAmount;
    return this;
  }

  public MainPayStatementFields grossPayAmount(Integer grossPayAmount) {
    
    
    
    
    this.grossPayAmount = grossPayAmount.doubleValue();
    return this;
  }

   /**
   * Gross pay amount for the pay period
   * @return grossPayAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "755.25", required = true, value = "Gross pay amount for the pay period")

  public Double getGrossPayAmount() {
    return grossPayAmount;
  }


  public void setGrossPayAmount(Double grossPayAmount) {
    
    
    
    this.grossPayAmount = grossPayAmount;
  }


  public MainPayStatementFields grossPayAmountYTD(Double grossPayAmountYTD) {
    
    
    
    
    this.grossPayAmountYTD = grossPayAmountYTD;
    return this;
  }

  public MainPayStatementFields grossPayAmountYTD(Integer grossPayAmountYTD) {
    
    
    
    
    this.grossPayAmountYTD = grossPayAmountYTD.doubleValue();
    return this;
  }

   /**
   * Year to date (YTD) gross pay amount at the time of payment
   * @return grossPayAmountYTD
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4256", value = "Year to date (YTD) gross pay amount at the time of payment")

  public Double getGrossPayAmountYTD() {
    return grossPayAmountYTD;
  }


  public void setGrossPayAmountYTD(Double grossPayAmountYTD) {
    
    
    
    this.grossPayAmountYTD = grossPayAmountYTD;
  }


  public MainPayStatementFields netPayAmount(Double netPayAmount) {
    
    
    
    
    this.netPayAmount = netPayAmount;
    return this;
  }

  public MainPayStatementFields netPayAmount(Integer netPayAmount) {
    
    
    
    
    this.netPayAmount = netPayAmount.doubleValue();
    return this;
  }

   /**
   * Net pay amount for a pay period
   * @return netPayAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "608.77", value = "Net pay amount for a pay period")

  public Double getNetPayAmount() {
    return netPayAmount;
  }


  public void setNetPayAmount(Double netPayAmount) {
    
    
    
    this.netPayAmount = netPayAmount;
  }


  public MainPayStatementFields netPayAmountYTD(Double netPayAmountYTD) {
    
    
    
    
    this.netPayAmountYTD = netPayAmountYTD;
    return this;
  }

  public MainPayStatementFields netPayAmountYTD(Integer netPayAmountYTD) {
    
    
    
    
    this.netPayAmountYTD = netPayAmountYTD.doubleValue();
    return this;
  }

   /**
   * Year to date (YTD) net pay amount at the time of payment
   * @return netPayAmountYTD
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2345.99", value = "Year to date (YTD) net pay amount at the time of payment")

  public Double getNetPayAmountYTD() {
    return netPayAmountYTD;
  }


  public void setNetPayAmountYTD(Double netPayAmountYTD) {
    
    
    
    this.netPayAmountYTD = netPayAmountYTD;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MainPayStatementFields instance itself
   */
  public MainPayStatementFields putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainPayStatementFields mainPayStatementFields = (MainPayStatementFields) o;
    return Objects.equals(this.payDate, mainPayStatementFields.payDate) &&
        Objects.equals(this.startDate, mainPayStatementFields.startDate) &&
        Objects.equals(this.endDate, mainPayStatementFields.endDate) &&
        Objects.equals(this.payPeriodHours, mainPayStatementFields.payPeriodHours) &&
        Objects.equals(this.payFrequency, mainPayStatementFields.payFrequency) &&
        Objects.equals(this.payType, mainPayStatementFields.payType) &&
        Objects.equals(this.grossPayAmount, mainPayStatementFields.grossPayAmount) &&
        Objects.equals(this.grossPayAmountYTD, mainPayStatementFields.grossPayAmountYTD) &&
        Objects.equals(this.netPayAmount, mainPayStatementFields.netPayAmount) &&
        Objects.equals(this.netPayAmountYTD, mainPayStatementFields.netPayAmountYTD)&&
        Objects.equals(this.additionalProperties, mainPayStatementFields.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payDate, startDate, endDate, payPeriodHours, payFrequency, payType, grossPayAmount, grossPayAmountYTD, netPayAmount, netPayAmountYTD, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainPayStatementFields {\n");
    sb.append("    payDate: ").append(toIndentedString(payDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    payPeriodHours: ").append(toIndentedString(payPeriodHours)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    payType: ").append(toIndentedString(payType)).append("\n");
    sb.append("    grossPayAmount: ").append(toIndentedString(grossPayAmount)).append("\n");
    sb.append("    grossPayAmountYTD: ").append(toIndentedString(grossPayAmountYTD)).append("\n");
    sb.append("    netPayAmount: ").append(toIndentedString(netPayAmount)).append("\n");
    sb.append("    netPayAmountYTD: ").append(toIndentedString(netPayAmountYTD)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payDate");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("payPeriodHours");
    openapiFields.add("payFrequency");
    openapiFields.add("payType");
    openapiFields.add("grossPayAmount");
    openapiFields.add("grossPayAmountYTD");
    openapiFields.add("netPayAmount");
    openapiFields.add("netPayAmountYTD");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("payDate");
    openapiRequiredFields.add("grossPayAmount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MainPayStatementFields
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MainPayStatementFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MainPayStatementFields is not found in the empty JSON string", MainPayStatementFields.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MainPayStatementFields.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("payFrequency") != null && !jsonObj.get("payFrequency").isJsonNull()) && !jsonObj.get("payFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payFrequency").toString()));
      }
      if ((jsonObj.get("payType") != null && !jsonObj.get("payType").isJsonNull()) && !jsonObj.get("payType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MainPayStatementFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MainPayStatementFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MainPayStatementFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MainPayStatementFields.class));

       return (TypeAdapter<T>) new TypeAdapter<MainPayStatementFields>() {
           @Override
           public void write(JsonWriter out, MainPayStatementFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MainPayStatementFields read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MainPayStatementFields instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MainPayStatementFields given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MainPayStatementFields
  * @throws IOException if the JSON string is invalid with respect to MainPayStatementFields
  */
  public static MainPayStatementFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MainPayStatementFields.class);
  }

 /**
  * Convert an instance of MainPayStatementFields to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

