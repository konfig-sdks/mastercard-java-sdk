/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AnnualIncome;
import com.konfigthis.client.model.DirectPayStatements;
import com.konfigthis.client.model.MonthlyIncome;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PayrollVOIEIncomeRecord
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayrollVOIEIncomeRecord {
  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "payFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private String payFrequency;

  public static final String SERIALIZED_NAME_PAY_TYPE = "payType";
  @SerializedName(SERIALIZED_NAME_PAY_TYPE)
  private String payType;

  public static final String SERIALIZED_NAME_BASE_PAY_RATE = "basePayRate";
  @SerializedName(SERIALIZED_NAME_BASE_PAY_RATE)
  private Double basePayRate;

  public static final String SERIALIZED_NAME_BASE_PAY_RATE_UNIT = "basePayRateUnit";
  @SerializedName(SERIALIZED_NAME_BASE_PAY_RATE_UNIT)
  private String basePayRateUnit;

  public static final String SERIALIZED_NAME_OLDEST_PAY_STATEMENT_AVAILABLE = "oldestPayStatementAvailable";
  @SerializedName(SERIALIZED_NAME_OLDEST_PAY_STATEMENT_AVAILABLE)
  private String oldestPayStatementAvailable;

  public static final String SERIALIZED_NAME_ANNUAL_INCOME = "annualIncome";
  @SerializedName(SERIALIZED_NAME_ANNUAL_INCOME)
  private List<AnnualIncome> annualIncome = null;

  public static final String SERIALIZED_NAME_MONTHLY_INCOME = "monthlyIncome";
  @SerializedName(SERIALIZED_NAME_MONTHLY_INCOME)
  private MonthlyIncome monthlyIncome;

  public static final String SERIALIZED_NAME_DIRECT_PAY_STATEMENTS = "directPayStatements";
  @SerializedName(SERIALIZED_NAME_DIRECT_PAY_STATEMENTS)
  private List<DirectPayStatements> directPayStatements = null;

  public PayrollVOIEIncomeRecord() {
  }

  public PayrollVOIEIncomeRecord payFrequency(String payFrequency) {
    
    
    
    
    this.payFrequency = payFrequency;
    return this;
  }

   /**
   * The current pay frequency or how often a regular pay check is:  * &#x60;Daily&#x60;  * &#x60;Weekly&#x60;  * &#x60;Bi-Weekly&#x60;  * &#x60;Semi-Monthly&#x60;  * &#x60;Monthly&#x60;  * &#x60;Quarterly&#x60;  * &#x60;Semi-Annual&#x60;  * &#x60;Annual&#x60;  * &#x60;Every 2.6 wks&#x60;  * &#x60;Every 4 wks&#x60;  * &#x60;Every 5.2 wks&#x60;  * &#x60;Other&#x60; 
   * @return payFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Weekly", value = "The current pay frequency or how often a regular pay check is:  * `Daily`  * `Weekly`  * `Bi-Weekly`  * `Semi-Monthly`  * `Monthly`  * `Quarterly`  * `Semi-Annual`  * `Annual`  * `Every 2.6 wks`  * `Every 4 wks`  * `Every 5.2 wks`  * `Other` ")

  public String getPayFrequency() {
    return payFrequency;
  }


  public void setPayFrequency(String payFrequency) {
    
    
    
    this.payFrequency = payFrequency;
  }


  public PayrollVOIEIncomeRecord payType(String payType) {
    
    
    
    
    this.payType = payType;
    return this;
  }

   /**
   * The current pay type:  * &#x60;Salary&#x60;  * &#x60;Hourly&#x60;  * &#x60;Daily&#x60; 
   * @return payType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Daily", value = "The current pay type:  * `Salary`  * `Hourly`  * `Daily` ")

  public String getPayType() {
    return payType;
  }


  public void setPayType(String payType) {
    
    
    
    this.payType = payType;
  }


  public PayrollVOIEIncomeRecord basePayRate(Double basePayRate) {
    
    
    
    
    this.basePayRate = basePayRate;
    return this;
  }

  public PayrollVOIEIncomeRecord basePayRate(Integer basePayRate) {
    
    
    
    
    this.basePayRate = basePayRate.doubleValue();
    return this;
  }

   /**
   * The current base or regular pay rate. Please use in conjunction with the &#x60;basePayRateUnit&#x60; field.
   * @return basePayRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234.56", value = "The current base or regular pay rate. Please use in conjunction with the `basePayRateUnit` field.")

  public Double getBasePayRate() {
    return basePayRate;
  }


  public void setBasePayRate(Double basePayRate) {
    
    
    
    this.basePayRate = basePayRate;
  }


  public PayrollVOIEIncomeRecord basePayRateUnit(String basePayRateUnit) {
    
    
    
    
    this.basePayRateUnit = basePayRateUnit;
    return this;
  }

   /**
   * Unit for the base pay rate:  * &#x60;Hourly&#x60;  * &#x60;Daily&#x60;  * &#x60;Weekly&#x60;  * &#x60;Bi-Weekly&#x60;  * &#x60;Semi-Monthly&#x60;  * &#x60;Monthly&#x60;  * &#x60;Quarterly&#x60;  * &#x60;Semi-Annual&#x60;  * &#x60;Annual&#x60;  * &#x60;Every 2.6 wks&#x60;  * &#x60;Every 5.2 wks&#x60;  * &#x60;Other&#x60; 
   * @return basePayRateUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Annual", value = "Unit for the base pay rate:  * `Hourly`  * `Daily`  * `Weekly`  * `Bi-Weekly`  * `Semi-Monthly`  * `Monthly`  * `Quarterly`  * `Semi-Annual`  * `Annual`  * `Every 2.6 wks`  * `Every 5.2 wks`  * `Other` ")

  public String getBasePayRateUnit() {
    return basePayRateUnit;
  }


  public void setBasePayRateUnit(String basePayRateUnit) {
    
    
    
    this.basePayRateUnit = basePayRateUnit;
  }


  public PayrollVOIEIncomeRecord oldestPayStatementAvailable(String oldestPayStatementAvailable) {
    
    
    
    
    this.oldestPayStatementAvailable = oldestPayStatementAvailable;
    return this;
  }

   /**
   * The date of the oldest direct pay statement available from the payroll source, as measured by the oldest &#x60;payDate&#x60; from all the pay statements delivered.
   * @return oldestPayStatementAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1527832900", value = "The date of the oldest direct pay statement available from the payroll source, as measured by the oldest `payDate` from all the pay statements delivered.")

  public String getOldestPayStatementAvailable() {
    return oldestPayStatementAvailable;
  }


  public void setOldestPayStatementAvailable(String oldestPayStatementAvailable) {
    
    
    
    this.oldestPayStatementAvailable = oldestPayStatementAvailable;
  }


  public PayrollVOIEIncomeRecord annualIncome(List<AnnualIncome> annualIncome) {
    
    
    
    
    this.annualIncome = annualIncome;
    return this;
  }

  public PayrollVOIEIncomeRecord addAnnualIncomeItem(AnnualIncome annualIncomeItem) {
    if (this.annualIncome == null) {
      this.annualIncome = new ArrayList<>();
    }
    this.annualIncome.add(annualIncomeItem);
    return this;
  }

   /**
   * The annual pay for the current year, through prior year 2 (as available)  This is a mandatory field only for VOIE-payroll report type.
   * @return annualIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The annual pay for the current year, through prior year 2 (as available)  This is a mandatory field only for VOIE-payroll report type.")

  public List<AnnualIncome> getAnnualIncome() {
    return annualIncome;
  }


  public void setAnnualIncome(List<AnnualIncome> annualIncome) {
    
    
    
    this.annualIncome = annualIncome;
  }


  public PayrollVOIEIncomeRecord monthlyIncome(MonthlyIncome monthlyIncome) {
    
    
    
    
    this.monthlyIncome = monthlyIncome;
    return this;
  }

   /**
   * Get monthlyIncome
   * @return monthlyIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MonthlyIncome getMonthlyIncome() {
    return monthlyIncome;
  }


  public void setMonthlyIncome(MonthlyIncome monthlyIncome) {
    
    
    
    this.monthlyIncome = monthlyIncome;
  }


  public PayrollVOIEIncomeRecord directPayStatements(List<DirectPayStatements> directPayStatements) {
    
    
    
    
    this.directPayStatements = directPayStatements;
    return this;
  }

  public PayrollVOIEIncomeRecord addDirectPayStatementsItem(DirectPayStatements directPayStatementsItem) {
    if (this.directPayStatements == null) {
      this.directPayStatements = new ArrayList<>();
    }
    this.directPayStatements.add(directPayStatementsItem);
    return this;
  }

   /**
   * An array of payment histories for each available paycheck
   * @return directPayStatements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of payment histories for each available paycheck")

  public List<DirectPayStatements> getDirectPayStatements() {
    return directPayStatements;
  }


  public void setDirectPayStatements(List<DirectPayStatements> directPayStatements) {
    
    
    
    this.directPayStatements = directPayStatements;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayrollVOIEIncomeRecord instance itself
   */
  public PayrollVOIEIncomeRecord putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayrollVOIEIncomeRecord payrollVOIEIncomeRecord = (PayrollVOIEIncomeRecord) o;
    return Objects.equals(this.payFrequency, payrollVOIEIncomeRecord.payFrequency) &&
        Objects.equals(this.payType, payrollVOIEIncomeRecord.payType) &&
        Objects.equals(this.basePayRate, payrollVOIEIncomeRecord.basePayRate) &&
        Objects.equals(this.basePayRateUnit, payrollVOIEIncomeRecord.basePayRateUnit) &&
        Objects.equals(this.oldestPayStatementAvailable, payrollVOIEIncomeRecord.oldestPayStatementAvailable) &&
        Objects.equals(this.annualIncome, payrollVOIEIncomeRecord.annualIncome) &&
        Objects.equals(this.monthlyIncome, payrollVOIEIncomeRecord.monthlyIncome) &&
        Objects.equals(this.directPayStatements, payrollVOIEIncomeRecord.directPayStatements)&&
        Objects.equals(this.additionalProperties, payrollVOIEIncomeRecord.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payFrequency, payType, basePayRate, basePayRateUnit, oldestPayStatementAvailable, annualIncome, monthlyIncome, directPayStatements, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayrollVOIEIncomeRecord {\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    payType: ").append(toIndentedString(payType)).append("\n");
    sb.append("    basePayRate: ").append(toIndentedString(basePayRate)).append("\n");
    sb.append("    basePayRateUnit: ").append(toIndentedString(basePayRateUnit)).append("\n");
    sb.append("    oldestPayStatementAvailable: ").append(toIndentedString(oldestPayStatementAvailable)).append("\n");
    sb.append("    annualIncome: ").append(toIndentedString(annualIncome)).append("\n");
    sb.append("    monthlyIncome: ").append(toIndentedString(monthlyIncome)).append("\n");
    sb.append("    directPayStatements: ").append(toIndentedString(directPayStatements)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payFrequency");
    openapiFields.add("payType");
    openapiFields.add("basePayRate");
    openapiFields.add("basePayRateUnit");
    openapiFields.add("oldestPayStatementAvailable");
    openapiFields.add("annualIncome");
    openapiFields.add("monthlyIncome");
    openapiFields.add("directPayStatements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayrollVOIEIncomeRecord
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayrollVOIEIncomeRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayrollVOIEIncomeRecord is not found in the empty JSON string", PayrollVOIEIncomeRecord.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payFrequency") != null && !jsonObj.get("payFrequency").isJsonNull()) && !jsonObj.get("payFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payFrequency").toString()));
      }
      if ((jsonObj.get("payType") != null && !jsonObj.get("payType").isJsonNull()) && !jsonObj.get("payType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payType").toString()));
      }
      if ((jsonObj.get("basePayRateUnit") != null && !jsonObj.get("basePayRateUnit").isJsonNull()) && !jsonObj.get("basePayRateUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basePayRateUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basePayRateUnit").toString()));
      }
      if ((jsonObj.get("oldestPayStatementAvailable") != null && !jsonObj.get("oldestPayStatementAvailable").isJsonNull()) && !jsonObj.get("oldestPayStatementAvailable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldestPayStatementAvailable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldestPayStatementAvailable").toString()));
      }
      if (jsonObj.get("annualIncome") != null && !jsonObj.get("annualIncome").isJsonNull()) {
        JsonArray jsonArrayannualIncome = jsonObj.getAsJsonArray("annualIncome");
        if (jsonArrayannualIncome != null) {
          // ensure the json data is an array
          if (!jsonObj.get("annualIncome").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `annualIncome` to be an array in the JSON string but got `%s`", jsonObj.get("annualIncome").toString()));
          }

          // validate the optional field `annualIncome` (array)
          for (int i = 0; i < jsonArrayannualIncome.size(); i++) {
            AnnualIncome.validateJsonObject(jsonArrayannualIncome.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `monthlyIncome`
      if (jsonObj.get("monthlyIncome") != null && !jsonObj.get("monthlyIncome").isJsonNull()) {
        MonthlyIncome.validateJsonObject(jsonObj.getAsJsonObject("monthlyIncome"));
      }
      if (jsonObj.get("directPayStatements") != null && !jsonObj.get("directPayStatements").isJsonNull()) {
        JsonArray jsonArraydirectPayStatements = jsonObj.getAsJsonArray("directPayStatements");
        if (jsonArraydirectPayStatements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("directPayStatements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `directPayStatements` to be an array in the JSON string but got `%s`", jsonObj.get("directPayStatements").toString()));
          }

          // validate the optional field `directPayStatements` (array)
          for (int i = 0; i < jsonArraydirectPayStatements.size(); i++) {
            DirectPayStatements.validateJsonObject(jsonArraydirectPayStatements.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayrollVOIEIncomeRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayrollVOIEIncomeRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayrollVOIEIncomeRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayrollVOIEIncomeRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<PayrollVOIEIncomeRecord>() {
           @Override
           public void write(JsonWriter out, PayrollVOIEIncomeRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayrollVOIEIncomeRecord read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayrollVOIEIncomeRecord instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayrollVOIEIncomeRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayrollVOIEIncomeRecord
  * @throws IOException if the JSON string is invalid with respect to PayrollVOIEIncomeRecord
  */
  public static PayrollVOIEIncomeRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayrollVOIEIncomeRecord.class);
  }

 /**
  * Convert an instance of PayrollVOIEIncomeRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

