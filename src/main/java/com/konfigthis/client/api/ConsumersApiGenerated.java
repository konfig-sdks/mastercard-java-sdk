/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Birthday;
import com.konfigthis.client.model.Consumer;
import com.konfigthis.client.model.ConsumerUpdate;
import com.konfigthis.client.model.CreatedConsumer;
import com.konfigthis.client.model.NewConsumer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConsumersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConsumersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConsumersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createConsumerRecordCall(String customerId, NewConsumer newConsumer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newConsumer;

        // create path and map variables
        String localVarPath = "/decisioning/v1/customers/{customerId}/consumer"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConsumerRecordValidateBeforeCall(String customerId, NewConsumer newConsumer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling createConsumerRecord(Async)");
        }

        // verify the required parameter 'newConsumer' is set
        if (newConsumer == null) {
            throw new ApiException("Missing the required parameter 'newConsumer' when calling createConsumerRecord(Async)");
        }

        return createConsumerRecordCall(customerId, newConsumer, _callback);

    }


    private ApiResponse<CreatedConsumer> createConsumerRecordWithHttpInfo(String customerId, NewConsumer newConsumer) throws ApiException {
        okhttp3.Call localVarCall = createConsumerRecordValidateBeforeCall(customerId, newConsumer, null);
        Type localVarReturnType = new TypeToken<CreatedConsumer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createConsumerRecordAsync(String customerId, NewConsumer newConsumer, final ApiCallback<CreatedConsumer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConsumerRecordValidateBeforeCall(customerId, newConsumer, _callback);
        Type localVarReturnType = new TypeToken<CreatedConsumer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateConsumerRecordRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final String address;
        private final String city;
        private final String state;
        private final String zip;
        private final String phone;
        private final String ssn;
        private final Birthday birthday;
        private final String customerId;
        private String email;
        private String suffix;

        private CreateConsumerRecordRequestBuilder(String firstName, String lastName, String address, String city, String state, String zip, String phone, String ssn, Birthday birthday, String customerId) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.address = address;
            this.city = city;
            this.state = state;
            this.zip = zip;
            this.phone = phone;
            this.ssn = ssn;
            this.birthday = birthday;
            this.customerId = customerId;
        }

        /**
         * Set email
         * @param email An email address (optional)
         * @return CreateConsumerRecordRequestBuilder
         */
        public CreateConsumerRecordRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set suffix
         * @param suffix A generational or academic suffix (optional)
         * @return CreateConsumerRecordRequestBuilder
         */
        public CreateConsumerRecordRequestBuilder suffix(String suffix) {
            this.suffix = suffix;
            return this;
        }
        
        /**
         * Build call for createConsumerRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The consumer was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewConsumer newConsumer = buildBodyParams();
            return createConsumerRecordCall(customerId, newConsumer, _callback);
        }

        private NewConsumer buildBodyParams() {
            NewConsumer newConsumer = new NewConsumer();
            newConsumer.firstName(this.firstName);
            newConsumer.lastName(this.lastName);
            newConsumer.address(this.address);
            newConsumer.city(this.city);
            newConsumer.state(this.state);
            newConsumer.zip(this.zip);
            newConsumer.phone(this.phone);
            newConsumer.ssn(this.ssn);
            newConsumer.birthday(this.birthday);
            newConsumer.email(this.email);
            newConsumer.suffix(this.suffix);
            return newConsumer;
        }

        /**
         * Execute createConsumerRecord request
         * @return CreatedConsumer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The consumer was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public CreatedConsumer execute() throws ApiException {
            NewConsumer newConsumer = buildBodyParams();
            ApiResponse<CreatedConsumer> localVarResp = createConsumerRecordWithHttpInfo(customerId, newConsumer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createConsumerRecord request with HTTP info returned
         * @return ApiResponse&lt;CreatedConsumer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The consumer was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreatedConsumer> executeWithHttpInfo() throws ApiException {
            NewConsumer newConsumer = buildBodyParams();
            return createConsumerRecordWithHttpInfo(customerId, newConsumer);
        }

        /**
         * Execute createConsumerRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The consumer was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreatedConsumer> _callback) throws ApiException {
            NewConsumer newConsumer = buildBodyParams();
            return createConsumerRecordAsync(customerId, newConsumer, _callback);
        }
    }

    /**
     * Create Consumer
     * Create a consumer record associated with the given customer. A consumer persists as the owner of any reports that are generated, even after the original customer is deleted from the system.  A consumer must be created for the given customer before calling any of the Generate Report services.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param newConsumer  (required)
     * @return CreateConsumerRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The consumer was successfully created </td><td>  -  </td></tr>
     </table>
     */
    public CreateConsumerRecordRequestBuilder createConsumerRecord(String firstName, String lastName, String address, String city, String state, String zip, String phone, String ssn, Birthday birthday, String customerId) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (address == null) throw new IllegalArgumentException("\"address\" is required but got null");
            

        if (city == null) throw new IllegalArgumentException("\"city\" is required but got null");
            

        if (state == null) throw new IllegalArgumentException("\"state\" is required but got null");
            

        if (zip == null) throw new IllegalArgumentException("\"zip\" is required but got null");
            

        if (phone == null) throw new IllegalArgumentException("\"phone\" is required but got null");
            

        if (ssn == null) throw new IllegalArgumentException("\"ssn\" is required but got null");
            

        if (birthday == null) throw new IllegalArgumentException("\"birthday\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new CreateConsumerRecordRequestBuilder(firstName, lastName, address, city, state, zip, phone, ssn, birthday, customerId);
    }
    private okhttp3.Call getByCustomerIdCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisioning/v1/customers/{customerId}/consumer"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByCustomerIdValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getByCustomerId(Async)");
        }

        return getByCustomerIdCall(customerId, _callback);

    }


    private ApiResponse<Consumer> getByCustomerIdWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getByCustomerIdValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<Consumer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByCustomerIdAsync(String customerId, final ApiCallback<Consumer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByCustomerIdValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<Consumer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByCustomerIdRequestBuilder {
        private final String customerId;

        private GetByCustomerIdRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for getByCustomerId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The consumer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByCustomerIdCall(customerId, _callback);
        }


        /**
         * Execute getByCustomerId request
         * @return Consumer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The consumer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public Consumer execute() throws ApiException {
            ApiResponse<Consumer> localVarResp = getByCustomerIdWithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByCustomerId request with HTTP info returned
         * @return ApiResponse&lt;Consumer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The consumer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Consumer> executeWithHttpInfo() throws ApiException {
            return getByCustomerIdWithHttpInfo(customerId);
        }

        /**
         * Execute getByCustomerId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The consumer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Consumer> _callback) throws ApiException {
            return getByCustomerIdAsync(customerId, _callback);
        }
    }

    /**
     * Get Consumer For Customer
     * Get the details of a consumer record by customer ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return GetByCustomerIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The consumer was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetByCustomerIdRequestBuilder getByCustomerId(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetByCustomerIdRequestBuilder(customerId);
    }
    private okhttp3.Call getByIdCall(String consumerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisioning/v1/consumers/{consumerId}"
            .replace("{" + "consumerId" + "}", localVarApiClient.escapeString(consumerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String consumerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerId' is set
        if (consumerId == null) {
            throw new ApiException("Missing the required parameter 'consumerId' when calling getById(Async)");
        }

        return getByIdCall(consumerId, _callback);

    }


    private ApiResponse<Consumer> getByIdWithHttpInfo(String consumerId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(consumerId, null);
        Type localVarReturnType = new TypeToken<Consumer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String consumerId, final ApiCallback<Consumer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(consumerId, _callback);
        Type localVarReturnType = new TypeToken<Consumer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String consumerId;

        private GetByIdRequestBuilder(String consumerId) {
            this.consumerId = consumerId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The consumer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(consumerId, _callback);
        }


        /**
         * Execute getById request
         * @return Consumer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The consumer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public Consumer execute() throws ApiException {
            ApiResponse<Consumer> localVarResp = getByIdWithHttpInfo(consumerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Consumer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The consumer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Consumer> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(consumerId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The consumer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Consumer> _callback) throws ApiException {
            return getByIdAsync(consumerId, _callback);
        }
    }

    /**
     * Get Consumer by ID
     * Get the details of a consumer record by consumer ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param consumerId The consumer ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The consumer was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String consumerId) throws IllegalArgumentException {
        if (consumerId == null) throw new IllegalArgumentException("\"consumerId\" is required but got null");
            

        return new GetByIdRequestBuilder(consumerId);
    }
    private okhttp3.Call modifyByIdCall(String consumerId, ConsumerUpdate consumerUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consumerUpdate;

        // create path and map variables
        String localVarPath = "/decisioning/v1/consumers/{consumerId}"
            .replace("{" + "consumerId" + "}", localVarApiClient.escapeString(consumerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyByIdValidateBeforeCall(String consumerId, ConsumerUpdate consumerUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerId' is set
        if (consumerId == null) {
            throw new ApiException("Missing the required parameter 'consumerId' when calling modifyById(Async)");
        }

        // verify the required parameter 'consumerUpdate' is set
        if (consumerUpdate == null) {
            throw new ApiException("Missing the required parameter 'consumerUpdate' when calling modifyById(Async)");
        }

        return modifyByIdCall(consumerId, consumerUpdate, _callback);

    }


    private ApiResponse<Void> modifyByIdWithHttpInfo(String consumerId, ConsumerUpdate consumerUpdate) throws ApiException {
        okhttp3.Call localVarCall = modifyByIdValidateBeforeCall(consumerId, consumerUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call modifyByIdAsync(String consumerId, ConsumerUpdate consumerUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyByIdValidateBeforeCall(consumerId, consumerUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ModifyByIdRequestBuilder {
        private final String consumerId;
        private String firstName;
        private String lastName;
        private String address;
        private String city;
        private String state;
        private String zip;
        private String phone;
        private String ssn;
        private Birthday birthday;
        private String email;
        private String suffix;

        private ModifyByIdRequestBuilder(String consumerId) {
            this.consumerId = consumerId;
        }

        /**
         * Set firstName
         * @param firstName The first name of the account holder (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name of the account holder (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set address
         * @param address A street address (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set city
         * @param city City (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state State (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip A ZIP code (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set phone
         * @param phone A phone number (max length 15). (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn A full SSN with or without hyphens (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set birthday
         * @param birthday  (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder birthday(Birthday birthday) {
            this.birthday = birthday;
            return this;
        }
        
        /**
         * Set email
         * @param email An email address (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set suffix
         * @param suffix A generational or academic suffix (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder suffix(String suffix) {
            this.suffix = suffix;
            return this;
        }
        
        /**
         * Build call for modifyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The consumer was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConsumerUpdate consumerUpdate = buildBodyParams();
            return modifyByIdCall(consumerId, consumerUpdate, _callback);
        }

        private ConsumerUpdate buildBodyParams() {
            ConsumerUpdate consumerUpdate = new ConsumerUpdate();
            consumerUpdate.firstName(this.firstName);
            consumerUpdate.lastName(this.lastName);
            consumerUpdate.address(this.address);
            consumerUpdate.city(this.city);
            consumerUpdate.state(this.state);
            consumerUpdate.zip(this.zip);
            consumerUpdate.phone(this.phone);
            consumerUpdate.ssn(this.ssn);
            consumerUpdate.birthday(this.birthday);
            consumerUpdate.email(this.email);
            consumerUpdate.suffix(this.suffix);
            return consumerUpdate;
        }

        /**
         * Execute modifyById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The consumer was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ConsumerUpdate consumerUpdate = buildBodyParams();
            modifyByIdWithHttpInfo(consumerId, consumerUpdate);
        }

        /**
         * Execute modifyById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The consumer was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ConsumerUpdate consumerUpdate = buildBodyParams();
            return modifyByIdWithHttpInfo(consumerId, consumerUpdate);
        }

        /**
         * Execute modifyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The consumer was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ConsumerUpdate consumerUpdate = buildBodyParams();
            return modifyByIdAsync(consumerId, consumerUpdate, _callback);
        }
    }

    /**
     * Modify Consumer by ID
     * Modify an existing consumer. All fields are required for a consumer record, but individual fields for this call are optional because fields that are not specified will be left unchanged.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param consumerId The consumer ID (required)
     * @param consumerUpdate  (required)
     * @return ModifyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The consumer was successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public ModifyByIdRequestBuilder modifyById(String consumerId) throws IllegalArgumentException {
        if (consumerId == null) throw new IllegalArgumentException("\"consumerId\" is required but got null");
            

        return new ModifyByIdRequestBuilder(consumerId);
    }
}
