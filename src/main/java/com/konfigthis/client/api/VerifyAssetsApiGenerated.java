/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PrequalificationReportAck;
import com.konfigthis.client.model.PrequalificationReportConstraints;
import com.konfigthis.client.model.ReportCustomField;
import com.konfigthis.client.model.VOAReportAck;
import com.konfigthis.client.model.VOAReportConstraints;
import com.konfigthis.client.model.VOAWithIncomeReportAck;
import com.konfigthis.client.model.VOAWithIncomeReportConstraints;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VerifyAssetsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyAssetsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyAssetsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call customerVOAReportCall(String customerId, VOAReportConstraints voAReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voAReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/voa"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerVOAReportValidateBeforeCall(String customerId, VOAReportConstraints voAReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerVOAReport(Async)");
        }

        // verify the required parameter 'voAReportConstraints' is set
        if (voAReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'voAReportConstraints' when calling customerVOAReport(Async)");
        }

        return customerVOAReportCall(customerId, voAReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<VOAReportAck> customerVOAReportWithHttpInfo(String customerId, VOAReportConstraints voAReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = customerVOAReportValidateBeforeCall(customerId, voAReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<VOAReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call customerVOAReportAsync(String customerId, VOAReportConstraints voAReportConstraints, String callbackUrl, final ApiCallback<VOAReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerVOAReportValidateBeforeCall(customerId, voAReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<VOAReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CustomerVOAReportRequestBuilder {
        private final String customerId;
        private String accountIds;
        private List<ReportCustomField> reportCustomFields;
        private Boolean showNsf;
        private Long fromDate;
        private String callbackUrl;

        private CustomerVOAReportRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set accountIds
         * @param accountIds A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set) (optional)
         * @return CustomerVOAReportRequestBuilder
         */
        public CustomerVOAReportRequestBuilder accountIds(String accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return CustomerVOAReportRequestBuilder
         */
        public CustomerVOAReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set showNsf
         * @param showNsf Include the non-sufficient funds (NSF) summary JSON and the NSF summary PDF section in the report. Data included: * Account  * Total number of NSF funds  * Days since the most recent NFS funds fee (optional)
         * @return CustomerVOAReportRequestBuilder
         */
        public CustomerVOAReportRequestBuilder showNsf(Boolean showNsf) {
            this.showNsf = showNsf;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return CustomerVOAReportRequestBuilder
         */
        public CustomerVOAReportRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return CustomerVOAReportRequestBuilder
         */
        public CustomerVOAReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for customerVOAReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VOAReportConstraints voAReportConstraints = buildBodyParams();
            return customerVOAReportCall(customerId, voAReportConstraints, callbackUrl, _callback);
        }

        private VOAReportConstraints buildBodyParams() {
            VOAReportConstraints voAReportConstraints = new VOAReportConstraints();
            voAReportConstraints.accountIds(this.accountIds);
            voAReportConstraints.reportCustomFields(this.reportCustomFields);
            voAReportConstraints.showNsf(this.showNsf);
            voAReportConstraints.fromDate(this.fromDate);
            return voAReportConstraints;
        }

        /**
         * Execute customerVOAReport request
         * @return VOAReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public VOAReportAck execute() throws ApiException {
            VOAReportConstraints voAReportConstraints = buildBodyParams();
            ApiResponse<VOAReportAck> localVarResp = customerVOAReportWithHttpInfo(customerId, voAReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute customerVOAReport request with HTTP info returned
         * @return ApiResponse&lt;VOAReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VOAReportAck> executeWithHttpInfo() throws ApiException {
            VOAReportConstraints voAReportConstraints = buildBodyParams();
            return customerVOAReportWithHttpInfo(customerId, voAReportConstraints, callbackUrl);
        }

        /**
         * Execute customerVOAReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VOAReportAck> _callback) throws ApiException {
            VOAReportConstraints voAReportConstraints = buildBodyParams();
            return customerVOAReportAsync(customerId, voAReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate VOA Report
     * Generate a Verification of Assets (VOA) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to twelve months of transaction history for each account and uses this information to generate the VOA report.  This is a premium service. The billing rate is the variable rate for Verification of Assets under the current subscription plan. The billable event is the successful generation of a VOA report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param voAReportConstraints  (required)
     * @return CustomerVOAReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public CustomerVOAReportRequestBuilder customerVOAReport(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new CustomerVOAReportRequestBuilder(customerId);
    }
    private okhttp3.Call generateVOAWithIncomeReportCall(String customerId, VOAWithIncomeReportConstraints voAWithIncomeReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voAWithIncomeReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/voaHistory"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateVOAWithIncomeReportValidateBeforeCall(String customerId, VOAWithIncomeReportConstraints voAWithIncomeReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateVOAWithIncomeReport(Async)");
        }

        // verify the required parameter 'voAWithIncomeReportConstraints' is set
        if (voAWithIncomeReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'voAWithIncomeReportConstraints' when calling generateVOAWithIncomeReport(Async)");
        }

        return generateVOAWithIncomeReportCall(customerId, voAWithIncomeReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<VOAWithIncomeReportAck> generateVOAWithIncomeReportWithHttpInfo(String customerId, VOAWithIncomeReportConstraints voAWithIncomeReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = generateVOAWithIncomeReportValidateBeforeCall(customerId, voAWithIncomeReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<VOAWithIncomeReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateVOAWithIncomeReportAsync(String customerId, VOAWithIncomeReportConstraints voAWithIncomeReportConstraints, String callbackUrl, final ApiCallback<VOAWithIncomeReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateVOAWithIncomeReportValidateBeforeCall(customerId, voAWithIncomeReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<VOAWithIncomeReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateVOAWithIncomeReportRequestBuilder {
        private final String customerId;
        private String accountIds;
        private List<ReportCustomField> reportCustomFields;
        private Boolean showNsf;
        private Long fromDate;
        private Integer incomeStreamConfidenceMinimum;
        private String callbackUrl;

        private GenerateVOAWithIncomeReportRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set accountIds
         * @param accountIds A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set) (optional)
         * @return GenerateVOAWithIncomeReportRequestBuilder
         */
        public GenerateVOAWithIncomeReportRequestBuilder accountIds(String accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GenerateVOAWithIncomeReportRequestBuilder
         */
        public GenerateVOAWithIncomeReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set showNsf
         * @param showNsf Include the non-sufficient funds (NSF) summary JSON and the NSF summary PDF section in the report. Data included: * Account  * Total number of NSF funds  * Days since the most recent NFS funds fee (optional)
         * @return GenerateVOAWithIncomeReportRequestBuilder
         */
        public GenerateVOAWithIncomeReportRequestBuilder showNsf(Boolean showNsf) {
            this.showNsf = showNsf;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return GenerateVOAWithIncomeReportRequestBuilder
         */
        public GenerateVOAWithIncomeReportRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set incomeStreamConfidenceMinimum
         * @param incomeStreamConfidenceMinimum Include income streams in the report, based on the income stream&#39;s confidence score. For example, Use the value 50 to include only income streams with a confidence score of 50 or higher. (optional)
         * @return GenerateVOAWithIncomeReportRequestBuilder
         */
        public GenerateVOAWithIncomeReportRequestBuilder incomeStreamConfidenceMinimum(Integer incomeStreamConfidenceMinimum) {
            this.incomeStreamConfidenceMinimum = incomeStreamConfidenceMinimum;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GenerateVOAWithIncomeReportRequestBuilder
         */
        public GenerateVOAWithIncomeReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for generateVOAWithIncomeReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VOAWithIncomeReportConstraints voAWithIncomeReportConstraints = buildBodyParams();
            return generateVOAWithIncomeReportCall(customerId, voAWithIncomeReportConstraints, callbackUrl, _callback);
        }

        private VOAWithIncomeReportConstraints buildBodyParams() {
            VOAWithIncomeReportConstraints voAWithIncomeReportConstraints = new VOAWithIncomeReportConstraints();
            voAWithIncomeReportConstraints.accountIds(this.accountIds);
            voAWithIncomeReportConstraints.reportCustomFields(this.reportCustomFields);
            voAWithIncomeReportConstraints.showNsf(this.showNsf);
            voAWithIncomeReportConstraints.fromDate(this.fromDate);
            voAWithIncomeReportConstraints.incomeStreamConfidenceMinimum(this.incomeStreamConfidenceMinimum);
            return voAWithIncomeReportConstraints;
        }

        /**
         * Execute generateVOAWithIncomeReport request
         * @return VOAWithIncomeReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public VOAWithIncomeReportAck execute() throws ApiException {
            VOAWithIncomeReportConstraints voAWithIncomeReportConstraints = buildBodyParams();
            ApiResponse<VOAWithIncomeReportAck> localVarResp = generateVOAWithIncomeReportWithHttpInfo(customerId, voAWithIncomeReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateVOAWithIncomeReport request with HTTP info returned
         * @return ApiResponse&lt;VOAWithIncomeReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VOAWithIncomeReportAck> executeWithHttpInfo() throws ApiException {
            VOAWithIncomeReportConstraints voAWithIncomeReportConstraints = buildBodyParams();
            return generateVOAWithIncomeReportWithHttpInfo(customerId, voAWithIncomeReportConstraints, callbackUrl);
        }

        /**
         * Execute generateVOAWithIncomeReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VOAWithIncomeReportAck> _callback) throws ApiException {
            VOAWithIncomeReportConstraints voAWithIncomeReportConstraints = buildBodyParams();
            return generateVOAWithIncomeReportAsync(customerId, voAWithIncomeReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate VOA With Income Report
     * Generate a Verification of Assets with Income (VOAI) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to 24 months of transaction history for each account and uses this information to generate the VOAI report. The report includes 1 - 6 months of all debit and credit transactions for asset verification. By default, the history is set to 61 days, however, you can change the transaction history in this section by setting the &#x60;fromDate&#x60; parameter. The report also includes up to 24 months of income credit transactions (ordered by account and confidence level) regardless of &#x60;fromDate&#x60; for income verification.  This is a premium service. The billable event is the successful generation of a VOAI report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param voAWithIncomeReportConstraints  (required)
     * @return GenerateVOAWithIncomeReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateVOAWithIncomeReportRequestBuilder generateVOAWithIncomeReport(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateVOAWithIncomeReportRequestBuilder(customerId);
    }
    private okhttp3.Call getAssetSummaryCall(String customerId, PrequalificationReportConstraints prequalificationReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prequalificationReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/assetSummary"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetSummaryValidateBeforeCall(String customerId, PrequalificationReportConstraints prequalificationReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getAssetSummary(Async)");
        }

        // verify the required parameter 'prequalificationReportConstraints' is set
        if (prequalificationReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'prequalificationReportConstraints' when calling getAssetSummary(Async)");
        }

        return getAssetSummaryCall(customerId, prequalificationReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<PrequalificationReportAck> getAssetSummaryWithHttpInfo(String customerId, PrequalificationReportConstraints prequalificationReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = getAssetSummaryValidateBeforeCall(customerId, prequalificationReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<PrequalificationReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetSummaryAsync(String customerId, PrequalificationReportConstraints prequalificationReportConstraints, String callbackUrl, final ApiCallback<PrequalificationReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetSummaryValidateBeforeCall(customerId, prequalificationReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<PrequalificationReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssetSummaryRequestBuilder {
        private final String customerId;
        private String accountIds;
        private List<ReportCustomField> reportCustomFields;
        private Boolean showNsf;
        private Long fromDate;
        private String callbackUrl;

        private GetAssetSummaryRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set accountIds
         * @param accountIds A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set) (optional)
         * @return GetAssetSummaryRequestBuilder
         */
        public GetAssetSummaryRequestBuilder accountIds(String accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GetAssetSummaryRequestBuilder
         */
        public GetAssetSummaryRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set showNsf
         * @param showNsf Include the non-sufficient funds (NSF) summary JSON and the NSF summary PDF section in the report. Data included: * Account  * Total number of NSF funds  * Days since the most recent NFS funds fee (optional)
         * @return GetAssetSummaryRequestBuilder
         */
        public GetAssetSummaryRequestBuilder showNsf(Boolean showNsf) {
            this.showNsf = showNsf;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return GetAssetSummaryRequestBuilder
         */
        public GetAssetSummaryRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GetAssetSummaryRequestBuilder
         */
        public GetAssetSummaryRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for getAssetSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrequalificationReportConstraints prequalificationReportConstraints = buildBodyParams();
            return getAssetSummaryCall(customerId, prequalificationReportConstraints, callbackUrl, _callback);
        }

        private PrequalificationReportConstraints buildBodyParams() {
            PrequalificationReportConstraints prequalificationReportConstraints = new PrequalificationReportConstraints();
            prequalificationReportConstraints.accountIds(this.accountIds);
            prequalificationReportConstraints.reportCustomFields(this.reportCustomFields);
            prequalificationReportConstraints.showNsf(this.showNsf);
            prequalificationReportConstraints.fromDate(this.fromDate);
            return prequalificationReportConstraints;
        }

        /**
         * Execute getAssetSummary request
         * @return PrequalificationReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public PrequalificationReportAck execute() throws ApiException {
            PrequalificationReportConstraints prequalificationReportConstraints = buildBodyParams();
            ApiResponse<PrequalificationReportAck> localVarResp = getAssetSummaryWithHttpInfo(customerId, prequalificationReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssetSummary request with HTTP info returned
         * @return ApiResponse&lt;PrequalificationReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PrequalificationReportAck> executeWithHttpInfo() throws ApiException {
            PrequalificationReportConstraints prequalificationReportConstraints = buildBodyParams();
            return getAssetSummaryWithHttpInfo(customerId, prequalificationReportConstraints, callbackUrl);
        }

        /**
         * Execute getAssetSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PrequalificationReportAck> _callback) throws ApiException {
            PrequalificationReportConstraints prequalificationReportConstraints = buildBodyParams();
            return getAssetSummaryAsync(customerId, prequalificationReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate Prequalification (Non-CRA) Report
     * Retrieve all checking, savings, money market, and investment accounts for a customer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account type of checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param prequalificationReportConstraints  (required)
     * @return GetAssetSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GetAssetSummaryRequestBuilder getAssetSummary(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetAssetSummaryRequestBuilder(customerId);
    }
    private okhttp3.Call getCheckingSavingsInvestmentAccountsCall(String customerId, PrequalificationReportConstraints prequalificationReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prequalificationReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/preQualVoa"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckingSavingsInvestmentAccountsValidateBeforeCall(String customerId, PrequalificationReportConstraints prequalificationReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCheckingSavingsInvestmentAccounts(Async)");
        }

        // verify the required parameter 'prequalificationReportConstraints' is set
        if (prequalificationReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'prequalificationReportConstraints' when calling getCheckingSavingsInvestmentAccounts(Async)");
        }

        return getCheckingSavingsInvestmentAccountsCall(customerId, prequalificationReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<PrequalificationReportAck> getCheckingSavingsInvestmentAccountsWithHttpInfo(String customerId, PrequalificationReportConstraints prequalificationReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = getCheckingSavingsInvestmentAccountsValidateBeforeCall(customerId, prequalificationReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<PrequalificationReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCheckingSavingsInvestmentAccountsAsync(String customerId, PrequalificationReportConstraints prequalificationReportConstraints, String callbackUrl, final ApiCallback<PrequalificationReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckingSavingsInvestmentAccountsValidateBeforeCall(customerId, prequalificationReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<PrequalificationReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCheckingSavingsInvestmentAccountsRequestBuilder {
        private final String customerId;
        private String accountIds;
        private List<ReportCustomField> reportCustomFields;
        private Boolean showNsf;
        private Long fromDate;
        private String callbackUrl;

        private GetCheckingSavingsInvestmentAccountsRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set accountIds
         * @param accountIds A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set) (optional)
         * @return GetCheckingSavingsInvestmentAccountsRequestBuilder
         */
        public GetCheckingSavingsInvestmentAccountsRequestBuilder accountIds(String accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GetCheckingSavingsInvestmentAccountsRequestBuilder
         */
        public GetCheckingSavingsInvestmentAccountsRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set showNsf
         * @param showNsf Include the non-sufficient funds (NSF) summary JSON and the NSF summary PDF section in the report. Data included: * Account  * Total number of NSF funds  * Days since the most recent NFS funds fee (optional)
         * @return GetCheckingSavingsInvestmentAccountsRequestBuilder
         */
        public GetCheckingSavingsInvestmentAccountsRequestBuilder showNsf(Boolean showNsf) {
            this.showNsf = showNsf;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return GetCheckingSavingsInvestmentAccountsRequestBuilder
         */
        public GetCheckingSavingsInvestmentAccountsRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GetCheckingSavingsInvestmentAccountsRequestBuilder
         */
        public GetCheckingSavingsInvestmentAccountsRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for getCheckingSavingsInvestmentAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrequalificationReportConstraints prequalificationReportConstraints = buildBodyParams();
            return getCheckingSavingsInvestmentAccountsCall(customerId, prequalificationReportConstraints, callbackUrl, _callback);
        }

        private PrequalificationReportConstraints buildBodyParams() {
            PrequalificationReportConstraints prequalificationReportConstraints = new PrequalificationReportConstraints();
            prequalificationReportConstraints.accountIds(this.accountIds);
            prequalificationReportConstraints.reportCustomFields(this.reportCustomFields);
            prequalificationReportConstraints.showNsf(this.showNsf);
            prequalificationReportConstraints.fromDate(this.fromDate);
            return prequalificationReportConstraints;
        }

        /**
         * Execute getCheckingSavingsInvestmentAccounts request
         * @return PrequalificationReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public PrequalificationReportAck execute() throws ApiException {
            PrequalificationReportConstraints prequalificationReportConstraints = buildBodyParams();
            ApiResponse<PrequalificationReportAck> localVarResp = getCheckingSavingsInvestmentAccountsWithHttpInfo(customerId, prequalificationReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCheckingSavingsInvestmentAccounts request with HTTP info returned
         * @return ApiResponse&lt;PrequalificationReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PrequalificationReportAck> executeWithHttpInfo() throws ApiException {
            PrequalificationReportConstraints prequalificationReportConstraints = buildBodyParams();
            return getCheckingSavingsInvestmentAccountsWithHttpInfo(customerId, prequalificationReportConstraints, callbackUrl);
        }

        /**
         * Execute getCheckingSavingsInvestmentAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PrequalificationReportAck> _callback) throws ApiException {
            PrequalificationReportConstraints prequalificationReportConstraints = buildBodyParams();
            return getCheckingSavingsInvestmentAccountsAsync(customerId, prequalificationReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate Prequalification (CRA) Report
     * Retrieve all checking, savings, money market, and investment accounts for a consumer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param prequalificationReportConstraints  (required)
     * @return GetCheckingSavingsInvestmentAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GetCheckingSavingsInvestmentAccountsRequestBuilder getCheckingSavingsInvestmentAccounts(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetCheckingSavingsInvestmentAccountsRequestBuilder(customerId);
    }
}
