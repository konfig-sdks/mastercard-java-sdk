/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Borrower;
import com.konfigthis.client.model.ConnectEmailParameters;
import com.konfigthis.client.model.ConnectEmailUrl;
import com.konfigthis.client.model.ConnectJointBorrowerEmailParameters;
import com.konfigthis.client.model.ConnectJointBorrowerParameters;
import com.konfigthis.client.model.ConnectParameters;
import com.konfigthis.client.model.ConnectUrl;
import com.konfigthis.client.model.ConsumerInfo;
import com.konfigthis.client.model.EmailOptions;
import com.konfigthis.client.model.FixConnectParameters;
import com.konfigthis.client.model.LiteConnectParameters;
import com.konfigthis.client.model.MicroEntryVerifyRequestParameter;
import com.konfigthis.client.model.ReportCustomField;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConnectApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call fixUrlGenerationCall(FixConnectParameters fixConnectParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fixConnectParameters;

        // create path and map variables
        String localVarPath = "/connect/v2/generate/fix";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fixUrlGenerationValidateBeforeCall(FixConnectParameters fixConnectParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fixConnectParameters' is set
        if (fixConnectParameters == null) {
            throw new ApiException("Missing the required parameter 'fixConnectParameters' when calling fixUrlGeneration(Async)");
        }

        return fixUrlGenerationCall(fixConnectParameters, _callback);

    }


    private ApiResponse<ConnectUrl> fixUrlGenerationWithHttpInfo(FixConnectParameters fixConnectParameters) throws ApiException {
        okhttp3.Call localVarCall = fixUrlGenerationValidateBeforeCall(fixConnectParameters, null);
        Type localVarReturnType = new TypeToken<ConnectUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call fixUrlGenerationAsync(FixConnectParameters fixConnectParameters, final ApiCallback<ConnectUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = fixUrlGenerationValidateBeforeCall(fixConnectParameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FixUrlGenerationRequestBuilder {
        private final String partnerId;
        private final String customerId;
        private final String institutionLoginId;
        private String language;
        private String redirectUri;
        private String webhook;
        private String webhookContentType;
        private Object webhookData;
        private Object webhookHeaders;
        private String experience;
        private Boolean singleUseUrl;
        private Boolean isWebView;

        private FixUrlGenerationRequestBuilder(String partnerId, String customerId, String institutionLoginId) {
            this.partnerId = partnerId;
            this.customerId = customerId;
            this.institutionLoginId = institutionLoginId;
        }

        /**
         * Set language
         * @param language By default, the Connect application is in English. You don&#39;t need to pass this parameter unless you want to translate Connect into one of our supported languages.  * Spanish (United States): &#x60;es&#x60; * French (Canada): &#x60;fr&#x60;  (optional)
         * @return FixUrlGenerationRequestBuilder
         */
        public FixUrlGenerationRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe). (optional)
         * @return FixUrlGenerationRequestBuilder
         */
        public FixUrlGenerationRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set webhook
         * @param webhook The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details. (optional)
         * @return FixUrlGenerationRequestBuilder
         */
        public FixUrlGenerationRequestBuilder webhook(String webhook) {
            this.webhook = webhook;
            return this;
        }
        
        /**
         * Set webhookContentType
         * @param webhookContentType The content type the webhook events will be sent in. Supported types: \\\&quot;application/json\\\&quot; and \\\&quot;application/xml\\\&quot;. (optional, default to application/json)
         * @return FixUrlGenerationRequestBuilder
         */
        public FixUrlGenerationRequestBuilder webhookContentType(String webhookContentType) {
            this.webhookContentType = webhookContentType;
            return this;
        }
        
        /**
         * Set webhookData
         * @param webhookData Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return FixUrlGenerationRequestBuilder
         */
        public FixUrlGenerationRequestBuilder webhookData(Object webhookData) {
            this.webhookData = webhookData;
            return this;
        }
        
        /**
         * Set webhookHeaders
         * @param webhookHeaders Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return FixUrlGenerationRequestBuilder
         */
        public FixUrlGenerationRequestBuilder webhookHeaders(Object webhookHeaders) {
            this.webhookHeaders = webhookHeaders;
            return this;
        }
        
        /**
         * Set experience
         * @param experience The &#x60;experience&#x60; field allows you to customize: * Brand: color and logo * Icon: displayed on the \\\&quot;Share your data\\\&quot; page * Popular institutions: displayed on the Bank Search page * Report: the credit decisioning report to send when Connect completes. * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company when you migrate to Connect 2.0. For each additional experience you create thereafter, they&#39;ll give you a unique ID. See [Generate Connect URL](https://developer.mastercard.com/open-banking-us/documentation/connect/generate-2-connect-url-apis/).  Experience values options: * \\\&quot;default\\\&quot;: your default experience (must be defined) * GUID: the code for a different experience * Not defined: If you don&#39;t pass the experience parameter, then Connect&#39;s out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run. (optional)
         * @return FixUrlGenerationRequestBuilder
         */
        public FixUrlGenerationRequestBuilder experience(String experience) {
            this.experience = experience;
            return this;
        }
        
        /**
         * Set singleUseUrl
         * @param singleUseUrl \\\&quot;true\\\&quot;: The URL link expires after a Connect session successfully completes.  Note: when the &#x60;singleUseUrl&#x60; and the &#x60;experience&#x60; parameters are passed in the same call, the &#x60;singleUseUrl&#x60; value overrides the &#x60;singleUseUrl&#x60; value configured in the &#x60;experience&#x60; parameter. (optional)
         * @return FixUrlGenerationRequestBuilder
         */
        public FixUrlGenerationRequestBuilder singleUseUrl(Boolean singleUseUrl) {
            this.singleUseUrl = singleUseUrl;
            return this;
        }
        
        /**
         * Set isWebView
         * @param isWebView \\\&quot;true\\\&quot;: Indicates that the Connect Session will be displayed within a WebView. Note: when the &#x60;isWebView&#x60; parameter is &#x60;true&#x60; the &#x60;redirectUri&#x60; parameter is required. (optional)
         * @return FixUrlGenerationRequestBuilder
         */
        public FixUrlGenerationRequestBuilder isWebView(Boolean isWebView) {
            this.isWebView = isWebView;
            return this;
        }
        
        /**
         * Build call for fixUrlGeneration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FixConnectParameters fixConnectParameters = buildBodyParams();
            return fixUrlGenerationCall(fixConnectParameters, _callback);
        }

        private FixConnectParameters buildBodyParams() {
            FixConnectParameters fixConnectParameters = new FixConnectParameters();
            fixConnectParameters.language(this.language);
            fixConnectParameters.partnerId(this.partnerId);
            fixConnectParameters.customerId(this.customerId);
            fixConnectParameters.institutionLoginId(this.institutionLoginId);
            fixConnectParameters.redirectUri(this.redirectUri);
            fixConnectParameters.webhook(this.webhook);
            fixConnectParameters.webhookContentType(this.webhookContentType);
            fixConnectParameters.webhookData(this.webhookData);
            fixConnectParameters.webhookHeaders(this.webhookHeaders);
            fixConnectParameters.experience(this.experience);
            fixConnectParameters.singleUseUrl(this.singleUseUrl);
            fixConnectParameters.isWebView(this.isWebView);
            return fixConnectParameters;
        }

        /**
         * Execute fixUrlGeneration request
         * @return ConnectUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public ConnectUrl execute() throws ApiException {
            FixConnectParameters fixConnectParameters = buildBodyParams();
            ApiResponse<ConnectUrl> localVarResp = fixUrlGenerationWithHttpInfo(fixConnectParameters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute fixUrlGeneration request with HTTP info returned
         * @return ApiResponse&lt;ConnectUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectUrl> executeWithHttpInfo() throws ApiException {
            FixConnectParameters fixConnectParameters = buildBodyParams();
            return fixUrlGenerationWithHttpInfo(fixConnectParameters);
        }

        /**
         * Execute fixUrlGeneration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectUrl> _callback) throws ApiException {
            FixConnectParameters fixConnectParameters = buildBodyParams();
            return fixUrlGenerationAsync(fixConnectParameters, _callback);
        }
    }

    /**
     * Generate Fix Connect URL
     * Use the Connect Fix API when the following conditions occur: * The connection to the user&#39;s financial institution is lost * The user&#39;s credentials were updated (for any number of reasons) * The user&#39;s MFA challenge has expired  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param fixConnectParameters  (required)
     * @return FixUrlGenerationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
     </table>
     */
    public FixUrlGenerationRequestBuilder fixUrlGeneration(String partnerId, String customerId, String institutionLoginId) throws IllegalArgumentException {
        if (partnerId == null) throw new IllegalArgumentException("\"partnerId\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (institutionLoginId == null) throw new IllegalArgumentException("\"institutionLoginId\" is required but got null");
            

        return new FixUrlGenerationRequestBuilder(partnerId, customerId, institutionLoginId);
    }
    private okhttp3.Call generateJointBorrowerUrlCall(ConnectJointBorrowerParameters connectJointBorrowerParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectJointBorrowerParameters;

        // create path and map variables
        String localVarPath = "/connect/v2/generate/jointBorrower";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateJointBorrowerUrlValidateBeforeCall(ConnectJointBorrowerParameters connectJointBorrowerParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectJointBorrowerParameters' is set
        if (connectJointBorrowerParameters == null) {
            throw new ApiException("Missing the required parameter 'connectJointBorrowerParameters' when calling generateJointBorrowerUrl(Async)");
        }

        return generateJointBorrowerUrlCall(connectJointBorrowerParameters, _callback);

    }


    private ApiResponse<ConnectUrl> generateJointBorrowerUrlWithHttpInfo(ConnectJointBorrowerParameters connectJointBorrowerParameters) throws ApiException {
        okhttp3.Call localVarCall = generateJointBorrowerUrlValidateBeforeCall(connectJointBorrowerParameters, null);
        Type localVarReturnType = new TypeToken<ConnectUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateJointBorrowerUrlAsync(ConnectJointBorrowerParameters connectJointBorrowerParameters, final ApiCallback<ConnectUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateJointBorrowerUrlValidateBeforeCall(connectJointBorrowerParameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateJointBorrowerUrlRequestBuilder {
        private final String partnerId;
        private final List<Borrower> borrowers;
        private String language;
        private String redirectUri;
        private String webhook;
        private String webhookContentType;
        private Object webhookData;
        private Object webhookHeaders;
        private Object institutionSettings;
        private String experience;
        private Long fromDate;
        private List<ReportCustomField> reportCustomFields;
        private Boolean singleUseUrl;

        private GenerateJointBorrowerUrlRequestBuilder(String partnerId, List<Borrower> borrowers) {
            this.partnerId = partnerId;
            this.borrowers = borrowers;
        }

        /**
         * Set language
         * @param language By default, the Connect application is in English. You don&#39;t need to pass this parameter unless you want to translate Connect into one of our supported languages.  * Spanish (United States): &#x60;es&#x60; * French (Canada): &#x60;fr&#x60;  (optional)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe). (optional)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set webhook
         * @param webhook The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details. (optional)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder webhook(String webhook) {
            this.webhook = webhook;
            return this;
        }
        
        /**
         * Set webhookContentType
         * @param webhookContentType The content type the webhook events will be sent in. Supported types: \\\&quot;application/json\\\&quot; and \\\&quot;application/xml\\\&quot;. (optional, default to application/json)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder webhookContentType(String webhookContentType) {
            this.webhookContentType = webhookContentType;
            return this;
        }
        
        /**
         * Set webhookData
         * @param webhookData Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder webhookData(Object webhookData) {
            this.webhookData = webhookData;
            return this;
        }
        
        /**
         * Set webhookHeaders
         * @param webhookHeaders Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder webhookHeaders(Object webhookHeaders) {
            this.webhookHeaders = webhookHeaders;
            return this;
        }
        
        /**
         * Set institutionSettings
         * @param institutionSettings Advanced options for configuration of which institutions to display in. See [Institution Settings](https://developer.mastercard.com/open-banking-us/documentation/connect/connect-institutions-settings/). (optional)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder institutionSettings(Object institutionSettings) {
            this.institutionSettings = institutionSettings;
            return this;
        }
        
        /**
         * Set experience
         * @param experience The &#x60;experience&#x60; field allows you to customize: * Brand: color and logo * Icon: displayed on the \\\&quot;Share your data\\\&quot; page * Popular institutions: displayed on the Bank Search page * Report: the credit decisioning report to send when Connect completes. * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company when you migrate to Connect 2.0. For each additional experience you create thereafter, they&#39;ll give you a unique ID. See [Generate Connect URL](https://developer.mastercard.com/open-banking-us/documentation/connect/generate-2-connect-url-apis/).  Experience values options: * \\\&quot;default\\\&quot;: your default experience (must be defined) * GUID: the code for a different experience * Not defined: If you don&#39;t pass the experience parameter, then Connect&#39;s out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run. (optional)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder experience(String experience) {
            this.experience = experience;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate The &#x60;fromDate&#x60; parameter is used when experiences are associated with a credit decisioning report and any other reports with transaction data. The value is in epoch time and must be 10 digits. Example: 1494449017. If it&#39;s greater than 10 digits, then the &#x60;fromDate&#x60; is set to the credit decisioning report&#39;s default &#x60;fromDate&#x60;.  For an experience that generates multiple reports, the &#x60;fromDate&#x60; gets passed to the reports that support it.  However, Connect doesn&#39;t pass this parameter to the following reports: * Pay Statement Extraction Report * VOIE - Paystub (with TXVerify) Report * Statement Report * Verification of Income Report * VOIE - Payroll Report  Note: this field isn&#39;t used if you&#39;re only collecting transaction data without a report. (optional)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set singleUseUrl
         * @param singleUseUrl \\\&quot;true\\\&quot;: The URL link expires after a Connect session successfully completes.  Note: when the &#x60;singleUseUrl&#x60; and the &#x60;experience&#x60; parameters are passed in the same call, the &#x60;singleUseUrl&#x60; value overrides the &#x60;singleUseUrl&#x60; value configured in the &#x60;experience&#x60; parameter. (optional)
         * @return GenerateJointBorrowerUrlRequestBuilder
         */
        public GenerateJointBorrowerUrlRequestBuilder singleUseUrl(Boolean singleUseUrl) {
            this.singleUseUrl = singleUseUrl;
            return this;
        }
        
        /**
         * Build call for generateJointBorrowerUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectJointBorrowerParameters connectJointBorrowerParameters = buildBodyParams();
            return generateJointBorrowerUrlCall(connectJointBorrowerParameters, _callback);
        }

        private ConnectJointBorrowerParameters buildBodyParams() {
            ConnectJointBorrowerParameters connectJointBorrowerParameters = new ConnectJointBorrowerParameters();
            connectJointBorrowerParameters.language(this.language);
            connectJointBorrowerParameters.partnerId(this.partnerId);
            connectJointBorrowerParameters.borrowers(this.borrowers);
            connectJointBorrowerParameters.redirectUri(this.redirectUri);
            connectJointBorrowerParameters.webhook(this.webhook);
            connectJointBorrowerParameters.webhookContentType(this.webhookContentType);
            connectJointBorrowerParameters.webhookData(this.webhookData);
            connectJointBorrowerParameters.webhookHeaders(this.webhookHeaders);
            connectJointBorrowerParameters.institutionSettings(this.institutionSettings);
            connectJointBorrowerParameters.experience(this.experience);
            connectJointBorrowerParameters.fromDate(this.fromDate);
            connectJointBorrowerParameters.reportCustomFields(this.reportCustomFields);
            connectJointBorrowerParameters.singleUseUrl(this.singleUseUrl);
            return connectJointBorrowerParameters;
        }

        /**
         * Execute generateJointBorrowerUrl request
         * @return ConnectUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public ConnectUrl execute() throws ApiException {
            ConnectJointBorrowerParameters connectJointBorrowerParameters = buildBodyParams();
            ApiResponse<ConnectUrl> localVarResp = generateJointBorrowerUrlWithHttpInfo(connectJointBorrowerParameters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateJointBorrowerUrl request with HTTP info returned
         * @return ApiResponse&lt;ConnectUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectUrl> executeWithHttpInfo() throws ApiException {
            ConnectJointBorrowerParameters connectJointBorrowerParameters = buildBodyParams();
            return generateJointBorrowerUrlWithHttpInfo(connectJointBorrowerParameters);
        }

        /**
         * Execute generateJointBorrowerUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectUrl> _callback) throws ApiException {
            ConnectJointBorrowerParameters connectJointBorrowerParameters = buildBodyParams();
            return generateJointBorrowerUrlAsync(connectJointBorrowerParameters, _callback);
        }
    }

    /**
     * Generate Connect URL - Joint Borrower
     * Same as Connect Full (&#x60;POST /connect/v2/generate&#x60;) but for joint borrowers.  MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param connectJointBorrowerParameters  (required)
     * @return GenerateJointBorrowerUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
     </table>
     */
    public GenerateJointBorrowerUrlRequestBuilder generateJointBorrowerUrl(String partnerId, List<Borrower> borrowers) throws IllegalArgumentException {
        if (partnerId == null) throw new IllegalArgumentException("\"partnerId\" is required but got null");
            

        if (borrowers == null) throw new IllegalArgumentException("\"borrowers\" is required but got null");
        return new GenerateJointBorrowerUrlRequestBuilder(partnerId, borrowers);
    }
    private okhttp3.Call generateLiteUrlCall(LiteConnectParameters liteConnectParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liteConnectParameters;

        // create path and map variables
        String localVarPath = "/connect/v2/generate/lite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateLiteUrlValidateBeforeCall(LiteConnectParameters liteConnectParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liteConnectParameters' is set
        if (liteConnectParameters == null) {
            throw new ApiException("Missing the required parameter 'liteConnectParameters' when calling generateLiteUrl(Async)");
        }

        return generateLiteUrlCall(liteConnectParameters, _callback);

    }


    private ApiResponse<ConnectUrl> generateLiteUrlWithHttpInfo(LiteConnectParameters liteConnectParameters) throws ApiException {
        okhttp3.Call localVarCall = generateLiteUrlValidateBeforeCall(liteConnectParameters, null);
        Type localVarReturnType = new TypeToken<ConnectUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateLiteUrlAsync(LiteConnectParameters liteConnectParameters, final ApiCallback<ConnectUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateLiteUrlValidateBeforeCall(liteConnectParameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateLiteUrlRequestBuilder {
        private final String partnerId;
        private final String customerId;
        private final Long institutionId;
        private String language;
        private String redirectUri;
        private String webhook;
        private String webhookContentType;
        private Object webhookData;
        private Object webhookHeaders;
        private String experience;
        private Boolean singleUseUrl;
        private Boolean isWebView;

        private GenerateLiteUrlRequestBuilder(String partnerId, String customerId, Long institutionId) {
            this.partnerId = partnerId;
            this.customerId = customerId;
            this.institutionId = institutionId;
        }

        /**
         * Set language
         * @param language By default, the Connect application is in English. You don&#39;t need to pass this parameter unless you want to translate Connect into one of our supported languages.  * Spanish (United States): &#x60;es&#x60; * French (Canada): &#x60;fr&#x60;  (optional)
         * @return GenerateLiteUrlRequestBuilder
         */
        public GenerateLiteUrlRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe). (optional)
         * @return GenerateLiteUrlRequestBuilder
         */
        public GenerateLiteUrlRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set webhook
         * @param webhook The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details. (optional)
         * @return GenerateLiteUrlRequestBuilder
         */
        public GenerateLiteUrlRequestBuilder webhook(String webhook) {
            this.webhook = webhook;
            return this;
        }
        
        /**
         * Set webhookContentType
         * @param webhookContentType The content type the webhook events will be sent in. Supported types: \\\&quot;application/json\\\&quot; and \\\&quot;application/xml\\\&quot;. (optional, default to application/json)
         * @return GenerateLiteUrlRequestBuilder
         */
        public GenerateLiteUrlRequestBuilder webhookContentType(String webhookContentType) {
            this.webhookContentType = webhookContentType;
            return this;
        }
        
        /**
         * Set webhookData
         * @param webhookData Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return GenerateLiteUrlRequestBuilder
         */
        public GenerateLiteUrlRequestBuilder webhookData(Object webhookData) {
            this.webhookData = webhookData;
            return this;
        }
        
        /**
         * Set webhookHeaders
         * @param webhookHeaders Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return GenerateLiteUrlRequestBuilder
         */
        public GenerateLiteUrlRequestBuilder webhookHeaders(Object webhookHeaders) {
            this.webhookHeaders = webhookHeaders;
            return this;
        }
        
        /**
         * Set experience
         * @param experience The &#x60;experience&#x60; field allows you to customize: * Brand: color and logo * Icon: displayed on the \\\&quot;Share your data\\\&quot; page * Popular institutions: displayed on the Bank Search page * Report: the credit decisioning report to send when Connect completes. * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company when you migrate to Connect 2.0. For each additional experience you create thereafter, they&#39;ll give you a unique ID. See [Generate Connect URL](https://developer.mastercard.com/open-banking-us/documentation/connect/generate-2-connect-url-apis/).  Experience values options: * \\\&quot;default\\\&quot;: your default experience (must be defined) * GUID: the code for a different experience * Not defined: If you don&#39;t pass the experience parameter, then Connect&#39;s out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run. (optional)
         * @return GenerateLiteUrlRequestBuilder
         */
        public GenerateLiteUrlRequestBuilder experience(String experience) {
            this.experience = experience;
            return this;
        }
        
        /**
         * Set singleUseUrl
         * @param singleUseUrl \\\&quot;true\\\&quot;: The URL link expires after a Connect session successfully completes.  Note: when the &#x60;singleUseUrl&#x60; and the &#x60;experience&#x60; parameters are passed in the same call, the &#x60;singleUseUrl&#x60; value overrides the &#x60;singleUseUrl&#x60; value configured in the &#x60;experience&#x60; parameter. (optional)
         * @return GenerateLiteUrlRequestBuilder
         */
        public GenerateLiteUrlRequestBuilder singleUseUrl(Boolean singleUseUrl) {
            this.singleUseUrl = singleUseUrl;
            return this;
        }
        
        /**
         * Set isWebView
         * @param isWebView \\\&quot;true\\\&quot;: Indicates that the Connect Session will be displayed within a WebView. Note: when the &#x60;isWebView&#x60; parameter is &#x60;true&#x60; the &#x60;redirectUri&#x60; parameter is required. (optional)
         * @return GenerateLiteUrlRequestBuilder
         */
        public GenerateLiteUrlRequestBuilder isWebView(Boolean isWebView) {
            this.isWebView = isWebView;
            return this;
        }
        
        /**
         * Build call for generateLiteUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiteConnectParameters liteConnectParameters = buildBodyParams();
            return generateLiteUrlCall(liteConnectParameters, _callback);
        }

        private LiteConnectParameters buildBodyParams() {
            LiteConnectParameters liteConnectParameters = new LiteConnectParameters();
            liteConnectParameters.language(this.language);
            liteConnectParameters.partnerId(this.partnerId);
            liteConnectParameters.customerId(this.customerId);
            liteConnectParameters.institutionId(this.institutionId);
            liteConnectParameters.redirectUri(this.redirectUri);
            liteConnectParameters.webhook(this.webhook);
            liteConnectParameters.webhookContentType(this.webhookContentType);
            liteConnectParameters.webhookData(this.webhookData);
            liteConnectParameters.webhookHeaders(this.webhookHeaders);
            liteConnectParameters.experience(this.experience);
            liteConnectParameters.singleUseUrl(this.singleUseUrl);
            liteConnectParameters.isWebView(this.isWebView);
            return liteConnectParameters;
        }

        /**
         * Execute generateLiteUrl request
         * @return ConnectUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public ConnectUrl execute() throws ApiException {
            LiteConnectParameters liteConnectParameters = buildBodyParams();
            ApiResponse<ConnectUrl> localVarResp = generateLiteUrlWithHttpInfo(liteConnectParameters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateLiteUrl request with HTTP info returned
         * @return ApiResponse&lt;ConnectUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectUrl> executeWithHttpInfo() throws ApiException {
            LiteConnectParameters liteConnectParameters = buildBodyParams();
            return generateLiteUrlWithHttpInfo(liteConnectParameters);
        }

        /**
         * Execute generateLiteUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectUrl> _callback) throws ApiException {
            LiteConnectParameters liteConnectParameters = buildBodyParams();
            return generateLiteUrlAsync(liteConnectParameters, _callback);
        }
    }

    /**
     * Generate Lite Connect URL
     * Connect Lite is a variation of Connect Full (&#x60;POST /connect/v2/generate&#x60;), which has a limited set of features. * Sign in, user&#39;s credentials, and Multi-Factor Authentication (MFA) * No user account management  The Connect Web SDK isn&#39;t a requirement when using Connect lite. However, if you want to use the SDK events, routes, and user events, then you must integrate with the Connect Web SDK.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param liteConnectParameters  (required)
     * @return GenerateLiteUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
     </table>
     */
    public GenerateLiteUrlRequestBuilder generateLiteUrl(String partnerId, String customerId, Long institutionId) throws IllegalArgumentException {
        if (partnerId == null) throw new IllegalArgumentException("\"partnerId\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (institutionId == null) throw new IllegalArgumentException("\"institutionId\" is required but got null");
        return new GenerateLiteUrlRequestBuilder(partnerId, customerId, institutionId);
    }
    private okhttp3.Call generateUrlCall(ConnectParameters connectParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectParameters;

        // create path and map variables
        String localVarPath = "/connect/v2/generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateUrlValidateBeforeCall(ConnectParameters connectParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectParameters' is set
        if (connectParameters == null) {
            throw new ApiException("Missing the required parameter 'connectParameters' when calling generateUrl(Async)");
        }

        return generateUrlCall(connectParameters, _callback);

    }


    private ApiResponse<ConnectUrl> generateUrlWithHttpInfo(ConnectParameters connectParameters) throws ApiException {
        okhttp3.Call localVarCall = generateUrlValidateBeforeCall(connectParameters, null);
        Type localVarReturnType = new TypeToken<ConnectUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateUrlAsync(ConnectParameters connectParameters, final ApiCallback<ConnectUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateUrlValidateBeforeCall(connectParameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateUrlRequestBuilder {
        private final String partnerId;
        private final String customerId;
        private String language;
        private String consumerId;
        private String redirectUri;
        private String webhook;
        private String webhookContentType;
        private Object webhookData;
        private Object webhookHeaders;
        private ConsumerInfo optionalConsumerInfo;
        private Boolean singleUseUrl;
        private String experience;
        private Object institutionSettings;
        private Long fromDate;
        private List<ReportCustomField> reportCustomFields;
        private Boolean isWebView;

        private GenerateUrlRequestBuilder(String partnerId, String customerId) {
            this.partnerId = partnerId;
            this.customerId = customerId;
        }

        /**
         * Set language
         * @param language By default, the Connect application is in English. You don&#39;t need to pass this parameter unless you want to translate Connect into one of our supported languages.  * Spanish (United States): &#x60;es&#x60; * French (Canada): &#x60;fr&#x60;  (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set consumerId
         * @param consumerId A consumer ID. See Create Consumer API for how to create a consumer ID. (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder consumerId(String consumerId) {
            this.consumerId = consumerId;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe). (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set webhook
         * @param webhook The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details. (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder webhook(String webhook) {
            this.webhook = webhook;
            return this;
        }
        
        /**
         * Set webhookContentType
         * @param webhookContentType The content type the webhook events will be sent in. Supported types: \\\&quot;application/json\\\&quot; and \\\&quot;application/xml\\\&quot;. (optional, default to application/json)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder webhookContentType(String webhookContentType) {
            this.webhookContentType = webhookContentType;
            return this;
        }
        
        /**
         * Set webhookData
         * @param webhookData Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder webhookData(Object webhookData) {
            this.webhookData = webhookData;
            return this;
        }
        
        /**
         * Set webhookHeaders
         * @param webhookHeaders Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder webhookHeaders(Object webhookHeaders) {
            this.webhookHeaders = webhookHeaders;
            return this;
        }
        
        /**
         * Set optionalConsumerInfo
         * @param optionalConsumerInfo  (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder optionalConsumerInfo(ConsumerInfo optionalConsumerInfo) {
            this.optionalConsumerInfo = optionalConsumerInfo;
            return this;
        }
        
        /**
         * Set singleUseUrl
         * @param singleUseUrl \\\&quot;true\\\&quot;: The URL link expires after a Connect session successfully completes.  Note: when the &#x60;singleUseUrl&#x60; and the &#x60;experience&#x60; parameters are passed in the same call, the &#x60;singleUseUrl&#x60; value overrides the &#x60;singleUseUrl&#x60; value configured in the &#x60;experience&#x60; parameter. (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder singleUseUrl(Boolean singleUseUrl) {
            this.singleUseUrl = singleUseUrl;
            return this;
        }
        
        /**
         * Set experience
         * @param experience The &#x60;experience&#x60; field allows you to customize: * Brand: color and logo * Icon: displayed on the \\\&quot;Share your data\\\&quot; page * Popular institutions: displayed on the Bank Search page * Report: the credit decisioning report to send when Connect completes. * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company when you migrate to Connect 2.0. For each additional experience you create thereafter, they&#39;ll give you a unique ID. See [Generate Connect URL](https://developer.mastercard.com/open-banking-us/documentation/connect/generate-2-connect-url-apis/).  Experience values options: * \\\&quot;default\\\&quot;: your default experience (must be defined) * GUID: the code for a different experience * Not defined: If you don&#39;t pass the experience parameter, then Connect&#39;s out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run. (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder experience(String experience) {
            this.experience = experience;
            return this;
        }
        
        /**
         * Set institutionSettings
         * @param institutionSettings Advanced options for configuration of which institutions to display in. See [Institution Settings](https://developer.mastercard.com/open-banking-us/documentation/connect/connect-institutions-settings/). (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder institutionSettings(Object institutionSettings) {
            this.institutionSettings = institutionSettings;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate The &#x60;fromDate&#x60; parameter is used when experiences are associated with a credit decisioning report and any other reports with transaction data. The value is in epoch time and must be 10 digits. Example: 1494449017. If it&#39;s greater than 10 digits, then the &#x60;fromDate&#x60; is set to the credit decisioning report&#39;s default &#x60;fromDate&#x60;.  For an experience that generates multiple reports, the &#x60;fromDate&#x60; gets passed to the reports that support it.  However, Connect doesn&#39;t pass this parameter to the following reports: * Pay Statement Extraction Report * VOIE - Paystub (with TXVerify) Report * Statement Report * Verification of Income Report * VOIE - Payroll Report  Note: this field isn&#39;t used if you&#39;re only collecting transaction data without a report. (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set isWebView
         * @param isWebView \\\&quot;true\\\&quot;: Indicates that the Connect Session will be displayed within a WebView. Note: when the &#x60;isWebView&#x60; parameter is &#x60;true&#x60; the &#x60;redirectUri&#x60; parameter is required. (optional)
         * @return GenerateUrlRequestBuilder
         */
        public GenerateUrlRequestBuilder isWebView(Boolean isWebView) {
            this.isWebView = isWebView;
            return this;
        }
        
        /**
         * Build call for generateUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectParameters connectParameters = buildBodyParams();
            return generateUrlCall(connectParameters, _callback);
        }

        private ConnectParameters buildBodyParams() {
            ConnectParameters connectParameters = new ConnectParameters();
            connectParameters.language(this.language);
            connectParameters.partnerId(this.partnerId);
            connectParameters.customerId(this.customerId);
            connectParameters.consumerId(this.consumerId);
            connectParameters.redirectUri(this.redirectUri);
            connectParameters.webhook(this.webhook);
            connectParameters.webhookContentType(this.webhookContentType);
            connectParameters.webhookData(this.webhookData);
            connectParameters.webhookHeaders(this.webhookHeaders);
            connectParameters.optionalConsumerInfo(this.optionalConsumerInfo);
            connectParameters.singleUseUrl(this.singleUseUrl);
            connectParameters.experience(this.experience);
            connectParameters.institutionSettings(this.institutionSettings);
            connectParameters.fromDate(this.fromDate);
            connectParameters.reportCustomFields(this.reportCustomFields);
            connectParameters.isWebView(this.isWebView);
            return connectParameters;
        }

        /**
         * Execute generateUrl request
         * @return ConnectUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public ConnectUrl execute() throws ApiException {
            ConnectParameters connectParameters = buildBodyParams();
            ApiResponse<ConnectUrl> localVarResp = generateUrlWithHttpInfo(connectParameters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateUrl request with HTTP info returned
         * @return ApiResponse&lt;ConnectUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectUrl> executeWithHttpInfo() throws ApiException {
            ConnectParameters connectParameters = buildBodyParams();
            return generateUrlWithHttpInfo(connectParameters);
        }

        /**
         * Execute generateUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectUrl> _callback) throws ApiException {
            ConnectParameters connectParameters = buildBodyParams();
            return generateUrlAsync(connectParameters, _callback);
        }
    }

    /**
     * Generate Connect URL
     * Generate a Connect 2.0 URL link to add within your own applications.  Optional Parameters: * &#x60;experience&#x60;: Configure different customer experiences per Connect session by changing the brand, color, logo, icon, the type of credit decisioning report to generate after the session ends, and more. * &#x60;language&#x60;: By default, the Connect application is in English. You don&#39;t need to pass  this parameter unless you want to translate Connect into one of our supported languages.    * Spanish (United States)   * French (Canada)   MVS Developers: You can pre-populate the consumer&#39;s SSN on the Find employment records page at the beginning of the MVS payroll app. Pass the SSN value for the consumer in the body of the request call.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param connectParameters  (required)
     * @return GenerateUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
     </table>
     */
    public GenerateUrlRequestBuilder generateUrl(String partnerId, String customerId) throws IllegalArgumentException {
        if (partnerId == null) throw new IllegalArgumentException("\"partnerId\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateUrlRequestBuilder(partnerId, customerId);
    }
    private okhttp3.Call sendConnectEmailCall(ConnectEmailParameters connectEmailParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectEmailParameters;

        // create path and map variables
        String localVarPath = "/connect/v2/send/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendConnectEmailValidateBeforeCall(ConnectEmailParameters connectEmailParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectEmailParameters' is set
        if (connectEmailParameters == null) {
            throw new ApiException("Missing the required parameter 'connectEmailParameters' when calling sendConnectEmail(Async)");
        }

        return sendConnectEmailCall(connectEmailParameters, _callback);

    }


    private ApiResponse<ConnectEmailUrl> sendConnectEmailWithHttpInfo(ConnectEmailParameters connectEmailParameters) throws ApiException {
        okhttp3.Call localVarCall = sendConnectEmailValidateBeforeCall(connectEmailParameters, null);
        Type localVarReturnType = new TypeToken<ConnectEmailUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendConnectEmailAsync(ConnectEmailParameters connectEmailParameters, final ApiCallback<ConnectEmailUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendConnectEmailValidateBeforeCall(connectEmailParameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectEmailUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendConnectEmailRequestBuilder {
        private final String partnerId;
        private final String customerId;
        private final String consumerId;
        private final EmailOptions email;
        private String language;
        private String redirectUri;
        private String webhook;
        private String webhookContentType;
        private Object webhookData;
        private Object webhookHeaders;
        private Object institutionSettings;
        private String experience;
        private Boolean singleUseUrl;
        private Long fromDate;
        private List<ReportCustomField> reportCustomFields;
        private ConsumerInfo optionalConsumerInfo;

        private SendConnectEmailRequestBuilder(String partnerId, String customerId, String consumerId, EmailOptions email) {
            this.partnerId = partnerId;
            this.customerId = customerId;
            this.consumerId = consumerId;
            this.email = email;
        }

        /**
         * Set language
         * @param language By default, the Connect application is in English. You don&#39;t need to pass this parameter unless you want to translate Connect into one of our supported languages.  * Spanish (United States): &#x60;es&#x60; * French (Canada): &#x60;fr&#x60;  (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe). (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set webhook
         * @param webhook The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details. (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder webhook(String webhook) {
            this.webhook = webhook;
            return this;
        }
        
        /**
         * Set webhookContentType
         * @param webhookContentType The content type the webhook events will be sent in. Supported types: \\\&quot;application/json\\\&quot; and \\\&quot;application/xml\\\&quot;. (optional, default to application/json)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder webhookContentType(String webhookContentType) {
            this.webhookContentType = webhookContentType;
            return this;
        }
        
        /**
         * Set webhookData
         * @param webhookData Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder webhookData(Object webhookData) {
            this.webhookData = webhookData;
            return this;
        }
        
        /**
         * Set webhookHeaders
         * @param webhookHeaders Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder webhookHeaders(Object webhookHeaders) {
            this.webhookHeaders = webhookHeaders;
            return this;
        }
        
        /**
         * Set institutionSettings
         * @param institutionSettings Advanced options for configuration of which institutions to display in. See [Institution Settings](https://developer.mastercard.com/open-banking-us/documentation/connect/connect-institutions-settings/). (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder institutionSettings(Object institutionSettings) {
            this.institutionSettings = institutionSettings;
            return this;
        }
        
        /**
         * Set experience
         * @param experience The &#x60;experience&#x60; field allows you to customize: * Brand: color and logo * Icon: displayed on the \\\&quot;Share your data\\\&quot; page * Popular institutions: displayed on the Bank Search page * Report: the credit decisioning report to send when Connect completes. * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company when you migrate to Connect 2.0. For each additional experience you create thereafter, they&#39;ll give you a unique ID. See [Generate Connect URL](https://developer.mastercard.com/open-banking-us/documentation/connect/generate-2-connect-url-apis/).  Experience values options: * \\\&quot;default\\\&quot;: your default experience (must be defined) * GUID: the code for a different experience * Not defined: If you don&#39;t pass the experience parameter, then Connect&#39;s out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run. (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder experience(String experience) {
            this.experience = experience;
            return this;
        }
        
        /**
         * Set singleUseUrl
         * @param singleUseUrl \\\&quot;true\\\&quot;: The URL link expires after a Connect session successfully completes.  Note: when the &#x60;singleUseUrl&#x60; and the &#x60;experience&#x60; parameters are passed in the same call, the &#x60;singleUseUrl&#x60; value overrides the &#x60;singleUseUrl&#x60; value configured in the &#x60;experience&#x60; parameter. (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder singleUseUrl(Boolean singleUseUrl) {
            this.singleUseUrl = singleUseUrl;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate The &#x60;fromDate&#x60; parameter is used when experiences are associated with a credit decisioning report and any other reports with transaction data. The value is in epoch time and must be 10 digits. Example: 1494449017. If it&#39;s greater than 10 digits, then the &#x60;fromDate&#x60; is set to the credit decisioning report&#39;s default &#x60;fromDate&#x60;.  For an experience that generates multiple reports, the &#x60;fromDate&#x60; gets passed to the reports that support it.  However, Connect doesn&#39;t pass this parameter to the following reports: * Pay Statement Extraction Report * VOIE - Paystub (with TXVerify) Report * Statement Report * Verification of Income Report * VOIE - Payroll Report  Note: this field isn&#39;t used if you&#39;re only collecting transaction data without a report. (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set optionalConsumerInfo
         * @param optionalConsumerInfo  (optional)
         * @return SendConnectEmailRequestBuilder
         */
        public SendConnectEmailRequestBuilder optionalConsumerInfo(ConsumerInfo optionalConsumerInfo) {
            this.optionalConsumerInfo = optionalConsumerInfo;
            return this;
        }
        
        /**
         * Build call for sendConnectEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated and the email sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectEmailParameters connectEmailParameters = buildBodyParams();
            return sendConnectEmailCall(connectEmailParameters, _callback);
        }

        private ConnectEmailParameters buildBodyParams() {
            ConnectEmailParameters connectEmailParameters = new ConnectEmailParameters();
            connectEmailParameters.language(this.language);
            connectEmailParameters.partnerId(this.partnerId);
            connectEmailParameters.customerId(this.customerId);
            connectEmailParameters.consumerId(this.consumerId);
            connectEmailParameters.redirectUri(this.redirectUri);
            connectEmailParameters.webhook(this.webhook);
            connectEmailParameters.webhookContentType(this.webhookContentType);
            connectEmailParameters.webhookData(this.webhookData);
            connectEmailParameters.webhookHeaders(this.webhookHeaders);
            connectEmailParameters.institutionSettings(this.institutionSettings);
            connectEmailParameters.email(this.email);
            connectEmailParameters.experience(this.experience);
            connectEmailParameters.singleUseUrl(this.singleUseUrl);
            connectEmailParameters.fromDate(this.fromDate);
            connectEmailParameters.reportCustomFields(this.reportCustomFields);
            connectEmailParameters.optionalConsumerInfo(this.optionalConsumerInfo);
            return connectEmailParameters;
        }

        /**
         * Execute sendConnectEmail request
         * @return ConnectEmailUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated and the email sent </td><td>  -  </td></tr>
         </table>
         */
        public ConnectEmailUrl execute() throws ApiException {
            ConnectEmailParameters connectEmailParameters = buildBodyParams();
            ApiResponse<ConnectEmailUrl> localVarResp = sendConnectEmailWithHttpInfo(connectEmailParameters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendConnectEmail request with HTTP info returned
         * @return ApiResponse&lt;ConnectEmailUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated and the email sent </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectEmailUrl> executeWithHttpInfo() throws ApiException {
            ConnectEmailParameters connectEmailParameters = buildBodyParams();
            return sendConnectEmailWithHttpInfo(connectEmailParameters);
        }

        /**
         * Execute sendConnectEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated and the email sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectEmailUrl> _callback) throws ApiException {
            ConnectEmailParameters connectEmailParameters = buildBodyParams();
            return sendConnectEmailAsync(connectEmailParameters, _callback);
        }
    }

    /**
     * Send Connect Email
     * Same as Connect Full (&#x60;POST /connect/v2/generate&#x60;) but send a Connect email to a consumer.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param connectEmailParameters  (required)
     * @return SendConnectEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The URL link was successfully generated and the email sent </td><td>  -  </td></tr>
     </table>
     */
    public SendConnectEmailRequestBuilder sendConnectEmail(String partnerId, String customerId, String consumerId, EmailOptions email) throws IllegalArgumentException {
        if (partnerId == null) throw new IllegalArgumentException("\"partnerId\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (consumerId == null) throw new IllegalArgumentException("\"consumerId\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
        return new SendConnectEmailRequestBuilder(partnerId, customerId, consumerId, email);
    }
    private okhttp3.Call sendEmailJointBorrowerCall(ConnectJointBorrowerEmailParameters connectJointBorrowerEmailParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectJointBorrowerEmailParameters;

        // create path and map variables
        String localVarPath = "/connect/v2/send/email/jointBorrower";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailJointBorrowerValidateBeforeCall(ConnectJointBorrowerEmailParameters connectJointBorrowerEmailParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectJointBorrowerEmailParameters' is set
        if (connectJointBorrowerEmailParameters == null) {
            throw new ApiException("Missing the required parameter 'connectJointBorrowerEmailParameters' when calling sendEmailJointBorrower(Async)");
        }

        return sendEmailJointBorrowerCall(connectJointBorrowerEmailParameters, _callback);

    }


    private ApiResponse<ConnectEmailUrl> sendEmailJointBorrowerWithHttpInfo(ConnectJointBorrowerEmailParameters connectJointBorrowerEmailParameters) throws ApiException {
        okhttp3.Call localVarCall = sendEmailJointBorrowerValidateBeforeCall(connectJointBorrowerEmailParameters, null);
        Type localVarReturnType = new TypeToken<ConnectEmailUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendEmailJointBorrowerAsync(ConnectJointBorrowerEmailParameters connectJointBorrowerEmailParameters, final ApiCallback<ConnectEmailUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailJointBorrowerValidateBeforeCall(connectJointBorrowerEmailParameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectEmailUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendEmailJointBorrowerRequestBuilder {
        private final String partnerId;
        private final List<Borrower> borrowers;
        private final EmailOptions email;
        private final String experience;
        private String language;
        private String redirectUri;
        private String webhook;
        private String webhookContentType;
        private Object webhookData;
        private Object webhookHeaders;
        private Object institutionSettings;
        private Long fromDate;
        private List<ReportCustomField> reportCustomFields;
        private Boolean singleUseUrl;

        private SendEmailJointBorrowerRequestBuilder(String partnerId, List<Borrower> borrowers, EmailOptions email, String experience) {
            this.partnerId = partnerId;
            this.borrowers = borrowers;
            this.email = email;
            this.experience = experience;
        }

        /**
         * Set language
         * @param language By default, the Connect application is in English. You don&#39;t need to pass this parameter unless you want to translate Connect into one of our supported languages.  * Spanish (United States): &#x60;es&#x60; * French (Canada): &#x60;fr&#x60;  (optional)
         * @return SendEmailJointBorrowerRequestBuilder
         */
        public SendEmailJointBorrowerRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe). (optional)
         * @return SendEmailJointBorrowerRequestBuilder
         */
        public SendEmailJointBorrowerRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set webhook
         * @param webhook The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details. (optional)
         * @return SendEmailJointBorrowerRequestBuilder
         */
        public SendEmailJointBorrowerRequestBuilder webhook(String webhook) {
            this.webhook = webhook;
            return this;
        }
        
        /**
         * Set webhookContentType
         * @param webhookContentType The content type the webhook events will be sent in. Supported types: \\\&quot;application/json\\\&quot; and \\\&quot;application/xml\\\&quot;. (optional, default to application/json)
         * @return SendEmailJointBorrowerRequestBuilder
         */
        public SendEmailJointBorrowerRequestBuilder webhookContentType(String webhookContentType) {
            this.webhookContentType = webhookContentType;
            return this;
        }
        
        /**
         * Set webhookData
         * @param webhookData Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return SendEmailJointBorrowerRequestBuilder
         */
        public SendEmailJointBorrowerRequestBuilder webhookData(Object webhookData) {
            this.webhookData = webhookData;
            return this;
        }
        
        /**
         * Set webhookHeaders
         * @param webhookHeaders Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return SendEmailJointBorrowerRequestBuilder
         */
        public SendEmailJointBorrowerRequestBuilder webhookHeaders(Object webhookHeaders) {
            this.webhookHeaders = webhookHeaders;
            return this;
        }
        
        /**
         * Set institutionSettings
         * @param institutionSettings Advanced options for configuration of which institutions to display in. See [Institution Settings](https://developer.mastercard.com/open-banking-us/documentation/connect/connect-institutions-settings/). (optional)
         * @return SendEmailJointBorrowerRequestBuilder
         */
        public SendEmailJointBorrowerRequestBuilder institutionSettings(Object institutionSettings) {
            this.institutionSettings = institutionSettings;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate The &#x60;fromDate&#x60; parameter is used when experiences are associated with a credit decisioning report and any other reports with transaction data. The value is in epoch time and must be 10 digits. Example: 1494449017. If it&#39;s greater than 10 digits, then the &#x60;fromDate&#x60; is set to the credit decisioning report&#39;s default &#x60;fromDate&#x60;.  For an experience that generates multiple reports, the &#x60;fromDate&#x60; gets passed to the reports that support it.  However, Connect doesn&#39;t pass this parameter to the following reports: * Pay Statement Extraction Report * VOIE - Paystub (with TXVerify) Report * Statement Report * Verification of Income Report * VOIE - Payroll Report  Note: this field isn&#39;t used if you&#39;re only collecting transaction data without a report. (optional)
         * @return SendEmailJointBorrowerRequestBuilder
         */
        public SendEmailJointBorrowerRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return SendEmailJointBorrowerRequestBuilder
         */
        public SendEmailJointBorrowerRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set singleUseUrl
         * @param singleUseUrl \\\&quot;true\\\&quot;: The URL link expires after a Connect session successfully completes.  Note: when the &#x60;singleUseUrl&#x60; and the &#x60;experience&#x60; parameters are passed in the same call, the &#x60;singleUseUrl&#x60; value overrides the &#x60;singleUseUrl&#x60; value configured in the &#x60;experience&#x60; parameter. (optional)
         * @return SendEmailJointBorrowerRequestBuilder
         */
        public SendEmailJointBorrowerRequestBuilder singleUseUrl(Boolean singleUseUrl) {
            this.singleUseUrl = singleUseUrl;
            return this;
        }
        
        /**
         * Build call for sendEmailJointBorrower
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated and the email sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectJointBorrowerEmailParameters connectJointBorrowerEmailParameters = buildBodyParams();
            return sendEmailJointBorrowerCall(connectJointBorrowerEmailParameters, _callback);
        }

        private ConnectJointBorrowerEmailParameters buildBodyParams() {
            ConnectJointBorrowerEmailParameters connectJointBorrowerEmailParameters = new ConnectJointBorrowerEmailParameters();
            connectJointBorrowerEmailParameters.language(this.language);
            connectJointBorrowerEmailParameters.partnerId(this.partnerId);
            connectJointBorrowerEmailParameters.borrowers(this.borrowers);
            connectJointBorrowerEmailParameters.redirectUri(this.redirectUri);
            connectJointBorrowerEmailParameters.webhook(this.webhook);
            connectJointBorrowerEmailParameters.webhookContentType(this.webhookContentType);
            connectJointBorrowerEmailParameters.webhookData(this.webhookData);
            connectJointBorrowerEmailParameters.webhookHeaders(this.webhookHeaders);
            connectJointBorrowerEmailParameters.institutionSettings(this.institutionSettings);
            connectJointBorrowerEmailParameters.email(this.email);
            connectJointBorrowerEmailParameters.experience(this.experience);
            connectJointBorrowerEmailParameters.fromDate(this.fromDate);
            connectJointBorrowerEmailParameters.reportCustomFields(this.reportCustomFields);
            connectJointBorrowerEmailParameters.singleUseUrl(this.singleUseUrl);
            return connectJointBorrowerEmailParameters;
        }

        /**
         * Execute sendEmailJointBorrower request
         * @return ConnectEmailUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated and the email sent </td><td>  -  </td></tr>
         </table>
         */
        public ConnectEmailUrl execute() throws ApiException {
            ConnectJointBorrowerEmailParameters connectJointBorrowerEmailParameters = buildBodyParams();
            ApiResponse<ConnectEmailUrl> localVarResp = sendEmailJointBorrowerWithHttpInfo(connectJointBorrowerEmailParameters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendEmailJointBorrower request with HTTP info returned
         * @return ApiResponse&lt;ConnectEmailUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated and the email sent </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectEmailUrl> executeWithHttpInfo() throws ApiException {
            ConnectJointBorrowerEmailParameters connectJointBorrowerEmailParameters = buildBodyParams();
            return sendEmailJointBorrowerWithHttpInfo(connectJointBorrowerEmailParameters);
        }

        /**
         * Execute sendEmailJointBorrower request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated and the email sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectEmailUrl> _callback) throws ApiException {
            ConnectJointBorrowerEmailParameters connectJointBorrowerEmailParameters = buildBodyParams();
            return sendEmailJointBorrowerAsync(connectJointBorrowerEmailParameters, _callback);
        }
    }

    /**
     * Send Connect Email - Joint Borrower
     * Same as Connect Joint Borrower (&#x60;POST /connect/v2/generate/jointBorrower&#x60;) but send a Connect email  to at least one of the joint borrower&#39;s email addresses.  When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param connectJointBorrowerEmailParameters  (required)
     * @return SendEmailJointBorrowerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The URL link was successfully generated and the email sent </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailJointBorrowerRequestBuilder sendEmailJointBorrower(String partnerId, List<Borrower> borrowers, EmailOptions email, String experience) throws IllegalArgumentException {
        if (partnerId == null) throw new IllegalArgumentException("\"partnerId\" is required but got null");
            

        if (borrowers == null) throw new IllegalArgumentException("\"borrowers\" is required but got null");
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
        if (experience == null) throw new IllegalArgumentException("\"experience\" is required but got null");
            

        return new SendEmailJointBorrowerRequestBuilder(partnerId, borrowers, email, experience);
    }
    private okhttp3.Call verifyMicroEntryMicrodepositsCall(MicroEntryVerifyRequestParameter microEntryVerifyRequestParameter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = microEntryVerifyRequestParameter;

        // create path and map variables
        String localVarPath = "/connect/v2/generate/microentry/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyMicroEntryMicrodepositsValidateBeforeCall(MicroEntryVerifyRequestParameter microEntryVerifyRequestParameter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'microEntryVerifyRequestParameter' is set
        if (microEntryVerifyRequestParameter == null) {
            throw new ApiException("Missing the required parameter 'microEntryVerifyRequestParameter' when calling verifyMicroEntryMicrodeposits(Async)");
        }

        return verifyMicroEntryMicrodepositsCall(microEntryVerifyRequestParameter, _callback);

    }


    private ApiResponse<ConnectUrl> verifyMicroEntryMicrodepositsWithHttpInfo(MicroEntryVerifyRequestParameter microEntryVerifyRequestParameter) throws ApiException {
        okhttp3.Call localVarCall = verifyMicroEntryMicrodepositsValidateBeforeCall(microEntryVerifyRequestParameter, null);
        Type localVarReturnType = new TypeToken<ConnectUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyMicroEntryMicrodepositsAsync(MicroEntryVerifyRequestParameter microEntryVerifyRequestParameter, final ApiCallback<ConnectUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyMicroEntryMicrodepositsValidateBeforeCall(microEntryVerifyRequestParameter, _callback);
        Type localVarReturnType = new TypeToken<ConnectUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyMicroEntryMicrodepositsRequestBuilder {
        private String partnerId;
        private String customerId;
        private String redirectUri;
        private String webhook;
        private String webhookContentType;
        private Object webhookData;
        private Object webhookHeaders;
        private String experience;
        private String accountId;

        private VerifyMicroEntryMicrodepositsRequestBuilder() {
        }

        /**
         * Set partnerId
         * @param partnerId Your Partner ID displayed in the [Developer Dashboard](https://developer.mastercard.com/account/log-in) (optional)
         * @return VerifyMicroEntryMicrodepositsRequestBuilder
         */
        public VerifyMicroEntryMicrodepositsRequestBuilder partnerId(String partnerId) {
            this.partnerId = partnerId;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId A customer ID. See Add Customer API for how to create a customer ID. (optional)
         * @return VerifyMicroEntryMicrodepositsRequestBuilder
         */
        public VerifyMicroEntryMicrodepositsRequestBuilder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe). (optional)
         * @return VerifyMicroEntryMicrodepositsRequestBuilder
         */
        public VerifyMicroEntryMicrodepositsRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set webhook
         * @param webhook The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details. (optional)
         * @return VerifyMicroEntryMicrodepositsRequestBuilder
         */
        public VerifyMicroEntryMicrodepositsRequestBuilder webhook(String webhook) {
            this.webhook = webhook;
            return this;
        }
        
        /**
         * Set webhookContentType
         * @param webhookContentType The content type the webhook events will be sent in. Supported types: \\\&quot;application/json\\\&quot; and \\\&quot;application/xml\\\&quot;. (optional, default to application/json)
         * @return VerifyMicroEntryMicrodepositsRequestBuilder
         */
        public VerifyMicroEntryMicrodepositsRequestBuilder webhookContentType(String webhookContentType) {
            this.webhookContentType = webhookContentType;
            return this;
        }
        
        /**
         * Set webhookData
         * @param webhookData Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return VerifyMicroEntryMicrodepositsRequestBuilder
         */
        public VerifyMicroEntryMicrodepositsRequestBuilder webhookData(Object webhookData) {
            this.webhookData = webhookData;
            return this;
        }
        
        /**
         * Set webhookHeaders
         * @param webhookHeaders Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/). (optional)
         * @return VerifyMicroEntryMicrodepositsRequestBuilder
         */
        public VerifyMicroEntryMicrodepositsRequestBuilder webhookHeaders(Object webhookHeaders) {
            this.webhookHeaders = webhookHeaders;
            return this;
        }
        
        /**
         * Set experience
         * @param experience The &#x60;experience&#x60; field allows you to customize: * Brand: color and logo * Icon: displayed on the \\\&quot;Share your data\\\&quot; page * Popular institutions: displayed on the Bank Search page * Report: the credit decisioning report to send when Connect completes. * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company when you migrate to Connect 2.0. For each additional experience you create thereafter, they&#39;ll give you a unique ID. See [Generate Connect URL](https://developer.mastercard.com/open-banking-us/documentation/connect/generate-2-connect-url-apis/).  Experience values options: * \\\&quot;default\\\&quot;: your default experience (must be defined) * GUID: the code for a different experience * Not defined: If you don&#39;t pass the experience parameter, then Connect&#39;s out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run. (optional)
         * @return VerifyMicroEntryMicrodepositsRequestBuilder
         */
        public VerifyMicroEntryMicrodepositsRequestBuilder experience(String experience) {
            this.experience = experience;
            return this;
        }
        
        /**
         * Set accountId
         * @param accountId An account ID (optional)
         * @return VerifyMicroEntryMicrodepositsRequestBuilder
         */
        public VerifyMicroEntryMicrodepositsRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Build call for verifyMicroEntryMicrodeposits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MicroEntryVerifyRequestParameter microEntryVerifyRequestParameter = buildBodyParams();
            return verifyMicroEntryMicrodepositsCall(microEntryVerifyRequestParameter, _callback);
        }

        private MicroEntryVerifyRequestParameter buildBodyParams() {
            MicroEntryVerifyRequestParameter microEntryVerifyRequestParameter = new MicroEntryVerifyRequestParameter();
            microEntryVerifyRequestParameter.partnerId(this.partnerId);
            microEntryVerifyRequestParameter.customerId(this.customerId);
            microEntryVerifyRequestParameter.redirectUri(this.redirectUri);
            microEntryVerifyRequestParameter.webhook(this.webhook);
            microEntryVerifyRequestParameter.webhookContentType(this.webhookContentType);
            microEntryVerifyRequestParameter.webhookData(this.webhookData);
            microEntryVerifyRequestParameter.webhookHeaders(this.webhookHeaders);
            microEntryVerifyRequestParameter.experience(this.experience);
            microEntryVerifyRequestParameter.accountId(this.accountId);
            return microEntryVerifyRequestParameter;
        }

        /**
         * Execute verifyMicroEntryMicrodeposits request
         * @return ConnectUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public ConnectUrl execute() throws ApiException {
            MicroEntryVerifyRequestParameter microEntryVerifyRequestParameter = buildBodyParams();
            ApiResponse<ConnectUrl> localVarResp = verifyMicroEntryMicrodepositsWithHttpInfo(microEntryVerifyRequestParameter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyMicroEntryMicrodeposits request with HTTP info returned
         * @return ApiResponse&lt;ConnectUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectUrl> executeWithHttpInfo() throws ApiException {
            MicroEntryVerifyRequestParameter microEntryVerifyRequestParameter = buildBodyParams();
            return verifyMicroEntryMicrodepositsWithHttpInfo(microEntryVerifyRequestParameter);
        }

        /**
         * Execute verifyMicroEntryMicrodeposits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectUrl> _callback) throws ApiException {
            MicroEntryVerifyRequestParameter microEntryVerifyRequestParameter = buildBodyParams();
            return verifyMicroEntryMicrodepositsAsync(microEntryVerifyRequestParameter, _callback);
        }
    }

    /**
     * Account Validation Assistant User verification of microdeposits
     * The UI re-engages the consumer to enter two microdeposit amounts found in their account and validates them.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param microEntryVerifyRequestParameter  (required)
     * @return VerifyMicroEntryMicrodepositsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The URL link was successfully generated </td><td>  -  </td></tr>
     </table>
     */
    public VerifyMicroEntryMicrodepositsRequestBuilder verifyMicroEntryMicrodeposits() throws IllegalArgumentException {
        return new VerifyMicroEntryMicrodepositsRequestBuilder();
    }
}
