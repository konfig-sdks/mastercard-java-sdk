/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AppStatuses;
import com.konfigthis.client.model.Application;
import com.konfigthis.client.model.CustomerAccounts;
import com.konfigthis.client.model.RegisteredApplication;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppRegistrationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppRegistrationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppRegistrationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignApplicationsCall(String customerId, String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/applications/{applicationId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignApplicationsValidateBeforeCall(String customerId, String applicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling assignApplications(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling assignApplications(Async)");
        }

        return assignApplicationsCall(customerId, applicationId, _callback);

    }


    private ApiResponse<Void> assignApplicationsWithHttpInfo(String customerId, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = assignApplicationsValidateBeforeCall(customerId, applicationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call assignApplicationsAsync(String customerId, String applicationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignApplicationsValidateBeforeCall(customerId, applicationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AssignApplicationsRequestBuilder {
        private final String customerId;
        private final String applicationId;

        private AssignApplicationsRequestBuilder(String customerId, String applicationId) {
            this.customerId = customerId;
            this.applicationId = applicationId;
        }

        /**
         * Build call for assignApplications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app was successfully assigned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return assignApplicationsCall(customerId, applicationId, _callback);
        }


        /**
         * Execute assignApplications request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app was successfully assigned </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            assignApplicationsWithHttpInfo(customerId, applicationId);
        }

        /**
         * Execute assignApplications request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app was successfully assigned </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return assignApplicationsWithHttpInfo(customerId, applicationId);
        }

        /**
         * Execute assignApplications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app was successfully assigned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return assignApplicationsAsync(customerId, applicationId, _callback);
        }
    }

    /**
     * Set Customer App ID
     * If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param applicationId The application ID (required)
     * @return AssignApplicationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The app was successfully assigned </td><td>  -  </td></tr>
     </table>
     */
    public AssignApplicationsRequestBuilder assignApplications(String customerId, String applicationId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (applicationId == null) throw new IllegalArgumentException("\"applicationId\" is required but got null");
            

        return new AssignApplicationsRequestBuilder(customerId, applicationId);
    }
    private okhttp3.Call createNewApplicationCall(Application application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = application;

        // create path and map variables
        String localVarPath = "/aggregation/v1/partners/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewApplicationValidateBeforeCall(Application application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling createNewApplication(Async)");
        }

        return createNewApplicationCall(application, _callback);

    }


    private ApiResponse<RegisteredApplication> createNewApplicationWithHttpInfo(Application application) throws ApiException {
        okhttp3.Call localVarCall = createNewApplicationValidateBeforeCall(application, null);
        Type localVarReturnType = new TypeToken<RegisteredApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewApplicationAsync(Application application, final ApiCallback<RegisteredApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewApplicationValidateBeforeCall(application, _callback);
        Type localVarReturnType = new TypeToken<RegisteredApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewApplicationRequestBuilder {
        private final String appDescription;
        private final String appName;
        private final String appUrl;
        private final String ownerAddressLine1;
        private final String ownerAddressLine2;
        private final String ownerCity;
        private final String ownerCountry;
        private final String ownerName;
        private final String ownerPostalCode;
        private final String ownerState;
        private final String image;

        private CreateNewApplicationRequestBuilder(String appDescription, String appName, String appUrl, String ownerAddressLine1, String ownerAddressLine2, String ownerCity, String ownerCountry, String ownerName, String ownerPostalCode, String ownerState, String image) {
            this.appDescription = appDescription;
            this.appName = appName;
            this.appUrl = appUrl;
            this.ownerAddressLine1 = ownerAddressLine1;
            this.ownerAddressLine2 = ownerAddressLine2;
            this.ownerCity = ownerCity;
            this.ownerCountry = ownerCountry;
            this.ownerName = ownerName;
            this.ownerPostalCode = ownerPostalCode;
            this.ownerState = ownerState;
            this.image = image;
        }

        /**
         * Build call for createNewApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The app registration was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Application application = buildBodyParams();
            return createNewApplicationCall(application, _callback);
        }

        private Application buildBodyParams() {
            Application application = new Application();
            application.appDescription(this.appDescription);
            application.appName(this.appName);
            application.appUrl(this.appUrl);
            application.ownerAddressLine1(this.ownerAddressLine1);
            application.ownerAddressLine2(this.ownerAddressLine2);
            application.ownerCity(this.ownerCity);
            application.ownerCountry(this.ownerCountry);
            application.ownerName(this.ownerName);
            application.ownerPostalCode(this.ownerPostalCode);
            application.ownerState(this.ownerState);
            application.image(this.image);
            return application;
        }

        /**
         * Execute createNewApplication request
         * @return RegisteredApplication
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The app registration was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public RegisteredApplication execute() throws ApiException {
            Application application = buildBodyParams();
            ApiResponse<RegisteredApplication> localVarResp = createNewApplicationWithHttpInfo(application);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewApplication request with HTTP info returned
         * @return ApiResponse&lt;RegisteredApplication&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The app registration was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RegisteredApplication> executeWithHttpInfo() throws ApiException {
            Application application = buildBodyParams();
            return createNewApplicationWithHttpInfo(application);
        }

        /**
         * Execute createNewApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The app registration was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RegisteredApplication> _callback) throws ApiException {
            Application application = buildBodyParams();
            return createNewApplicationAsync(application, _callback);
        }
    }

    /**
     * Register App
     * Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param application  (required)
     * @return CreateNewApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The app registration was successfully created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewApplicationRequestBuilder createNewApplication(String appDescription, String appName, String appUrl, String ownerAddressLine1, String ownerAddressLine2, String ownerCity, String ownerCountry, String ownerName, String ownerPostalCode, String ownerState, String image) throws IllegalArgumentException {
        if (appDescription == null) throw new IllegalArgumentException("\"appDescription\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        if (appUrl == null) throw new IllegalArgumentException("\"appUrl\" is required but got null");
            

        if (ownerAddressLine1 == null) throw new IllegalArgumentException("\"ownerAddressLine1\" is required but got null");
            

        if (ownerAddressLine2 == null) throw new IllegalArgumentException("\"ownerAddressLine2\" is required but got null");
            

        if (ownerCity == null) throw new IllegalArgumentException("\"ownerCity\" is required but got null");
            

        if (ownerCountry == null) throw new IllegalArgumentException("\"ownerCountry\" is required but got null");
            

        if (ownerName == null) throw new IllegalArgumentException("\"ownerName\" is required but got null");
            

        if (ownerPostalCode == null) throw new IllegalArgumentException("\"ownerPostalCode\" is required but got null");
            

        if (ownerState == null) throw new IllegalArgumentException("\"ownerState\" is required but got null");
            

        if (image == null) throw new IllegalArgumentException("\"image\" is required but got null");
            

        return new CreateNewApplicationRequestBuilder(appDescription, appName, appUrl, ownerAddressLine1, ownerAddressLine2, ownerCity, ownerCountry, ownerName, ownerPostalCode, ownerState, image);
    }
    private okhttp3.Call getApplicationStatusCall(String preAppId, String applicationId, String status, String appName, Long submittedDate, Long modifiedDate, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v2/partners/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (preAppId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preAppId", preAppId));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicationId", applicationId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (appName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appName", appName));
        }

        if (submittedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submittedDate", submittedDate));
        }

        if (modifiedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedDate", modifiedDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationStatusValidateBeforeCall(String preAppId, String applicationId, String status, String appName, Long submittedDate, Long modifiedDate, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getApplicationStatusCall(preAppId, applicationId, status, appName, submittedDate, modifiedDate, page, pageSize, _callback);

    }


    private ApiResponse<AppStatuses> getApplicationStatusWithHttpInfo(String preAppId, String applicationId, String status, String appName, Long submittedDate, Long modifiedDate, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApplicationStatusValidateBeforeCall(preAppId, applicationId, status, appName, submittedDate, modifiedDate, page, pageSize, null);
        Type localVarReturnType = new TypeToken<AppStatuses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApplicationStatusAsync(String preAppId, String applicationId, String status, String appName, Long submittedDate, Long modifiedDate, Integer page, Integer pageSize, final ApiCallback<AppStatuses> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationStatusValidateBeforeCall(preAppId, applicationId, status, appName, submittedDate, modifiedDate, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<AppStatuses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApplicationStatusRequestBuilder {
        private String preAppId;
        private String applicationId;
        private String status;
        private String appName;
        private Long submittedDate;
        private Long modifiedDate;
        private Integer page;
        private Integer pageSize;

        private GetApplicationStatusRequestBuilder() {
        }

        /**
         * Set preAppId
         * @param preAppId The application registration tracking ID (optional)
         * @return GetApplicationStatusRequestBuilder
         */
        public GetApplicationStatusRequestBuilder preAppId(String preAppId) {
            this.preAppId = preAppId;
            return this;
        }
        
        /**
         * Set applicationId
         * @param applicationId The application ID (optional)
         * @return GetApplicationStatusRequestBuilder
         */
        public GetApplicationStatusRequestBuilder applicationId(String applicationId) {
            this.applicationId = applicationId;
            return this;
        }
        
        /**
         * Set status
         * @param status Look up app registration requests by status (optional)
         * @return GetApplicationStatusRequestBuilder
         */
        public GetApplicationStatusRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set appName
         * @param appName Look up app registration requests by app name (optional)
         * @return GetApplicationStatusRequestBuilder
         */
        public GetApplicationStatusRequestBuilder appName(String appName) {
            this.appName = appName;
            return this;
        }
        
        /**
         * Set submittedDate
         * @param submittedDate Look up app registration requests by the date they were submitted (optional)
         * @return GetApplicationStatusRequestBuilder
         */
        public GetApplicationStatusRequestBuilder submittedDate(Long submittedDate) {
            this.submittedDate = submittedDate;
            return this;
        }
        
        /**
         * Set modifiedDate
         * @param modifiedDate Look up app registration requests by the date the request was updated. This can be used to determine when a request was updated to \&quot;A\&quot; or \&quot;R\&quot;. (optional)
         * @return GetApplicationStatusRequestBuilder
         */
        public GetApplicationStatusRequestBuilder modifiedDate(Long modifiedDate) {
            this.modifiedDate = modifiedDate;
            return this;
        }
        
        /**
         * Set page
         * @param page Index of the page of results to return (optional, default to 1)
         * @return GetApplicationStatusRequestBuilder
         */
        public GetApplicationStatusRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Maximum number of results per page (optional, default to 1)
         * @return GetApplicationStatusRequestBuilder
         */
        public GetApplicationStatusRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getApplicationStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app registration statuses were returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApplicationStatusCall(preAppId, applicationId, status, appName, submittedDate, modifiedDate, page, pageSize, _callback);
        }


        /**
         * Execute getApplicationStatus request
         * @return AppStatuses
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app registration statuses were returned </td><td>  -  </td></tr>
         </table>
         */
        public AppStatuses execute() throws ApiException {
            ApiResponse<AppStatuses> localVarResp = getApplicationStatusWithHttpInfo(preAppId, applicationId, status, appName, submittedDate, modifiedDate, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApplicationStatus request with HTTP info returned
         * @return ApiResponse&lt;AppStatuses&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app registration statuses were returned </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppStatuses> executeWithHttpInfo() throws ApiException {
            return getApplicationStatusWithHttpInfo(preAppId, applicationId, status, appName, submittedDate, modifiedDate, page, pageSize);
        }

        /**
         * Execute getApplicationStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app registration statuses were returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppStatuses> _callback) throws ApiException {
            return getApplicationStatusAsync(preAppId, applicationId, status, appName, submittedDate, modifiedDate, page, pageSize, _callback);
        }
    }

    /**
     * Get App Registration Status
     * Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @return GetApplicationStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The app registration statuses were returned </td><td>  -  </td></tr>
     </table>
     */
    public GetApplicationStatusRequestBuilder getApplicationStatus() throws IllegalArgumentException {
        return new GetApplicationStatusRequestBuilder();
    }
    private okhttp3.Call migrateInstitutionLoginAccountsCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/migration"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "institutionLoginId" + "}", localVarApiClient.escapeString(institutionLoginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrateInstitutionLoginAccountsValidateBeforeCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling migrateInstitutionLoginAccounts(Async)");
        }

        // verify the required parameter 'institutionLoginId' is set
        if (institutionLoginId == null) {
            throw new ApiException("Missing the required parameter 'institutionLoginId' when calling migrateInstitutionLoginAccounts(Async)");
        }

        return migrateInstitutionLoginAccountsCall(customerId, institutionLoginId, _callback);

    }


    private ApiResponse<CustomerAccounts> migrateInstitutionLoginAccountsWithHttpInfo(String customerId, String institutionLoginId) throws ApiException {
        okhttp3.Call localVarCall = migrateInstitutionLoginAccountsValidateBeforeCall(customerId, institutionLoginId, null);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call migrateInstitutionLoginAccountsAsync(String customerId, String institutionLoginId, final ApiCallback<CustomerAccounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrateInstitutionLoginAccountsValidateBeforeCall(customerId, institutionLoginId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MigrateInstitutionLoginAccountsRequestBuilder {
        private final String customerId;
        private final String institutionLoginId;

        private MigrateInstitutionLoginAccountsRequestBuilder(String customerId, String institutionLoginId) {
            this.customerId = customerId;
            this.institutionLoginId = institutionLoginId;
        }

        /**
         * Build call for migrateInstitutionLoginAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The migration succeeded </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return migrateInstitutionLoginAccountsCall(customerId, institutionLoginId, _callback);
        }


        /**
         * Execute migrateInstitutionLoginAccounts request
         * @return CustomerAccounts
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The migration succeeded </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccounts execute() throws ApiException {
            ApiResponse<CustomerAccounts> localVarResp = migrateInstitutionLoginAccountsWithHttpInfo(customerId, institutionLoginId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute migrateInstitutionLoginAccounts request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccounts&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The migration succeeded </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccounts> executeWithHttpInfo() throws ApiException {
            return migrateInstitutionLoginAccountsWithHttpInfo(customerId, institutionLoginId);
        }

        /**
         * Execute migrateInstitutionLoginAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The migration succeeded </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccounts> _callback) throws ApiException {
            return migrateInstitutionLoginAccountsAsync(customerId, institutionLoginId, _callback);
        }
    }

    /**
     * Migrate Institution Login Accounts
     * The &#x60;institutionLoginId&#x60; parameter uses Finicity&#39;s internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param institutionLoginId The institution login ID (required)
     * @return MigrateInstitutionLoginAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration succeeded </td><td>  -  </td></tr>
     </table>
     */
    public MigrateInstitutionLoginAccountsRequestBuilder migrateInstitutionLoginAccounts(String customerId, String institutionLoginId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (institutionLoginId == null) throw new IllegalArgumentException("\"institutionLoginId\" is required but got null");
            

        return new MigrateInstitutionLoginAccountsRequestBuilder(customerId, institutionLoginId);
    }
    private okhttp3.Call updateRegistrationCall(String preAppId, Application application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = application;

        // create path and map variables
        String localVarPath = "/aggregation/v1/partners/applications/{preAppId}"
            .replace("{" + "preAppId" + "}", localVarApiClient.escapeString(preAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegistrationValidateBeforeCall(String preAppId, Application application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preAppId' is set
        if (preAppId == null) {
            throw new ApiException("Missing the required parameter 'preAppId' when calling updateRegistration(Async)");
        }

        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling updateRegistration(Async)");
        }

        return updateRegistrationCall(preAppId, application, _callback);

    }


    private ApiResponse<RegisteredApplication> updateRegistrationWithHttpInfo(String preAppId, Application application) throws ApiException {
        okhttp3.Call localVarCall = updateRegistrationValidateBeforeCall(preAppId, application, null);
        Type localVarReturnType = new TypeToken<RegisteredApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRegistrationAsync(String preAppId, Application application, final ApiCallback<RegisteredApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegistrationValidateBeforeCall(preAppId, application, _callback);
        Type localVarReturnType = new TypeToken<RegisteredApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRegistrationRequestBuilder {
        private final String appDescription;
        private final String appName;
        private final String appUrl;
        private final String ownerAddressLine1;
        private final String ownerAddressLine2;
        private final String ownerCity;
        private final String ownerCountry;
        private final String ownerName;
        private final String ownerPostalCode;
        private final String ownerState;
        private final String image;
        private final String preAppId;

        private UpdateRegistrationRequestBuilder(String appDescription, String appName, String appUrl, String ownerAddressLine1, String ownerAddressLine2, String ownerCity, String ownerCountry, String ownerName, String ownerPostalCode, String ownerState, String image, String preAppId) {
            this.appDescription = appDescription;
            this.appName = appName;
            this.appUrl = appUrl;
            this.ownerAddressLine1 = ownerAddressLine1;
            this.ownerAddressLine2 = ownerAddressLine2;
            this.ownerCity = ownerCity;
            this.ownerCountry = ownerCountry;
            this.ownerName = ownerName;
            this.ownerPostalCode = ownerPostalCode;
            this.ownerState = ownerState;
            this.image = image;
            this.preAppId = preAppId;
        }

        /**
         * Build call for updateRegistration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app registration was updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Application application = buildBodyParams();
            return updateRegistrationCall(preAppId, application, _callback);
        }

        private Application buildBodyParams() {
            Application application = new Application();
            application.appDescription(this.appDescription);
            application.appName(this.appName);
            application.appUrl(this.appUrl);
            application.ownerAddressLine1(this.ownerAddressLine1);
            application.ownerAddressLine2(this.ownerAddressLine2);
            application.ownerCity(this.ownerCity);
            application.ownerCountry(this.ownerCountry);
            application.ownerName(this.ownerName);
            application.ownerPostalCode(this.ownerPostalCode);
            application.ownerState(this.ownerState);
            application.image(this.image);
            return application;
        }

        /**
         * Execute updateRegistration request
         * @return RegisteredApplication
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app registration was updated </td><td>  -  </td></tr>
         </table>
         */
        public RegisteredApplication execute() throws ApiException {
            Application application = buildBodyParams();
            ApiResponse<RegisteredApplication> localVarResp = updateRegistrationWithHttpInfo(preAppId, application);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRegistration request with HTTP info returned
         * @return ApiResponse&lt;RegisteredApplication&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app registration was updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RegisteredApplication> executeWithHttpInfo() throws ApiException {
            Application application = buildBodyParams();
            return updateRegistrationWithHttpInfo(preAppId, application);
        }

        /**
         * Execute updateRegistration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The app registration was updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RegisteredApplication> _callback) throws ApiException {
            Application application = buildBodyParams();
            return updateRegistrationAsync(preAppId, application, _callback);
        }
    }

    /**
     * Modify App Registration
     * Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param preAppId The application registration tracking ID (required)
     * @param application  (required)
     * @return UpdateRegistrationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The app registration was updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRegistrationRequestBuilder updateRegistration(String appDescription, String appName, String appUrl, String ownerAddressLine1, String ownerAddressLine2, String ownerCity, String ownerCountry, String ownerName, String ownerPostalCode, String ownerState, String image, String preAppId) throws IllegalArgumentException {
        if (appDescription == null) throw new IllegalArgumentException("\"appDescription\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        if (appUrl == null) throw new IllegalArgumentException("\"appUrl\" is required but got null");
            

        if (ownerAddressLine1 == null) throw new IllegalArgumentException("\"ownerAddressLine1\" is required but got null");
            

        if (ownerAddressLine2 == null) throw new IllegalArgumentException("\"ownerAddressLine2\" is required but got null");
            

        if (ownerCity == null) throw new IllegalArgumentException("\"ownerCity\" is required but got null");
            

        if (ownerCountry == null) throw new IllegalArgumentException("\"ownerCountry\" is required but got null");
            

        if (ownerName == null) throw new IllegalArgumentException("\"ownerName\" is required but got null");
            

        if (ownerPostalCode == null) throw new IllegalArgumentException("\"ownerPostalCode\" is required but got null");
            

        if (ownerState == null) throw new IllegalArgumentException("\"ownerState\" is required but got null");
            

        if (image == null) throw new IllegalArgumentException("\"image\" is required but got null");
            

        if (preAppId == null) throw new IllegalArgumentException("\"preAppId\" is required but got null");
            

        return new UpdateRegistrationRequestBuilder(appDescription, appName, appUrl, ownerAddressLine1, ownerAddressLine2, ownerCity, ownerCountry, ownerName, ownerPostalCode, ownerState, image, preAppId);
    }
}
