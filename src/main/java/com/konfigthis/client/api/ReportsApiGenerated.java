/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Report;
import com.konfigthis.client.model.ReportSummaries;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call byConsumerIdCall(String consumerId, String purpose, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisioning/v1/consumers/{consumerId}/reports"
            .replace("{" + "consumerId" + "}", localVarApiClient.escapeString(consumerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (purpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purpose", purpose));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call byConsumerIdValidateBeforeCall(String consumerId, String purpose, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerId' is set
        if (consumerId == null) {
            throw new ApiException("Missing the required parameter 'consumerId' when calling byConsumerId(Async)");
        }

        return byConsumerIdCall(consumerId, purpose, _callback);

    }


    private ApiResponse<ReportSummaries> byConsumerIdWithHttpInfo(String consumerId, String purpose) throws ApiException {
        okhttp3.Call localVarCall = byConsumerIdValidateBeforeCall(consumerId, purpose, null);
        Type localVarReturnType = new TypeToken<ReportSummaries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call byConsumerIdAsync(String consumerId, String purpose, final ApiCallback<ReportSummaries> _callback) throws ApiException {

        okhttp3.Call localVarCall = byConsumerIdValidateBeforeCall(consumerId, purpose, _callback);
        Type localVarReturnType = new TypeToken<ReportSummaries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ByConsumerIdRequestBuilder {
        private final String consumerId;
        private String purpose;

        private ByConsumerIdRequestBuilder(String consumerId) {
            this.consumerId = consumerId;
        }

        /**
         * Set purpose
         * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
         * @return ByConsumerIdRequestBuilder
         */
        public ByConsumerIdRequestBuilder purpose(String purpose) {
            this.purpose = purpose;
            return this;
        }
        
        /**
         * Build call for byConsumerId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The reports summaries were successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return byConsumerIdCall(consumerId, purpose, _callback);
        }


        /**
         * Execute byConsumerId request
         * @return ReportSummaries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The reports summaries were successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public ReportSummaries execute() throws ApiException {
            ApiResponse<ReportSummaries> localVarResp = byConsumerIdWithHttpInfo(consumerId, purpose);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute byConsumerId request with HTTP info returned
         * @return ApiResponse&lt;ReportSummaries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The reports summaries were successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportSummaries> executeWithHttpInfo() throws ApiException {
            return byConsumerIdWithHttpInfo(consumerId, purpose);
        }

        /**
         * Execute byConsumerId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The reports summaries were successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportSummaries> _callback) throws ApiException {
            return byConsumerIdAsync(consumerId, purpose, _callback);
        }
    }

    /**
     * Get Reports by Consumer ID
     * Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The &#x60;status&#x60; fields in the returned list contain \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param consumerId The consumer ID (required)
     * @return ByConsumerIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reports summaries were successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
     </table>
     */
    public ByConsumerIdRequestBuilder byConsumerId(String consumerId) throws IllegalArgumentException {
        if (consumerId == null) throw new IllegalArgumentException("\"consumerId\" is required but got null");
            

        return new ByConsumerIdRequestBuilder(consumerId);
    }
    private okhttp3.Call byCustomerIdCall(String customerId, String purpose, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisioning/v1/customers/{customerId}/reports"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (purpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purpose", purpose));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call byCustomerIdValidateBeforeCall(String customerId, String purpose, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling byCustomerId(Async)");
        }

        return byCustomerIdCall(customerId, purpose, _callback);

    }


    private ApiResponse<ReportSummaries> byCustomerIdWithHttpInfo(String customerId, String purpose) throws ApiException {
        okhttp3.Call localVarCall = byCustomerIdValidateBeforeCall(customerId, purpose, null);
        Type localVarReturnType = new TypeToken<ReportSummaries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call byCustomerIdAsync(String customerId, String purpose, final ApiCallback<ReportSummaries> _callback) throws ApiException {

        okhttp3.Call localVarCall = byCustomerIdValidateBeforeCall(customerId, purpose, _callback);
        Type localVarReturnType = new TypeToken<ReportSummaries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ByCustomerIdRequestBuilder {
        private final String customerId;
        private String purpose;

        private ByCustomerIdRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set purpose
         * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
         * @return ByCustomerIdRequestBuilder
         */
        public ByCustomerIdRequestBuilder purpose(String purpose) {
            this.purpose = purpose;
            return this;
        }
        
        /**
         * Build call for byCustomerId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The reports summaries were successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return byCustomerIdCall(customerId, purpose, _callback);
        }


        /**
         * Execute byCustomerId request
         * @return ReportSummaries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The reports summaries were successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public ReportSummaries execute() throws ApiException {
            ApiResponse<ReportSummaries> localVarResp = byCustomerIdWithHttpInfo(customerId, purpose);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute byCustomerId request with HTTP info returned
         * @return ApiResponse&lt;ReportSummaries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The reports summaries were successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportSummaries> executeWithHttpInfo() throws ApiException {
            return byCustomerIdWithHttpInfo(customerId, purpose);
        }

        /**
         * Execute byCustomerId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The reports summaries were successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportSummaries> _callback) throws ApiException {
            return byCustomerIdAsync(customerId, purpose, _callback);
        }
    }

    /**
     * Get Reports by Customer ID
     * Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The &#x60;status&#x60; fields in the returned list contain \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return ByCustomerIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reports summaries were successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
     </table>
     */
    public ByCustomerIdRequestBuilder byCustomerId(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new ByCustomerIdRequestBuilder(customerId);
    }
    private okhttp3.Call getByConsumerAndIdCall(String consumerId, String reportId, String purpose, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisioning/v3/consumers/{consumerId}/reports/{reportId}"
            .replace("{" + "consumerId" + "}", localVarApiClient.escapeString(consumerId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (purpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purpose", purpose));
        }

        if (onBehalfOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onBehalfOf", onBehalfOf));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByConsumerAndIdValidateBeforeCall(String consumerId, String reportId, String purpose, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerId' is set
        if (consumerId == null) {
            throw new ApiException("Missing the required parameter 'consumerId' when calling getByConsumerAndId(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getByConsumerAndId(Async)");
        }

        return getByConsumerAndIdCall(consumerId, reportId, purpose, onBehalfOf, _callback);

    }


    private ApiResponse<Report> getByConsumerAndIdWithHttpInfo(String consumerId, String reportId, String purpose, String onBehalfOf) throws ApiException {
        okhttp3.Call localVarCall = getByConsumerAndIdValidateBeforeCall(consumerId, reportId, purpose, onBehalfOf, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByConsumerAndIdAsync(String consumerId, String reportId, String purpose, String onBehalfOf, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByConsumerAndIdValidateBeforeCall(consumerId, reportId, purpose, onBehalfOf, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByConsumerAndIdRequestBuilder {
        private final String consumerId;
        private final String reportId;
        private String purpose;
        private String onBehalfOf;

        private GetByConsumerAndIdRequestBuilder(String consumerId, String reportId) {
            this.consumerId = consumerId;
            this.reportId = reportId;
        }

        /**
         * Set purpose
         * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
         * @return GetByConsumerAndIdRequestBuilder
         */
        public GetByConsumerAndIdRequestBuilder purpose(String purpose) {
            this.purpose = purpose;
            return this;
        }
        
        /**
         * Set onBehalfOf
         * @param onBehalfOf The name of the entity you are retrieving the report on behalf of (optional)
         * @return GetByConsumerAndIdRequestBuilder
         */
        public GetByConsumerAndIdRequestBuilder onBehalfOf(String onBehalfOf) {
            this.onBehalfOf = onBehalfOf;
            return this;
        }
        
        /**
         * Build call for getByConsumerAndId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The report was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByConsumerAndIdCall(consumerId, reportId, purpose, onBehalfOf, _callback);
        }


        /**
         * Execute getByConsumerAndId request
         * @return Report
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The report was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public Report execute() throws ApiException {
            ApiResponse<Report> localVarResp = getByConsumerAndIdWithHttpInfo(consumerId, reportId, purpose, onBehalfOf);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByConsumerAndId request with HTTP info returned
         * @return ApiResponse&lt;Report&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The report was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Report> executeWithHttpInfo() throws ApiException {
            return getByConsumerAndIdWithHttpInfo(consumerId, reportId, purpose, onBehalfOf);
        }

        /**
         * Execute getByConsumerAndId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The report was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Report> _callback) throws ApiException {
            return getByConsumerAndIdAsync(consumerId, reportId, purpose, onBehalfOf, _callback);
        }
    }

    /**
     * Get Report by Consumer and ID
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report&#39;s &#x60;status&#x60; field contains \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param consumerId The consumer ID (required)
     * @param reportId ID of the report (required)
     * @return GetByConsumerAndIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The report was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetByConsumerAndIdRequestBuilder getByConsumerAndId(String consumerId, String reportId) throws IllegalArgumentException {
        if (consumerId == null) throw new IllegalArgumentException("\"consumerId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new GetByConsumerAndIdRequestBuilder(consumerId, reportId);
    }
    private okhttp3.Call getStatusCall(String customerId, String reportId, String onBehalfOf, String purpose, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisioning/v3/customers/{customerId}/reports/{reportId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (onBehalfOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onBehalfOf", onBehalfOf));
        }

        if (purpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purpose", purpose));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusValidateBeforeCall(String customerId, String reportId, String onBehalfOf, String purpose, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getStatus(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getStatus(Async)");
        }

        return getStatusCall(customerId, reportId, onBehalfOf, purpose, _callback);

    }


    private ApiResponse<Report> getStatusWithHttpInfo(String customerId, String reportId, String onBehalfOf, String purpose) throws ApiException {
        okhttp3.Call localVarCall = getStatusValidateBeforeCall(customerId, reportId, onBehalfOf, purpose, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusAsync(String customerId, String reportId, String onBehalfOf, String purpose, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusValidateBeforeCall(customerId, reportId, onBehalfOf, purpose, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusRequestBuilder {
        private final String customerId;
        private final String reportId;
        private String onBehalfOf;
        private String purpose;

        private GetStatusRequestBuilder(String customerId, String reportId) {
            this.customerId = customerId;
            this.reportId = reportId;
        }

        /**
         * Set onBehalfOf
         * @param onBehalfOf The name of the entity you are retrieving the report on behalf of (optional)
         * @return GetStatusRequestBuilder
         */
        public GetStatusRequestBuilder onBehalfOf(String onBehalfOf) {
            this.onBehalfOf = onBehalfOf;
            return this;
        }
        
        /**
         * Set purpose
         * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
         * @return GetStatusRequestBuilder
         */
        public GetStatusRequestBuilder purpose(String purpose) {
            this.purpose = purpose;
            return this;
        }
        
        /**
         * Build call for getStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The report was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusCall(customerId, reportId, onBehalfOf, purpose, _callback);
        }


        /**
         * Execute getStatus request
         * @return Report
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The report was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public Report execute() throws ApiException {
            ApiResponse<Report> localVarResp = getStatusWithHttpInfo(customerId, reportId, onBehalfOf, purpose);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatus request with HTTP info returned
         * @return ApiResponse&lt;Report&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The report was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Report> executeWithHttpInfo() throws ApiException {
            return getStatusWithHttpInfo(customerId, reportId, onBehalfOf, purpose);
        }

        /**
         * Execute getStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The report was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Report> _callback) throws ApiException {
            return getStatusAsync(customerId, reportId, onBehalfOf, purpose, _callback);
        }
    }

    /**
     * Get Report by Customer and ID
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report&#39;s &#x60;status&#x60; field contains \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param reportId ID of the report (required)
     * @return GetStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The report was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusRequestBuilder getStatus(String customerId, String reportId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new GetStatusRequestBuilder(customerId, reportId);
    }
}
