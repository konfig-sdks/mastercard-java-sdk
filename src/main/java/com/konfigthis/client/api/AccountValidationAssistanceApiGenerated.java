/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.InitiatedMicroDeposit;
import com.konfigthis.client.model.MicroDepositDetails;
import com.konfigthis.client.model.MicroDepositInitiation;
import com.konfigthis.client.model.MicroDepositVerification;
import com.konfigthis.client.model.Receiver;
import java.net.URI;
import com.konfigthis.client.model.VerifiedMicroDeposit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountValidationAssistanceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountValidationAssistanceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountValidationAssistanceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getMicroEntriesDetailsCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/microentry/v1/customers/{customerId}/accounts/{accountId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMicroEntriesDetailsValidateBeforeCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getMicroEntriesDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getMicroEntriesDetails(Async)");
        }

        return getMicroEntriesDetailsCall(customerId, accountId, _callback);

    }


    private ApiResponse<MicroDepositDetails> getMicroEntriesDetailsWithHttpInfo(String customerId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getMicroEntriesDetailsValidateBeforeCall(customerId, accountId, null);
        Type localVarReturnType = new TypeToken<MicroDepositDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMicroEntriesDetailsAsync(String customerId, String accountId, final ApiCallback<MicroDepositDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMicroEntriesDetailsValidateBeforeCall(customerId, accountId, _callback);
        Type localVarReturnType = new TypeToken<MicroDepositDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMicroEntriesDetailsRequestBuilder {
        private final String customerId;
        private final String accountId;

        private GetMicroEntriesDetailsRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for getMicroEntriesDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMicroEntriesDetailsCall(customerId, accountId, _callback);
        }


        /**
         * Execute getMicroEntriesDetails request
         * @return MicroDepositDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public MicroDepositDetails execute() throws ApiException {
            ApiResponse<MicroDepositDetails> localVarResp = getMicroEntriesDetailsWithHttpInfo(customerId, accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMicroEntriesDetails request with HTTP info returned
         * @return ApiResponse&lt;MicroDepositDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MicroDepositDetails> executeWithHttpInfo() throws ApiException {
            return getMicroEntriesDetailsWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute getMicroEntriesDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MicroDepositDetails> _callback) throws ApiException {
            return getMicroEntriesDetailsAsync(customerId, accountId, _callback);
        }
    }

    /**
     * Get Micro Entries Details
     * Fetch the micro entries details. &#x60;customerId&#x60; and &#x60;accountId&#x60; are the identifiers of the customer and account receiving the micro entries.    _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetMicroEntriesDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Micro entries were successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetMicroEntriesDetailsRequestBuilder getMicroEntriesDetails(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetMicroEntriesDetailsRequestBuilder(customerId, accountId);
    }
    private okhttp3.Call initiateMicroEntriesCall(String customerId, MicroDepositInitiation microDepositInitiation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = microDepositInitiation;

        // create path and map variables
        String localVarPath = "/microentry/v1/customers/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateMicroEntriesValidateBeforeCall(String customerId, MicroDepositInitiation microDepositInitiation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling initiateMicroEntries(Async)");
        }

        // verify the required parameter 'microDepositInitiation' is set
        if (microDepositInitiation == null) {
            throw new ApiException("Missing the required parameter 'microDepositInitiation' when calling initiateMicroEntries(Async)");
        }

        return initiateMicroEntriesCall(customerId, microDepositInitiation, _callback);

    }


    private ApiResponse<InitiatedMicroDeposit> initiateMicroEntriesWithHttpInfo(String customerId, MicroDepositInitiation microDepositInitiation) throws ApiException {
        okhttp3.Call localVarCall = initiateMicroEntriesValidateBeforeCall(customerId, microDepositInitiation, null);
        Type localVarReturnType = new TypeToken<InitiatedMicroDeposit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call initiateMicroEntriesAsync(String customerId, MicroDepositInitiation microDepositInitiation, final ApiCallback<InitiatedMicroDeposit> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateMicroEntriesValidateBeforeCall(customerId, microDepositInitiation, _callback);
        Type localVarReturnType = new TypeToken<InitiatedMicroDeposit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InitiateMicroEntriesRequestBuilder {
        private final Receiver receiver;
        private final String customerId;
        private String institutionLoginId;
        private URI callbackUrl;

        private InitiateMicroEntriesRequestBuilder(Receiver receiver, String customerId) {
            this.receiver = receiver;
            this.customerId = customerId;
        }

        /**
         * Set institutionLoginId
         * @param institutionLoginId An institution login ID (from the account record) (optional)
         * @return InitiateMicroEntriesRequestBuilder
         */
        public InitiateMicroEntriesRequestBuilder institutionLoginId(String institutionLoginId) {
            this.institutionLoginId = institutionLoginId;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A callback URL where to receive micro deposit notifications (optional)
         * @return InitiateMicroEntriesRequestBuilder
         */
        public InitiateMicroEntriesRequestBuilder callbackUrl(URI callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for initiateMicroEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully initiated </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MicroDepositInitiation microDepositInitiation = buildBodyParams();
            return initiateMicroEntriesCall(customerId, microDepositInitiation, _callback);
        }

        private MicroDepositInitiation buildBodyParams() {
            MicroDepositInitiation microDepositInitiation = new MicroDepositInitiation();
            microDepositInitiation.institutionLoginId(this.institutionLoginId);
            microDepositInitiation.receiver(this.receiver);
            microDepositInitiation.callbackUrl(this.callbackUrl);
            return microDepositInitiation;
        }

        /**
         * Execute initiateMicroEntries request
         * @return InitiatedMicroDeposit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully initiated </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public InitiatedMicroDeposit execute() throws ApiException {
            MicroDepositInitiation microDepositInitiation = buildBodyParams();
            ApiResponse<InitiatedMicroDeposit> localVarResp = initiateMicroEntriesWithHttpInfo(customerId, microDepositInitiation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute initiateMicroEntries request with HTTP info returned
         * @return ApiResponse&lt;InitiatedMicroDeposit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully initiated </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InitiatedMicroDeposit> executeWithHttpInfo() throws ApiException {
            MicroDepositInitiation microDepositInitiation = buildBodyParams();
            return initiateMicroEntriesWithHttpInfo(customerId, microDepositInitiation);
        }

        /**
         * Execute initiateMicroEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully initiated </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InitiatedMicroDeposit> _callback) throws ApiException {
            MicroDepositInitiation microDepositInitiation = buildBodyParams();
            return initiateMicroEntriesAsync(customerId, microDepositInitiation, _callback);
        }
    }

    /**
     * Initiate Micro Entries
     * Initiate the micro entries to customer&#39;s account.  Two random micro amounts less than a dollar each will be deposited to provided customer&#39;s account.    _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param microDepositInitiation  (required)
     * @return InitiateMicroEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Micro entries were successfully initiated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
     </table>
     */
    public InitiateMicroEntriesRequestBuilder initiateMicroEntries(Receiver receiver, String customerId) throws IllegalArgumentException {
        if (receiver == null) throw new IllegalArgumentException("\"receiver\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new InitiateMicroEntriesRequestBuilder(receiver, customerId);
    }
    private okhttp3.Call verifyMicroEntriesCall(String customerId, String accountId, MicroDepositVerification microDepositVerification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = microDepositVerification;

        // create path and map variables
        String localVarPath = "/microentry/v1/customers/{customerId}/accounts/{accountId}/amounts"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyMicroEntriesValidateBeforeCall(String customerId, String accountId, MicroDepositVerification microDepositVerification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling verifyMicroEntries(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling verifyMicroEntries(Async)");
        }

        // verify the required parameter 'microDepositVerification' is set
        if (microDepositVerification == null) {
            throw new ApiException("Missing the required parameter 'microDepositVerification' when calling verifyMicroEntries(Async)");
        }

        return verifyMicroEntriesCall(customerId, accountId, microDepositVerification, _callback);

    }


    private ApiResponse<VerifiedMicroDeposit> verifyMicroEntriesWithHttpInfo(String customerId, String accountId, MicroDepositVerification microDepositVerification) throws ApiException {
        okhttp3.Call localVarCall = verifyMicroEntriesValidateBeforeCall(customerId, accountId, microDepositVerification, null);
        Type localVarReturnType = new TypeToken<VerifiedMicroDeposit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyMicroEntriesAsync(String customerId, String accountId, MicroDepositVerification microDepositVerification, final ApiCallback<VerifiedMicroDeposit> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyMicroEntriesValidateBeforeCall(customerId, accountId, microDepositVerification, _callback);
        Type localVarReturnType = new TypeToken<VerifiedMicroDeposit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyMicroEntriesRequestBuilder {
        private final List<Float> amounts;
        private final String customerId;
        private final String accountId;

        private VerifyMicroEntriesRequestBuilder(List<Float> amounts, String customerId, String accountId) {
            this.amounts = amounts;
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for verifyMicroEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully verified </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MicroDepositVerification microDepositVerification = buildBodyParams();
            return verifyMicroEntriesCall(customerId, accountId, microDepositVerification, _callback);
        }

        private MicroDepositVerification buildBodyParams() {
            MicroDepositVerification microDepositVerification = new MicroDepositVerification();
            microDepositVerification.amounts(this.amounts);
            return microDepositVerification;
        }

        /**
         * Execute verifyMicroEntries request
         * @return VerifiedMicroDeposit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully verified </td><td>  -  </td></tr>
         </table>
         */
        public VerifiedMicroDeposit execute() throws ApiException {
            MicroDepositVerification microDepositVerification = buildBodyParams();
            ApiResponse<VerifiedMicroDeposit> localVarResp = verifyMicroEntriesWithHttpInfo(customerId, accountId, microDepositVerification);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyMicroEntries request with HTTP info returned
         * @return ApiResponse&lt;VerifiedMicroDeposit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully verified </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VerifiedMicroDeposit> executeWithHttpInfo() throws ApiException {
            MicroDepositVerification microDepositVerification = buildBodyParams();
            return verifyMicroEntriesWithHttpInfo(customerId, accountId, microDepositVerification);
        }

        /**
         * Execute verifyMicroEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Micro entries were successfully verified </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifiedMicroDeposit> _callback) throws ApiException {
            MicroDepositVerification microDepositVerification = buildBodyParams();
            return verifyMicroEntriesAsync(customerId, accountId, microDepositVerification, _callback);
        }
    }

    /**
     * Verify Micro Entries
     * Verify the micro entries as received by customer in customer&#39;s account. Customer needs to verify the micro amounts received in customer&#39;s account. &#x60;customerId&#x60; and &#x60;accountId&#x60; are the identifiers of the customer and account  receiving the micro entries.    _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @param microDepositVerification  (required)
     * @return VerifyMicroEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Micro entries were successfully verified </td><td>  -  </td></tr>
     </table>
     */
    public VerifyMicroEntriesRequestBuilder verifyMicroEntries(List<Float> amounts, String customerId, String accountId) throws IllegalArgumentException {
        if (amounts == null) throw new IllegalArgumentException("\"amounts\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new VerifyMicroEntriesRequestBuilder(amounts, customerId, accountId);
    }
}
