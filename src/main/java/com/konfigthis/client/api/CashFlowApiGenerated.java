/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CashFlowReportAck;
import com.konfigthis.client.model.CashFlowReportConstraints;
import com.konfigthis.client.model.ReportCustomField;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CashFlowApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CashFlowApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CashFlowApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generatePersonalReportCall(String customerId, CashFlowReportConstraints cashFlowReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cashFlowReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/cashFlowPersonal"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePersonalReportValidateBeforeCall(String customerId, CashFlowReportConstraints cashFlowReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generatePersonalReport(Async)");
        }

        // verify the required parameter 'cashFlowReportConstraints' is set
        if (cashFlowReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'cashFlowReportConstraints' when calling generatePersonalReport(Async)");
        }

        return generatePersonalReportCall(customerId, cashFlowReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<CashFlowReportAck> generatePersonalReportWithHttpInfo(String customerId, CashFlowReportConstraints cashFlowReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = generatePersonalReportValidateBeforeCall(customerId, cashFlowReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<CashFlowReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generatePersonalReportAsync(String customerId, CashFlowReportConstraints cashFlowReportConstraints, String callbackUrl, final ApiCallback<CashFlowReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePersonalReportValidateBeforeCall(customerId, cashFlowReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<CashFlowReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GeneratePersonalReportRequestBuilder {
        private final String customerId;
        private String accountIds;
        private List<ReportCustomField> reportCustomFields;
        private Boolean showNsf;
        private Long fromDate;
        private Integer incomeStreamConfidenceMinimum;
        private String callbackUrl;

        private GeneratePersonalReportRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set accountIds
         * @param accountIds A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set) (optional)
         * @return GeneratePersonalReportRequestBuilder
         */
        public GeneratePersonalReportRequestBuilder accountIds(String accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GeneratePersonalReportRequestBuilder
         */
        public GeneratePersonalReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set showNsf
         * @param showNsf Include the non-sufficient funds (NSF) summary JSON and the NSF summary PDF section in the report. Data included: * Account  * Total number of NSF funds  * Days since the most recent NFS funds fee (optional)
         * @return GeneratePersonalReportRequestBuilder
         */
        public GeneratePersonalReportRequestBuilder showNsf(Boolean showNsf) {
            this.showNsf = showNsf;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return GeneratePersonalReportRequestBuilder
         */
        public GeneratePersonalReportRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set incomeStreamConfidenceMinimum
         * @param incomeStreamConfidenceMinimum Include income streams in the report, based on the income stream&#39;s confidence score. For example, Use the value 50 to include only income streams with a confidence score of 50 or higher. (optional)
         * @return GeneratePersonalReportRequestBuilder
         */
        public GeneratePersonalReportRequestBuilder incomeStreamConfidenceMinimum(Integer incomeStreamConfidenceMinimum) {
            this.incomeStreamConfidenceMinimum = incomeStreamConfidenceMinimum;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GeneratePersonalReportRequestBuilder
         */
        public GeneratePersonalReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for generatePersonalReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CashFlowReportConstraints cashFlowReportConstraints = buildBodyParams();
            return generatePersonalReportCall(customerId, cashFlowReportConstraints, callbackUrl, _callback);
        }

        private CashFlowReportConstraints buildBodyParams() {
            CashFlowReportConstraints cashFlowReportConstraints = new CashFlowReportConstraints();
            cashFlowReportConstraints.accountIds(this.accountIds);
            cashFlowReportConstraints.reportCustomFields(this.reportCustomFields);
            cashFlowReportConstraints.showNsf(this.showNsf);
            cashFlowReportConstraints.fromDate(this.fromDate);
            cashFlowReportConstraints.incomeStreamConfidenceMinimum(this.incomeStreamConfidenceMinimum);
            return cashFlowReportConstraints;
        }

        /**
         * Execute generatePersonalReport request
         * @return CashFlowReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public CashFlowReportAck execute() throws ApiException {
            CashFlowReportConstraints cashFlowReportConstraints = buildBodyParams();
            ApiResponse<CashFlowReportAck> localVarResp = generatePersonalReportWithHttpInfo(customerId, cashFlowReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generatePersonalReport request with HTTP info returned
         * @return ApiResponse&lt;CashFlowReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CashFlowReportAck> executeWithHttpInfo() throws ApiException {
            CashFlowReportConstraints cashFlowReportConstraints = buildBodyParams();
            return generatePersonalReportWithHttpInfo(customerId, cashFlowReportConstraints, callbackUrl);
        }

        /**
         * Execute generatePersonalReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CashFlowReportAck> _callback) throws ApiException {
            CashFlowReportConstraints cashFlowReportConstraints = buildBodyParams();
            return generatePersonalReportAsync(customerId, cashFlowReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate Cash Flow Report - Personal
     * Generate a Cash Flow Report (Personal) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report.  This report is provided under FCRA rules, with Finicity acting as the CRA (Consumer Reporting Agency). If an individual account is included in the report - for example, with an individual acting as an personal guarantor on the loan - then this version of the report should be used. In case of an adverse action on the loan where the decision was based on this report, then the borrower can be referred to the [Finicity Consumer Portal](https://consumer.finicityreports.com) where they can view this report and submit a dispute if they feel any information in this report is inaccurate.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param cashFlowReportConstraints  (required)
     * @return GeneratePersonalReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GeneratePersonalReportRequestBuilder generatePersonalReport(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GeneratePersonalReportRequestBuilder(customerId);
    }
    private okhttp3.Call generateReportBusinessCall(String customerId, CashFlowReportConstraints cashFlowReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cashFlowReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/cashFlowBusiness"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateReportBusinessValidateBeforeCall(String customerId, CashFlowReportConstraints cashFlowReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateReportBusiness(Async)");
        }

        // verify the required parameter 'cashFlowReportConstraints' is set
        if (cashFlowReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'cashFlowReportConstraints' when calling generateReportBusiness(Async)");
        }

        return generateReportBusinessCall(customerId, cashFlowReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<CashFlowReportAck> generateReportBusinessWithHttpInfo(String customerId, CashFlowReportConstraints cashFlowReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = generateReportBusinessValidateBeforeCall(customerId, cashFlowReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<CashFlowReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateReportBusinessAsync(String customerId, CashFlowReportConstraints cashFlowReportConstraints, String callbackUrl, final ApiCallback<CashFlowReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateReportBusinessValidateBeforeCall(customerId, cashFlowReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<CashFlowReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateReportBusinessRequestBuilder {
        private final String customerId;
        private String accountIds;
        private List<ReportCustomField> reportCustomFields;
        private Boolean showNsf;
        private Long fromDate;
        private Integer incomeStreamConfidenceMinimum;
        private String callbackUrl;

        private GenerateReportBusinessRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set accountIds
         * @param accountIds A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set) (optional)
         * @return GenerateReportBusinessRequestBuilder
         */
        public GenerateReportBusinessRequestBuilder accountIds(String accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GenerateReportBusinessRequestBuilder
         */
        public GenerateReportBusinessRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set showNsf
         * @param showNsf Include the non-sufficient funds (NSF) summary JSON and the NSF summary PDF section in the report. Data included: * Account  * Total number of NSF funds  * Days since the most recent NFS funds fee (optional)
         * @return GenerateReportBusinessRequestBuilder
         */
        public GenerateReportBusinessRequestBuilder showNsf(Boolean showNsf) {
            this.showNsf = showNsf;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return GenerateReportBusinessRequestBuilder
         */
        public GenerateReportBusinessRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set incomeStreamConfidenceMinimum
         * @param incomeStreamConfidenceMinimum Include income streams in the report, based on the income stream&#39;s confidence score. For example, Use the value 50 to include only income streams with a confidence score of 50 or higher. (optional)
         * @return GenerateReportBusinessRequestBuilder
         */
        public GenerateReportBusinessRequestBuilder incomeStreamConfidenceMinimum(Integer incomeStreamConfidenceMinimum) {
            this.incomeStreamConfidenceMinimum = incomeStreamConfidenceMinimum;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GenerateReportBusinessRequestBuilder
         */
        public GenerateReportBusinessRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for generateReportBusiness
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CashFlowReportConstraints cashFlowReportConstraints = buildBodyParams();
            return generateReportBusinessCall(customerId, cashFlowReportConstraints, callbackUrl, _callback);
        }

        private CashFlowReportConstraints buildBodyParams() {
            CashFlowReportConstraints cashFlowReportConstraints = new CashFlowReportConstraints();
            cashFlowReportConstraints.accountIds(this.accountIds);
            cashFlowReportConstraints.reportCustomFields(this.reportCustomFields);
            cashFlowReportConstraints.showNsf(this.showNsf);
            cashFlowReportConstraints.fromDate(this.fromDate);
            cashFlowReportConstraints.incomeStreamConfidenceMinimum(this.incomeStreamConfidenceMinimum);
            return cashFlowReportConstraints;
        }

        /**
         * Execute generateReportBusiness request
         * @return CashFlowReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public CashFlowReportAck execute() throws ApiException {
            CashFlowReportConstraints cashFlowReportConstraints = buildBodyParams();
            ApiResponse<CashFlowReportAck> localVarResp = generateReportBusinessWithHttpInfo(customerId, cashFlowReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateReportBusiness request with HTTP info returned
         * @return ApiResponse&lt;CashFlowReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CashFlowReportAck> executeWithHttpInfo() throws ApiException {
            CashFlowReportConstraints cashFlowReportConstraints = buildBodyParams();
            return generateReportBusinessWithHttpInfo(customerId, cashFlowReportConstraints, callbackUrl);
        }

        /**
         * Execute generateReportBusiness request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CashFlowReportAck> _callback) throws ApiException {
            CashFlowReportConstraints cashFlowReportConstraints = buildBodyParams();
            return generateReportBusinessAsync(customerId, cashFlowReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate Cash Flow Report - Business
     * Generate a Cash Flow Report (Business) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report. A consumer is not required to generate this report.  This report is not provided under FCRA rules, and this report is not available in the Finicity Consumer Portal for the borrower to view.  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param cashFlowReportConstraints  (required)
     * @return GenerateReportBusinessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateReportBusinessRequestBuilder generateReportBusiness(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateReportBusinessRequestBuilder(customerId);
    }
}
