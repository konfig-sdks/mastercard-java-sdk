/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.ObbAnalyticsReport;
import com.konfigthis.client.model.ObbAnalyticsReportAck;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentHistoryApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentHistoryApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentHistoryApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateCustomerPaymentReportCall(String customerId, String referenceNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analytics/payment-history/v1/customer/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference-number", referenceNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateCustomerPaymentReportValidateBeforeCall(String customerId, String referenceNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateCustomerPaymentReport(Async)");
        }

        return generateCustomerPaymentReportCall(customerId, referenceNumber, _callback);

    }


    private ApiResponse<ObbAnalyticsReportAck> generateCustomerPaymentReportWithHttpInfo(String customerId, String referenceNumber) throws ApiException {
        okhttp3.Call localVarCall = generateCustomerPaymentReportValidateBeforeCall(customerId, referenceNumber, null);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateCustomerPaymentReportAsync(String customerId, String referenceNumber, final ApiCallback<ObbAnalyticsReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateCustomerPaymentReportValidateBeforeCall(customerId, referenceNumber, _callback);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateCustomerPaymentReportRequestBuilder {
        private final String customerId;
        private String referenceNumber;

        private GenerateCustomerPaymentReportRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set referenceNumber
         * @param referenceNumber Partner-provided reference number to correlate reports. (optional)
         * @return GenerateCustomerPaymentReportRequestBuilder
         */
        public GenerateCustomerPaymentReportRequestBuilder referenceNumber(String referenceNumber) {
            this.referenceNumber = referenceNumber;
            return this;
        }
        
        /**
         * Build call for generateCustomerPaymentReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when payment history was generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateCustomerPaymentReportCall(customerId, referenceNumber, _callback);
        }


        /**
         * Execute generateCustomerPaymentReport request
         * @return ObbAnalyticsReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when payment history was generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public ObbAnalyticsReportAck execute() throws ApiException {
            ApiResponse<ObbAnalyticsReportAck> localVarResp = generateCustomerPaymentReportWithHttpInfo(customerId, referenceNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateCustomerPaymentReport request with HTTP info returned
         * @return ApiResponse&lt;ObbAnalyticsReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when payment history was generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObbAnalyticsReportAck> executeWithHttpInfo() throws ApiException {
            return generateCustomerPaymentReportWithHttpInfo(customerId, referenceNumber);
        }

        /**
         * Execute generateCustomerPaymentReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when payment history was generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObbAnalyticsReportAck> _callback) throws ApiException {
            return generateCustomerPaymentReportAsync(customerId, referenceNumber, _callback);
        }
    }

    /**
     * Generate Payment History
     * Payment history report analyzes up to 12-months of transactions and predicts the probability that a SMB will experience a payment risk event, such as NSF/Overdraft or missed recurring payments, in the near future when making a payment. The Risk Score provided in the report is a 2-digit ranking with four levels of risk going from low to high.  Some of the highlights of calculated risk present in the report include: * Risk Score representing the likelihood of a missed payment   based on analysis of permissioned open-banking data  * Monthly average balance for all accounts by month in the requested   time period  * Total deposit amount by month for all accounts in the requested time   period  * Total withdrawal amounts by month for all accounts in the requested   time period  * Number of NSF counts and aggregate amount per month in the requested   time period  * Recurring loan payment amounts per month in the requested time period * Insurance payment amount per month in the requested time period * Tax payment amounts per month in the requested time period  This version of the API is intended for piloting and integration testing your application with the Payment History product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Payment History - FCRA_ for the FCRA compliant version of this API.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get OBB Analytics Report_ (operation: _GetObbAnalyticsReport_). *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return GenerateCustomerPaymentReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response given when payment history was generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateCustomerPaymentReportRequestBuilder generateCustomerPaymentReport(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateCustomerPaymentReportRequestBuilder(customerId);
    }
    private okhttp3.Call generateFcraPaymentReportCall(String customerId, String referenceNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analytics/payment-history/v1/customer/{customerId}/fcra"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference-number", referenceNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateFcraPaymentReportValidateBeforeCall(String customerId, String referenceNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateFcraPaymentReport(Async)");
        }

        return generateFcraPaymentReportCall(customerId, referenceNumber, _callback);

    }


    private ApiResponse<ObbAnalyticsReportAck> generateFcraPaymentReportWithHttpInfo(String customerId, String referenceNumber) throws ApiException {
        okhttp3.Call localVarCall = generateFcraPaymentReportValidateBeforeCall(customerId, referenceNumber, null);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateFcraPaymentReportAsync(String customerId, String referenceNumber, final ApiCallback<ObbAnalyticsReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateFcraPaymentReportValidateBeforeCall(customerId, referenceNumber, _callback);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateFcraPaymentReportRequestBuilder {
        private final String customerId;
        private String referenceNumber;

        private GenerateFcraPaymentReportRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set referenceNumber
         * @param referenceNumber Partner-provided reference number to correlate reports. (optional)
         * @return GenerateFcraPaymentReportRequestBuilder
         */
        public GenerateFcraPaymentReportRequestBuilder referenceNumber(String referenceNumber) {
            this.referenceNumber = referenceNumber;
            return this;
        }
        
        /**
         * Build call for generateFcraPaymentReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when payment history (FCRA) was generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateFcraPaymentReportCall(customerId, referenceNumber, _callback);
        }


        /**
         * Execute generateFcraPaymentReport request
         * @return ObbAnalyticsReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when payment history (FCRA) was generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public ObbAnalyticsReportAck execute() throws ApiException {
            ApiResponse<ObbAnalyticsReportAck> localVarResp = generateFcraPaymentReportWithHttpInfo(customerId, referenceNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateFcraPaymentReport request with HTTP info returned
         * @return ApiResponse&lt;ObbAnalyticsReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when payment history (FCRA) was generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObbAnalyticsReportAck> executeWithHttpInfo() throws ApiException {
            return generateFcraPaymentReportWithHttpInfo(customerId, referenceNumber);
        }

        /**
         * Execute generateFcraPaymentReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when payment history (FCRA) was generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObbAnalyticsReportAck> _callback) throws ApiException {
            return generateFcraPaymentReportAsync(customerId, referenceNumber, _callback);
        }
    }

    /**
     * Generate Payment History - FCRA
     * Payment history report analyzes up to 12-months of transactions and predicts the probability that a SMB will experience a payment risk event, such as NSF/Overdraft or missed recurring payments, in the near future when making a payment. The Risk Score provided in the report is a 2-digit ranking with four levels of risk going from low to high.  Some of the highlights of calculated risk present in the report include: * Risk Score representing the likelihood of a missed payment   based on analysis of permissioned open-banking data  * Monthly average balance for all accounts by month in the requested   time period  * Total deposit amount by month for all accounts in the requested time   period  * Total withdrawal amounts by month for all accounts in the requested   time period  * Number of NSF counts and aggregate amount per month in the requested   time period  * Recurring loan payment amounts per month in the requested time period * Insurance payment amount per month in the requested time period * Tax payment amounts per month in the requested time period  This version of the API is intended for production use. It maintains and  enforces all compliance with FCRA rules and requirements.   *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get OBB Analytics Report - FCRA_  (operation: _GetObbAnalyticsReportFcra_).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return GenerateFcraPaymentReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response given when payment history (FCRA) was generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateFcraPaymentReportRequestBuilder generateFcraPaymentReport(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateFcraPaymentReportRequestBuilder(customerId);
    }
    private okhttp3.Call getReportDataCall(String obbReportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analytics/data/v1/{obb_report_id}"
            .replace("{" + "obb_report_id" + "}", localVarApiClient.escapeString(obbReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportDataValidateBeforeCall(String obbReportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'obbReportId' is set
        if (obbReportId == null) {
            throw new ApiException("Missing the required parameter 'obbReportId' when calling getReportData(Async)");
        }

        return getReportDataCall(obbReportId, _callback);

    }


    private ApiResponse<ObbAnalyticsReport> getReportDataWithHttpInfo(String obbReportId) throws ApiException {
        okhttp3.Call localVarCall = getReportDataValidateBeforeCall(obbReportId, null);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReportDataAsync(String obbReportId, final ApiCallback<ObbAnalyticsReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportDataValidateBeforeCall(obbReportId, _callback);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetReportDataRequestBuilder {
        private final String obbReportId;

        private GetReportDataRequestBuilder(String obbReportId) {
            this.obbReportId = obbReportId;
        }

        /**
         * Build call for getReportData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReportDataCall(obbReportId, _callback);
        }


        /**
         * Execute getReportData request
         * @return ObbAnalyticsReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public ObbAnalyticsReport execute() throws ApiException {
            ApiResponse<ObbAnalyticsReport> localVarResp = getReportDataWithHttpInfo(obbReportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getReportData request with HTTP info returned
         * @return ApiResponse&lt;ObbAnalyticsReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObbAnalyticsReport> executeWithHttpInfo() throws ApiException {
            return getReportDataWithHttpInfo(obbReportId);
        }

        /**
         * Execute getReportData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObbAnalyticsReport> _callback) throws ApiException {
            return getReportDataAsync(obbReportId, _callback);
        }
    }

    /**
     * Get OBB Analytics Report
     * Retrieve the report saved by _Generate Balance Analytics_, _Generate Cash Flow Analytics_, or _Generate Payment History_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param obbReportId Report ID generated and returned by OBB products (required)
     * @return GetReportDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OBB Analytics report data as JSON or PDF </td><td>  -  </td></tr>
     </table>
     */
    public GetReportDataRequestBuilder getReportData(String obbReportId) throws IllegalArgumentException {
        if (obbReportId == null) throw new IllegalArgumentException("\"obbReportId\" is required but got null");
            

        return new GetReportDataRequestBuilder(obbReportId);
    }
    private okhttp3.Call getReportDataFcraCall(String obbReportId, String purpose, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analytics/data/v1/{obb_report_id}/fcra"
            .replace("{" + "obb_report_id" + "}", localVarApiClient.escapeString(obbReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (purpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purpose", purpose));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportDataFcraValidateBeforeCall(String obbReportId, String purpose, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'obbReportId' is set
        if (obbReportId == null) {
            throw new ApiException("Missing the required parameter 'obbReportId' when calling getReportDataFcra(Async)");
        }

        // verify the required parameter 'purpose' is set
        if (purpose == null) {
            throw new ApiException("Missing the required parameter 'purpose' when calling getReportDataFcra(Async)");
        }

        return getReportDataFcraCall(obbReportId, purpose, _callback);

    }


    private ApiResponse<ObbAnalyticsReport> getReportDataFcraWithHttpInfo(String obbReportId, String purpose) throws ApiException {
        okhttp3.Call localVarCall = getReportDataFcraValidateBeforeCall(obbReportId, purpose, null);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReportDataFcraAsync(String obbReportId, String purpose, final ApiCallback<ObbAnalyticsReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportDataFcraValidateBeforeCall(obbReportId, purpose, _callback);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetReportDataFcraRequestBuilder {
        private final String obbReportId;
        private final String purpose;

        private GetReportDataFcraRequestBuilder(String obbReportId, String purpose) {
            this.obbReportId = obbReportId;
            this.purpose = purpose;
        }

        /**
         * Build call for getReportDataFcra
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics FCRA report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReportDataFcraCall(obbReportId, purpose, _callback);
        }


        /**
         * Execute getReportDataFcra request
         * @return ObbAnalyticsReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics FCRA report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public ObbAnalyticsReport execute() throws ApiException {
            ApiResponse<ObbAnalyticsReport> localVarResp = getReportDataFcraWithHttpInfo(obbReportId, purpose);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getReportDataFcra request with HTTP info returned
         * @return ApiResponse&lt;ObbAnalyticsReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics FCRA report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObbAnalyticsReport> executeWithHttpInfo() throws ApiException {
            return getReportDataFcraWithHttpInfo(obbReportId, purpose);
        }

        /**
         * Execute getReportDataFcra request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics FCRA report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObbAnalyticsReport> _callback) throws ApiException {
            return getReportDataFcraAsync(obbReportId, purpose, _callback);
        }
    }

    /**
     * Get OBB Analytics Report - FCRA
     * Retrieve the report saved by _Generate Balance Analytics - FCRA_, _Generate Cash Flow Analytics - FCRA_, or _Generate Payment History - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param obbReportId Report ID generated and returned by OBB products (required)
     * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (required)
     * @return GetReportDataFcraRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OBB Analytics FCRA report data as JSON or PDF </td><td>  -  </td></tr>
     </table>
     */
    public GetReportDataFcraRequestBuilder getReportDataFcra(String obbReportId, String purpose) throws IllegalArgumentException {
        if (obbReportId == null) throw new IllegalArgumentException("\"obbReportId\" is required but got null");
            

        if (purpose == null) throw new IllegalArgumentException("\"purpose\" is required but got null");
            

        return new GetReportDataFcraRequestBuilder(obbReportId, purpose);
    }
}
