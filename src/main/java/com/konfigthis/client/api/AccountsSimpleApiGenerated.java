/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomerAccountSimple;
import com.konfigthis.client.model.CustomerAccountsSimple;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountsSimpleApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsSimpleApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsSimpleApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBasicInfoCall(String customerId, Long institutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/institutions/{institutionId}/accounts/simple"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "institutionId" + "}", localVarApiClient.escapeString(institutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBasicInfoValidateBeforeCall(String customerId, Long institutionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getBasicInfo(Async)");
        }

        // verify the required parameter 'institutionId' is set
        if (institutionId == null) {
            throw new ApiException("Missing the required parameter 'institutionId' when calling getBasicInfo(Async)");
        }

        return getBasicInfoCall(customerId, institutionId, _callback);

    }


    private ApiResponse<CustomerAccountsSimple> getBasicInfoWithHttpInfo(String customerId, Long institutionId) throws ApiException {
        okhttp3.Call localVarCall = getBasicInfoValidateBeforeCall(customerId, institutionId, null);
        Type localVarReturnType = new TypeToken<CustomerAccountsSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBasicInfoAsync(String customerId, Long institutionId, final ApiCallback<CustomerAccountsSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBasicInfoValidateBeforeCall(customerId, institutionId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccountsSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBasicInfoRequestBuilder {
        private final String customerId;
        private final Long institutionId;

        private GetBasicInfoRequestBuilder(String customerId, Long institutionId) {
            this.customerId = customerId;
            this.institutionId = institutionId;
        }

        /**
         * Build call for getBasicInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBasicInfoCall(customerId, institutionId, _callback);
        }


        /**
         * Execute getBasicInfo request
         * @return CustomerAccountsSimple
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccountsSimple execute() throws ApiException {
            ApiResponse<CustomerAccountsSimple> localVarResp = getBasicInfoWithHttpInfo(customerId, institutionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBasicInfo request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccountsSimple&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccountsSimple> executeWithHttpInfo() throws ApiException {
            return getBasicInfoWithHttpInfo(customerId, institutionId);
        }

        /**
         * Execute getBasicInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccountsSimple> _callback) throws ApiException {
            return getBasicInfoAsync(customerId, institutionId, _callback);
        }
    }

    /**
     * Get Customer Accounts by Institution ID (Simple)
     * This API is a lighter version of Get Customer Accounts by Institution ID, returning only basic information of active accounts owned by the given customer at the given institution.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param institutionId The institution ID (required)
     * @return GetBasicInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetBasicInfoRequestBuilder getBasicInfo(String customerId, Long institutionId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (institutionId == null) throw new IllegalArgumentException("\"institutionId\" is required but got null");
        return new GetBasicInfoRequestBuilder(customerId, institutionId);
    }
    private okhttp3.Call getBasicInfo_0Call(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts/simple"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "institutionLoginId" + "}", localVarApiClient.escapeString(institutionLoginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBasicInfo_0ValidateBeforeCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getBasicInfo_0(Async)");
        }

        // verify the required parameter 'institutionLoginId' is set
        if (institutionLoginId == null) {
            throw new ApiException("Missing the required parameter 'institutionLoginId' when calling getBasicInfo_0(Async)");
        }

        return getBasicInfo_0Call(customerId, institutionLoginId, _callback);

    }


    private ApiResponse<CustomerAccountsSimple> getBasicInfo_0WithHttpInfo(String customerId, String institutionLoginId) throws ApiException {
        okhttp3.Call localVarCall = getBasicInfo_0ValidateBeforeCall(customerId, institutionLoginId, null);
        Type localVarReturnType = new TypeToken<CustomerAccountsSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBasicInfo_0Async(String customerId, String institutionLoginId, final ApiCallback<CustomerAccountsSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBasicInfo_0ValidateBeforeCall(customerId, institutionLoginId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccountsSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBasicInfo0RequestBuilder {
        private final String customerId;
        private final String institutionLoginId;

        private GetBasicInfo0RequestBuilder(String customerId, String institutionLoginId) {
            this.customerId = customerId;
            this.institutionLoginId = institutionLoginId;
        }

        /**
         * Build call for getBasicInfo_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBasicInfo_0Call(customerId, institutionLoginId, _callback);
        }


        /**
         * Execute getBasicInfo_0 request
         * @return CustomerAccountsSimple
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccountsSimple execute() throws ApiException {
            ApiResponse<CustomerAccountsSimple> localVarResp = getBasicInfo_0WithHttpInfo(customerId, institutionLoginId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBasicInfo_0 request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccountsSimple&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccountsSimple> executeWithHttpInfo() throws ApiException {
            return getBasicInfo_0WithHttpInfo(customerId, institutionLoginId);
        }

        /**
         * Execute getBasicInfo_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccountsSimple> _callback) throws ApiException {
            return getBasicInfo_0Async(customerId, institutionLoginId, _callback);
        }
    }

    /**
     * Get Customer Accounts by Institution Login ID (Simple)
     * This API is a lighter version of Get Customer Accounts by Institution Login ID, returning only basic information of all active accounts owned by the given customer at the given institution login ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param institutionLoginId The institution login ID (required)
     * @return GetBasicInfo0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetBasicInfo0RequestBuilder getBasicInfo_0(String customerId, String institutionLoginId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (institutionLoginId == null) throw new IllegalArgumentException("\"institutionLoginId\" is required but got null");
            

        return new GetBasicInfo0RequestBuilder(customerId, institutionLoginId);
    }
    private okhttp3.Call getBasicInfo_1Call(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/{accountId}/simple"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBasicInfo_1ValidateBeforeCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getBasicInfo_1(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getBasicInfo_1(Async)");
        }

        return getBasicInfo_1Call(customerId, accountId, _callback);

    }


    private ApiResponse<CustomerAccountSimple> getBasicInfo_1WithHttpInfo(String customerId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getBasicInfo_1ValidateBeforeCall(customerId, accountId, null);
        Type localVarReturnType = new TypeToken<CustomerAccountSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBasicInfo_1Async(String customerId, String accountId, final ApiCallback<CustomerAccountSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBasicInfo_1ValidateBeforeCall(customerId, accountId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccountSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBasicInfo1RequestBuilder {
        private final String customerId;
        private final String accountId;

        private GetBasicInfo1RequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for getBasicInfo_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBasicInfo_1Call(customerId, accountId, _callback);
        }


        /**
         * Execute getBasicInfo_1 request
         * @return CustomerAccountSimple
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccountSimple execute() throws ApiException {
            ApiResponse<CustomerAccountSimple> localVarResp = getBasicInfo_1WithHttpInfo(customerId, accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBasicInfo_1 request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccountSimple&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccountSimple> executeWithHttpInfo() throws ApiException {
            return getBasicInfo_1WithHttpInfo(customerId, accountId);
        }

        /**
         * Execute getBasicInfo_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccountSimple> _callback) throws ApiException {
            return getBasicInfo_1Async(customerId, accountId, _callback);
        }
    }

    /**
     * Get Customer Account by ID (Simple)
     * This API is a lighter version of Get Customer Accounts by ID, returning only basic information of a customer account.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetBasicInfo1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetBasicInfo1RequestBuilder getBasicInfo_1(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetBasicInfo1RequestBuilder(customerId, accountId);
    }
    private okhttp3.Call getBasicInfo_2Call(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/simple"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBasicInfo_2ValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getBasicInfo_2(Async)");
        }

        return getBasicInfo_2Call(customerId, _callback);

    }


    private ApiResponse<CustomerAccountsSimple> getBasicInfo_2WithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getBasicInfo_2ValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<CustomerAccountsSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBasicInfo_2Async(String customerId, final ApiCallback<CustomerAccountsSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBasicInfo_2ValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccountsSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBasicInfo2RequestBuilder {
        private final String customerId;

        private GetBasicInfo2RequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for getBasicInfo_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBasicInfo_2Call(customerId, _callback);
        }


        /**
         * Execute getBasicInfo_2 request
         * @return CustomerAccountsSimple
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccountsSimple execute() throws ApiException {
            ApiResponse<CustomerAccountsSimple> localVarResp = getBasicInfo_2WithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBasicInfo_2 request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccountsSimple&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccountsSimple> executeWithHttpInfo() throws ApiException {
            return getBasicInfo_2WithHttpInfo(customerId);
        }

        /**
         * Execute getBasicInfo_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccountsSimple> _callback) throws ApiException {
            return getBasicInfo_2Async(customerId, _callback);
        }
    }

    /**
     * Get Customer Accounts (Simple)
     * This API is a lighter version of Get Customer Accounts, returning only basic information of all active customer accounts.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return GetBasicInfo2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetBasicInfo2RequestBuilder getBasicInfo_2(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetBasicInfo2RequestBuilder(customerId);
    }
}
