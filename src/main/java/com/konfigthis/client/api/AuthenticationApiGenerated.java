/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccessToken;
import com.konfigthis.client.model.PartnerCredentials;
import com.konfigthis.client.model.PartnerCredentialsWithNewSecret;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAccessTokenCall(PartnerCredentials partnerCredentials, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partnerCredentials;

        // create path and map variables
        String localVarPath = "/aggregation/v2/partners/authentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccessTokenValidateBeforeCall(PartnerCredentials partnerCredentials, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerCredentials' is set
        if (partnerCredentials == null) {
            throw new ApiException("Missing the required parameter 'partnerCredentials' when calling createAccessToken(Async)");
        }

        return createAccessTokenCall(partnerCredentials, _callback);

    }


    private ApiResponse<AccessToken> createAccessTokenWithHttpInfo(PartnerCredentials partnerCredentials) throws ApiException {
        okhttp3.Call localVarCall = createAccessTokenValidateBeforeCall(partnerCredentials, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAccessTokenAsync(PartnerCredentials partnerCredentials, final ApiCallback<AccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccessTokenValidateBeforeCall(partnerCredentials, _callback);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAccessTokenRequestBuilder {
        private final String partnerId;
        private final String partnerSecret;

        private CreateAccessTokenRequestBuilder(String partnerId, String partnerSecret) {
            this.partnerId = partnerId;
            this.partnerSecret = partnerSecret;
        }

        /**
         * Build call for createAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access token was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PartnerCredentials partnerCredentials = buildBodyParams();
            return createAccessTokenCall(partnerCredentials, _callback);
        }

        private PartnerCredentials buildBodyParams() {
            PartnerCredentials partnerCredentials = new PartnerCredentials();
            partnerCredentials.partnerId(this.partnerId);
            partnerCredentials.partnerSecret(this.partnerSecret);
            return partnerCredentials;
        }

        /**
         * Execute createAccessToken request
         * @return AccessToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access token was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public AccessToken execute() throws ApiException {
            PartnerCredentials partnerCredentials = buildBodyParams();
            ApiResponse<AccessToken> localVarResp = createAccessTokenWithHttpInfo(partnerCredentials);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAccessToken request with HTTP info returned
         * @return ApiResponse&lt;AccessToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access token was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessToken> executeWithHttpInfo() throws ApiException {
            PartnerCredentials partnerCredentials = buildBodyParams();
            return createAccessTokenWithHttpInfo(partnerCredentials);
        }

        /**
         * Execute createAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access token was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessToken> _callback) throws ApiException {
            PartnerCredentials partnerCredentials = buildBodyParams();
            return createAccessTokenAsync(partnerCredentials, _callback);
        }
    }

    /**
     * Create Access Token
     * Send Partner ID and Partner Secret to the Partner Authentication service to obtain a token for accessing Finicity APIs. * The token is valid for two hours and is required on all calls to the Finicity APIs * As a best practice, use a single token for all calls. Assign a timestamp for each token, and then check the current timestamp before making any calls. If the token is greater than 90 minutes, generate a new one. * ⚠️ After five failed attempts to authenticate, your account will be locked. Contact [support@finicity.com](mailto:support@finicity.com) to get help resetting your account.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param partnerCredentials  (required)
     * @return CreateAccessTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access token was successfully created </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccessTokenRequestBuilder createAccessToken(String partnerId, String partnerSecret) throws IllegalArgumentException {
        if (partnerId == null) throw new IllegalArgumentException("\"partnerId\" is required but got null");
            

        if (partnerSecret == null) throw new IllegalArgumentException("\"partnerSecret\" is required but got null");
            

        return new CreateAccessTokenRequestBuilder(partnerId, partnerSecret);
    }
    private okhttp3.Call modifyPartnerSecretCall(PartnerCredentialsWithNewSecret partnerCredentialsWithNewSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partnerCredentialsWithNewSecret;

        // create path and map variables
        String localVarPath = "/aggregation/v2/partners/authentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyPartnerSecretValidateBeforeCall(PartnerCredentialsWithNewSecret partnerCredentialsWithNewSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerCredentialsWithNewSecret' is set
        if (partnerCredentialsWithNewSecret == null) {
            throw new ApiException("Missing the required parameter 'partnerCredentialsWithNewSecret' when calling modifyPartnerSecret(Async)");
        }

        return modifyPartnerSecretCall(partnerCredentialsWithNewSecret, _callback);

    }


    private ApiResponse<Void> modifyPartnerSecretWithHttpInfo(PartnerCredentialsWithNewSecret partnerCredentialsWithNewSecret) throws ApiException {
        okhttp3.Call localVarCall = modifyPartnerSecretValidateBeforeCall(partnerCredentialsWithNewSecret, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call modifyPartnerSecretAsync(PartnerCredentialsWithNewSecret partnerCredentialsWithNewSecret, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyPartnerSecretValidateBeforeCall(partnerCredentialsWithNewSecret, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ModifyPartnerSecretRequestBuilder {
        private final String partnerId;
        private final String partnerSecret;
        private final String newPartnerSecret;

        private ModifyPartnerSecretRequestBuilder(String partnerId, String partnerSecret, String newPartnerSecret) {
            this.partnerId = partnerId;
            this.partnerSecret = partnerSecret;
            this.newPartnerSecret = newPartnerSecret;
        }

        /**
         * Build call for modifyPartnerSecret
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The Partner Secret was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PartnerCredentialsWithNewSecret partnerCredentialsWithNewSecret = buildBodyParams();
            return modifyPartnerSecretCall(partnerCredentialsWithNewSecret, _callback);
        }

        private PartnerCredentialsWithNewSecret buildBodyParams() {
            PartnerCredentialsWithNewSecret partnerCredentialsWithNewSecret = new PartnerCredentialsWithNewSecret();
            return partnerCredentialsWithNewSecret;
        }

        /**
         * Execute modifyPartnerSecret request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The Partner Secret was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PartnerCredentialsWithNewSecret partnerCredentialsWithNewSecret = buildBodyParams();
            modifyPartnerSecretWithHttpInfo(partnerCredentialsWithNewSecret);
        }

        /**
         * Execute modifyPartnerSecret request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The Partner Secret was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PartnerCredentialsWithNewSecret partnerCredentialsWithNewSecret = buildBodyParams();
            return modifyPartnerSecretWithHttpInfo(partnerCredentialsWithNewSecret);
        }

        /**
         * Execute modifyPartnerSecret request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The Partner Secret was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PartnerCredentialsWithNewSecret partnerCredentialsWithNewSecret = buildBodyParams();
            return modifyPartnerSecretAsync(partnerCredentialsWithNewSecret, _callback);
        }
    }

    /**
     * Modify Partner Secret
     * Change the Partner Secret used to authenticate this partner.  The secret does not expire, but can be changed by calling this API. A valid Partner Secret may contain upper and lowercase characters, numbers, and the characters !, @, #, $, %, &amp;, *, _, -, +. It must include at least one number and at least one letter, and its length should be between 12 and 255 characters.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param partnerCredentialsWithNewSecret  (required)
     * @return ModifyPartnerSecretRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Partner Secret was successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public ModifyPartnerSecretRequestBuilder modifyPartnerSecret(String partnerId, String partnerSecret, String newPartnerSecret) throws IllegalArgumentException {
        if (partnerId == null) throw new IllegalArgumentException("\"partnerId\" is required but got null");
            

        if (partnerSecret == null) throw new IllegalArgumentException("\"partnerSecret\" is required but got null");
            

        if (newPartnerSecret == null) throw new IllegalArgumentException("\"newPartnerSecret\" is required but got null");
            

        return new ModifyPartnerSecretRequestBuilder(partnerId, partnerSecret, newPartnerSecret);
    }
}
