/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BrandingWrapper;
import com.konfigthis.client.model.CertifiedInstitutions;
import com.konfigthis.client.model.InstitutionWrapper;
import com.konfigthis.client.model.Institutions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InstitutionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InstitutionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InstitutionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBrandingByIdCall(Long institutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/institution/v2/institutions/{institutionId}/branding"
            .replace("{" + "institutionId" + "}", localVarApiClient.escapeString(institutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandingByIdValidateBeforeCall(Long institutionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'institutionId' is set
        if (institutionId == null) {
            throw new ApiException("Missing the required parameter 'institutionId' when calling getBrandingById(Async)");
        }

        return getBrandingByIdCall(institutionId, _callback);

    }


    private ApiResponse<BrandingWrapper> getBrandingByIdWithHttpInfo(Long institutionId) throws ApiException {
        okhttp3.Call localVarCall = getBrandingByIdValidateBeforeCall(institutionId, null);
        Type localVarReturnType = new TypeToken<BrandingWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBrandingByIdAsync(Long institutionId, final ApiCallback<BrandingWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandingByIdValidateBeforeCall(institutionId, _callback);
        Type localVarReturnType = new TypeToken<BrandingWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBrandingByIdRequestBuilder {
        private final Long institutionId;

        private GetBrandingByIdRequestBuilder(Long institutionId) {
            this.institutionId = institutionId;
        }

        /**
         * Build call for getBrandingById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institution branding was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBrandingByIdCall(institutionId, _callback);
        }


        /**
         * Execute getBrandingById request
         * @return BrandingWrapper
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institution branding was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public BrandingWrapper execute() throws ApiException {
            ApiResponse<BrandingWrapper> localVarResp = getBrandingByIdWithHttpInfo(institutionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBrandingById request with HTTP info returned
         * @return ApiResponse&lt;BrandingWrapper&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institution branding was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BrandingWrapper> executeWithHttpInfo() throws ApiException {
            return getBrandingByIdWithHttpInfo(institutionId);
        }

        /**
         * Execute getBrandingById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institution branding was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BrandingWrapper> _callback) throws ApiException {
            return getBrandingByIdAsync(institutionId, _callback);
        }
    }

    /**
     * Get Institution Branding by ID
     * Return the branding information for a financial institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param institutionId The institution ID (required)
     * @return GetBrandingByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Institution branding was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetBrandingByIdRequestBuilder getBrandingById(Long institutionId) throws IllegalArgumentException {
        if (institutionId == null) throw new IllegalArgumentException("\"institutionId\" is required but got null");
        return new GetBrandingByIdRequestBuilder(institutionId);
    }
    private okhttp3.Call getByIdDetailsCall(Long institutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/institution/v2/institutions/{institutionId}"
            .replace("{" + "institutionId" + "}", localVarApiClient.escapeString(institutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdDetailsValidateBeforeCall(Long institutionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'institutionId' is set
        if (institutionId == null) {
            throw new ApiException("Missing the required parameter 'institutionId' when calling getByIdDetails(Async)");
        }

        return getByIdDetailsCall(institutionId, _callback);

    }


    private ApiResponse<InstitutionWrapper> getByIdDetailsWithHttpInfo(Long institutionId) throws ApiException {
        okhttp3.Call localVarCall = getByIdDetailsValidateBeforeCall(institutionId, null);
        Type localVarReturnType = new TypeToken<InstitutionWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdDetailsAsync(Long institutionId, final ApiCallback<InstitutionWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdDetailsValidateBeforeCall(institutionId, _callback);
        Type localVarReturnType = new TypeToken<InstitutionWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdDetailsRequestBuilder {
        private final Long institutionId;

        private GetByIdDetailsRequestBuilder(Long institutionId) {
            this.institutionId = institutionId;
        }

        /**
         * Build call for getByIdDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institution was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdDetailsCall(institutionId, _callback);
        }


        /**
         * Execute getByIdDetails request
         * @return InstitutionWrapper
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institution was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public InstitutionWrapper execute() throws ApiException {
            ApiResponse<InstitutionWrapper> localVarResp = getByIdDetailsWithHttpInfo(institutionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByIdDetails request with HTTP info returned
         * @return ApiResponse&lt;InstitutionWrapper&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institution was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstitutionWrapper> executeWithHttpInfo() throws ApiException {
            return getByIdDetailsWithHttpInfo(institutionId);
        }

        /**
         * Execute getByIdDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institution was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstitutionWrapper> _callback) throws ApiException {
            return getByIdDetailsAsync(institutionId, _callback);
        }
    }

    /**
     * Get Institution by ID
     * Get financial institution details by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param institutionId The institution ID (required)
     * @return GetByIdDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Institution was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdDetailsRequestBuilder getByIdDetails(Long institutionId) throws IllegalArgumentException {
        if (institutionId == null) throw new IllegalArgumentException("\"institutionId\" is required but got null");
        return new GetByIdDetailsRequestBuilder(institutionId);
    }
    private okhttp3.Call getCertifiedInstitutionsWithRssdCall(String search, Integer start, Integer limit, String type, List<String> supportedCountries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/institution/v2/certifiedInstitutions/rssd";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (supportedCountries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "supportedCountries", supportedCountries));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCertifiedInstitutionsWithRssdValidateBeforeCall(String search, Integer start, Integer limit, String type, List<String> supportedCountries, final ApiCallback _callback) throws ApiException {
        return getCertifiedInstitutionsWithRssdCall(search, start, limit, type, supportedCountries, _callback);

    }


    private ApiResponse<CertifiedInstitutions> getCertifiedInstitutionsWithRssdWithHttpInfo(String search, Integer start, Integer limit, String type, List<String> supportedCountries) throws ApiException {
        okhttp3.Call localVarCall = getCertifiedInstitutionsWithRssdValidateBeforeCall(search, start, limit, type, supportedCountries, null);
        Type localVarReturnType = new TypeToken<CertifiedInstitutions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCertifiedInstitutionsWithRssdAsync(String search, Integer start, Integer limit, String type, List<String> supportedCountries, final ApiCallback<CertifiedInstitutions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCertifiedInstitutionsWithRssdValidateBeforeCall(search, start, limit, type, supportedCountries, _callback);
        Type localVarReturnType = new TypeToken<CertifiedInstitutions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCertifiedInstitutionsWithRssdRequestBuilder {
        private String search;
        private Integer start;
        private Integer limit;
        private String type;
        private List<String> supportedCountries;

        private GetCertifiedInstitutionsWithRssdRequestBuilder() {
        }

        /**
         * Set search
         * @param search Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs. (optional)
         * @return GetCertifiedInstitutionsWithRssdRequestBuilder
         */
        public GetCertifiedInstitutionsWithRssdRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set start
         * @param start Index of the page of results to return (optional, default to 1)
         * @return GetCertifiedInstitutionsWithRssdRequestBuilder
         */
        public GetCertifiedInstitutionsWithRssdRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of results per page (optional, default to 25)
         * @return GetCertifiedInstitutionsWithRssdRequestBuilder
         */
        public GetCertifiedInstitutionsWithRssdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set type
         * @param type A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot; (optional)
         * @return GetCertifiedInstitutionsWithRssdRequestBuilder
         */
        public GetCertifiedInstitutionsWithRssdRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set supportedCountries
         * @param supportedCountries A list of country codes, &#39;*&#39; for all countries. (optional)
         * @return GetCertifiedInstitutionsWithRssdRequestBuilder
         */
        public GetCertifiedInstitutionsWithRssdRequestBuilder supportedCountries(List<String> supportedCountries) {
            this.supportedCountries = supportedCountries;
            return this;
        }
        
        /**
         * Build call for getCertifiedInstitutionsWithRssd
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCertifiedInstitutionsWithRssdCall(search, start, limit, type, supportedCountries, _callback);
        }


        /**
         * Execute getCertifiedInstitutionsWithRssd request
         * @return CertifiedInstitutions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CertifiedInstitutions execute() throws ApiException {
            ApiResponse<CertifiedInstitutions> localVarResp = getCertifiedInstitutionsWithRssdWithHttpInfo(search, start, limit, type, supportedCountries);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCertifiedInstitutionsWithRssd request with HTTP info returned
         * @return ApiResponse&lt;CertifiedInstitutions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CertifiedInstitutions> executeWithHttpInfo() throws ApiException {
            return getCertifiedInstitutionsWithRssdWithHttpInfo(search, start, limit, type, supportedCountries);
        }

        /**
         * Execute getCertifiedInstitutionsWithRssd request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CertifiedInstitutions> _callback) throws ApiException {
            return getCertifiedInstitutionsWithRssdAsync(search, start, limit, type, supportedCountries, _callback);
        }
    }

    /**
     * Get Certified Institutions With RSSD
     * Search for certified financial institutions w/RSSD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @return GetCertifiedInstitutionsWithRssdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetCertifiedInstitutionsWithRssdRequestBuilder getCertifiedInstitutionsWithRssd() throws IllegalArgumentException {
        return new GetCertifiedInstitutionsWithRssdRequestBuilder();
    }
    private okhttp3.Call listCertifiedInstitutionsCall(String search, Integer start, Integer limit, String type, List<String> supportedCountries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/institution/v2/certifiedInstitutions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (supportedCountries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "supportedCountries", supportedCountries));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCertifiedInstitutionsValidateBeforeCall(String search, Integer start, Integer limit, String type, List<String> supportedCountries, final ApiCallback _callback) throws ApiException {
        return listCertifiedInstitutionsCall(search, start, limit, type, supportedCountries, _callback);

    }


    private ApiResponse<CertifiedInstitutions> listCertifiedInstitutionsWithHttpInfo(String search, Integer start, Integer limit, String type, List<String> supportedCountries) throws ApiException {
        okhttp3.Call localVarCall = listCertifiedInstitutionsValidateBeforeCall(search, start, limit, type, supportedCountries, null);
        Type localVarReturnType = new TypeToken<CertifiedInstitutions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCertifiedInstitutionsAsync(String search, Integer start, Integer limit, String type, List<String> supportedCountries, final ApiCallback<CertifiedInstitutions> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCertifiedInstitutionsValidateBeforeCall(search, start, limit, type, supportedCountries, _callback);
        Type localVarReturnType = new TypeToken<CertifiedInstitutions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCertifiedInstitutionsRequestBuilder {
        private String search;
        private Integer start;
        private Integer limit;
        private String type;
        private List<String> supportedCountries;

        private ListCertifiedInstitutionsRequestBuilder() {
        }

        /**
         * Set search
         * @param search Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs. (optional)
         * @return ListCertifiedInstitutionsRequestBuilder
         */
        public ListCertifiedInstitutionsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set start
         * @param start Index of the page of results to return (optional, default to 1)
         * @return ListCertifiedInstitutionsRequestBuilder
         */
        public ListCertifiedInstitutionsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of results per page (optional, default to 25)
         * @return ListCertifiedInstitutionsRequestBuilder
         */
        public ListCertifiedInstitutionsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set type
         * @param type A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot; (optional)
         * @return ListCertifiedInstitutionsRequestBuilder
         */
        public ListCertifiedInstitutionsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set supportedCountries
         * @param supportedCountries A list of country codes, &#39;*&#39; for all countries. (optional)
         * @return ListCertifiedInstitutionsRequestBuilder
         */
        public ListCertifiedInstitutionsRequestBuilder supportedCountries(List<String> supportedCountries) {
            this.supportedCountries = supportedCountries;
            return this;
        }
        
        /**
         * Build call for listCertifiedInstitutions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCertifiedInstitutionsCall(search, start, limit, type, supportedCountries, _callback);
        }


        /**
         * Execute listCertifiedInstitutions request
         * @return CertifiedInstitutions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CertifiedInstitutions execute() throws ApiException {
            ApiResponse<CertifiedInstitutions> localVarResp = listCertifiedInstitutionsWithHttpInfo(search, start, limit, type, supportedCountries);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCertifiedInstitutions request with HTTP info returned
         * @return ApiResponse&lt;CertifiedInstitutions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CertifiedInstitutions> executeWithHttpInfo() throws ApiException {
            return listCertifiedInstitutionsWithHttpInfo(search, start, limit, type, supportedCountries);
        }

        /**
         * Execute listCertifiedInstitutions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CertifiedInstitutions> _callback) throws ApiException {
            return listCertifiedInstitutionsAsync(search, start, limit, type, supportedCountries, _callback);
        }
    }

    /**
     * Get Certified Institutions
     * Search for financial institutions by certified product.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @return ListCertifiedInstitutionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ListCertifiedInstitutionsRequestBuilder listCertifiedInstitutions() throws IllegalArgumentException {
        return new ListCertifiedInstitutionsRequestBuilder();
    }
    private okhttp3.Call searchFinancialInstitutionsCall(String search, Integer start, Integer limit, String type, List<String> supportedCountries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/institution/v2/institutions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (supportedCountries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "supportedCountries", supportedCountries));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchFinancialInstitutionsValidateBeforeCall(String search, Integer start, Integer limit, String type, List<String> supportedCountries, final ApiCallback _callback) throws ApiException {
        return searchFinancialInstitutionsCall(search, start, limit, type, supportedCountries, _callback);

    }


    private ApiResponse<Institutions> searchFinancialInstitutionsWithHttpInfo(String search, Integer start, Integer limit, String type, List<String> supportedCountries) throws ApiException {
        okhttp3.Call localVarCall = searchFinancialInstitutionsValidateBeforeCall(search, start, limit, type, supportedCountries, null);
        Type localVarReturnType = new TypeToken<Institutions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchFinancialInstitutionsAsync(String search, Integer start, Integer limit, String type, List<String> supportedCountries, final ApiCallback<Institutions> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchFinancialInstitutionsValidateBeforeCall(search, start, limit, type, supportedCountries, _callback);
        Type localVarReturnType = new TypeToken<Institutions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchFinancialInstitutionsRequestBuilder {
        private String search;
        private Integer start;
        private Integer limit;
        private String type;
        private List<String> supportedCountries;

        private SearchFinancialInstitutionsRequestBuilder() {
        }

        /**
         * Set search
         * @param search Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs. (optional)
         * @return SearchFinancialInstitutionsRequestBuilder
         */
        public SearchFinancialInstitutionsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set start
         * @param start Index of the page of results to return (optional, default to 1)
         * @return SearchFinancialInstitutionsRequestBuilder
         */
        public SearchFinancialInstitutionsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of results per page (optional, default to 25)
         * @return SearchFinancialInstitutionsRequestBuilder
         */
        public SearchFinancialInstitutionsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set type
         * @param type A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot; (optional)
         * @return SearchFinancialInstitutionsRequestBuilder
         */
        public SearchFinancialInstitutionsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set supportedCountries
         * @param supportedCountries A list of country codes, &#39;*&#39; for all countries. (optional)
         * @return SearchFinancialInstitutionsRequestBuilder
         */
        public SearchFinancialInstitutionsRequestBuilder supportedCountries(List<String> supportedCountries) {
            this.supportedCountries = supportedCountries;
            return this;
        }
        
        /**
         * Build call for searchFinancialInstitutions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchFinancialInstitutionsCall(search, start, limit, type, supportedCountries, _callback);
        }


        /**
         * Execute searchFinancialInstitutions request
         * @return Institutions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public Institutions execute() throws ApiException {
            ApiResponse<Institutions> localVarResp = searchFinancialInstitutionsWithHttpInfo(search, start, limit, type, supportedCountries);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchFinancialInstitutions request with HTTP info returned
         * @return ApiResponse&lt;Institutions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Institutions> executeWithHttpInfo() throws ApiException {
            return searchFinancialInstitutionsWithHttpInfo(search, start, limit, type, supportedCountries);
        }

        /**
         * Execute searchFinancialInstitutions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Institutions> _callback) throws ApiException {
            return searchFinancialInstitutionsAsync(search, start, limit, type, supportedCountries, _callback);
        }
    }

    /**
     * Get Institutions
     * Search for financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @return SearchFinancialInstitutionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Institutions were successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public SearchFinancialInstitutionsRequestBuilder searchFinancialInstitutions() throws IllegalArgumentException {
        return new SearchFinancialInstitutionsRequestBuilder();
    }
}
