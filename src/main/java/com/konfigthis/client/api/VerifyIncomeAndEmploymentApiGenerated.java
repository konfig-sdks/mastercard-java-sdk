/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayStatementData;
import com.konfigthis.client.model.PayStatementReportAck;
import com.konfigthis.client.model.PayStatementReportConstraints;
import com.konfigthis.client.model.PayrollData;
import com.konfigthis.client.model.PayrollReportAck;
import com.konfigthis.client.model.PayrollReportConstraints;
import com.konfigthis.client.model.ReportCustomField;
import com.konfigthis.client.model.VOETransactionsReportAck;
import com.konfigthis.client.model.VOETransactionsReportConstraints;
import com.konfigthis.client.model.VOIEPaystubReportAck;
import com.konfigthis.client.model.VOIEPaystubWithTXVerifyReportAck;
import com.konfigthis.client.model.VOIEReportConstraints;
import com.konfigthis.client.model.VOIEWithInterviewData;
import com.konfigthis.client.model.VOIEWithStatementData;
import com.konfigthis.client.model.VOIEWithTXVerifyReportConstraints;
import com.konfigthis.client.model.VOIReportAck;
import com.konfigthis.client.model.VOIReportConstraints;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VerifyIncomeAndEmploymentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyIncomeAndEmploymentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyIncomeAndEmploymentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createVOIReportCall(String customerId, VOIReportConstraints voIReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voIReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/voi"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVOIReportValidateBeforeCall(String customerId, VOIReportConstraints voIReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling createVOIReport(Async)");
        }

        // verify the required parameter 'voIReportConstraints' is set
        if (voIReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'voIReportConstraints' when calling createVOIReport(Async)");
        }

        return createVOIReportCall(customerId, voIReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<VOIReportAck> createVOIReportWithHttpInfo(String customerId, VOIReportConstraints voIReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = createVOIReportValidateBeforeCall(customerId, voIReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<VOIReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createVOIReportAsync(String customerId, VOIReportConstraints voIReportConstraints, String callbackUrl, final ApiCallback<VOIReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVOIReportValidateBeforeCall(customerId, voIReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<VOIReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateVOIReportRequestBuilder {
        private final String customerId;
        private String accountIds;
        private List<ReportCustomField> reportCustomFields;
        private Long fromDate;
        private Integer incomeStreamConfidenceMinimum;
        private String callbackUrl;

        private CreateVOIReportRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set accountIds
         * @param accountIds A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set) (optional)
         * @return CreateVOIReportRequestBuilder
         */
        public CreateVOIReportRequestBuilder accountIds(String accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return CreateVOIReportRequestBuilder
         */
        public CreateVOIReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return CreateVOIReportRequestBuilder
         */
        public CreateVOIReportRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set incomeStreamConfidenceMinimum
         * @param incomeStreamConfidenceMinimum Include income streams in the report, based on the income stream&#39;s confidence score. For example, Use the value 50 to include only income streams with a confidence score of 50 or higher. (optional)
         * @return CreateVOIReportRequestBuilder
         */
        public CreateVOIReportRequestBuilder incomeStreamConfidenceMinimum(Integer incomeStreamConfidenceMinimum) {
            this.incomeStreamConfidenceMinimum = incomeStreamConfidenceMinimum;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return CreateVOIReportRequestBuilder
         */
        public CreateVOIReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for createVOIReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VOIReportConstraints voIReportConstraints = buildBodyParams();
            return createVOIReportCall(customerId, voIReportConstraints, callbackUrl, _callback);
        }

        private VOIReportConstraints buildBodyParams() {
            VOIReportConstraints voIReportConstraints = new VOIReportConstraints();
            voIReportConstraints.accountIds(this.accountIds);
            voIReportConstraints.reportCustomFields(this.reportCustomFields);
            voIReportConstraints.fromDate(this.fromDate);
            voIReportConstraints.incomeStreamConfidenceMinimum(this.incomeStreamConfidenceMinimum);
            return voIReportConstraints;
        }

        /**
         * Execute createVOIReport request
         * @return VOIReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public VOIReportAck execute() throws ApiException {
            VOIReportConstraints voIReportConstraints = buildBodyParams();
            ApiResponse<VOIReportAck> localVarResp = createVOIReportWithHttpInfo(customerId, voIReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createVOIReport request with HTTP info returned
         * @return ApiResponse&lt;VOIReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VOIReportAck> executeWithHttpInfo() throws ApiException {
            VOIReportConstraints voIReportConstraints = buildBodyParams();
            return createVOIReportWithHttpInfo(customerId, voIReportConstraints, callbackUrl);
        }

        /**
         * Execute createVOIReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VOIReportAck> _callback) throws ApiException {
            VOIReportConstraints voIReportConstraints = buildBodyParams();
            return createVOIReportAsync(customerId, voIReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate VOI Report
     * Generate a Verification of Income (VOI) report for all checking, savings, and money market accounts for the given customer. This service retrieves up to two years of transaction history for each account and uses this information to generate the VOI report.  This is a premium service. The billing rate is the variable rate for Verification of Income under the current subscription plan. The billable event is the successful generation of a VOI report.  If no account of type checking, savings, or money market is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param voIReportConstraints  (required)
     * @return CreateVOIReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public CreateVOIReportRequestBuilder createVOIReport(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new CreateVOIReportRequestBuilder(customerId);
    }
    private okhttp3.Call generatePayStatementReportCall(String customerId, PayStatementReportConstraints payStatementReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payStatementReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/payStatement"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePayStatementReportValidateBeforeCall(String customerId, PayStatementReportConstraints payStatementReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generatePayStatementReport(Async)");
        }

        // verify the required parameter 'payStatementReportConstraints' is set
        if (payStatementReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'payStatementReportConstraints' when calling generatePayStatementReport(Async)");
        }

        return generatePayStatementReportCall(customerId, payStatementReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<PayStatementReportAck> generatePayStatementReportWithHttpInfo(String customerId, PayStatementReportConstraints payStatementReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = generatePayStatementReportValidateBeforeCall(customerId, payStatementReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<PayStatementReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generatePayStatementReportAsync(String customerId, PayStatementReportConstraints payStatementReportConstraints, String callbackUrl, final ApiCallback<PayStatementReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePayStatementReportValidateBeforeCall(customerId, payStatementReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<PayStatementReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GeneratePayStatementReportRequestBuilder {
        private final PayStatementData paystatementReport;
        private final String customerId;
        private List<ReportCustomField> reportCustomFields;
        private String callbackUrl;

        private GeneratePayStatementReportRequestBuilder(PayStatementData paystatementReport, String customerId) {
            this.paystatementReport = paystatementReport;
            this.customerId = customerId;
        }

        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GeneratePayStatementReportRequestBuilder
         */
        public GeneratePayStatementReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GeneratePayStatementReportRequestBuilder
         */
        public GeneratePayStatementReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for generatePayStatementReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayStatementReportConstraints payStatementReportConstraints = buildBodyParams();
            return generatePayStatementReportCall(customerId, payStatementReportConstraints, callbackUrl, _callback);
        }

        private PayStatementReportConstraints buildBodyParams() {
            PayStatementReportConstraints payStatementReportConstraints = new PayStatementReportConstraints();
            payStatementReportConstraints.paystatementReport(this.paystatementReport);
            payStatementReportConstraints.reportCustomFields(this.reportCustomFields);
            return payStatementReportConstraints;
        }

        /**
         * Execute generatePayStatementReport request
         * @return PayStatementReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public PayStatementReportAck execute() throws ApiException {
            PayStatementReportConstraints payStatementReportConstraints = buildBodyParams();
            ApiResponse<PayStatementReportAck> localVarResp = generatePayStatementReportWithHttpInfo(customerId, payStatementReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generatePayStatementReport request with HTTP info returned
         * @return ApiResponse&lt;PayStatementReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayStatementReportAck> executeWithHttpInfo() throws ApiException {
            PayStatementReportConstraints payStatementReportConstraints = buildBodyParams();
            return generatePayStatementReportWithHttpInfo(customerId, payStatementReportConstraints, callbackUrl);
        }

        /**
         * Execute generatePayStatementReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayStatementReportAck> _callback) throws ApiException {
            PayStatementReportConstraints payStatementReportConstraints = buildBodyParams();
            return generatePayStatementReportAsync(customerId, payStatementReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate Pay Statement Report
     * Generate Pay Statement Extraction Report for the given customer. This service accepts asset IDs of the stored pay statements to generate a Pay Statement Extraction Report.  This is a premium service. The billing rate is the variable rate for Pay Statement Extraction Report under the current subscription plan. The billable event is the successful generation of a Pay Statement Extraction Report.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param payStatementReportConstraints  (required)
     * @return GeneratePayStatementReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GeneratePayStatementReportRequestBuilder generatePayStatementReport(PayStatementData paystatementReport, String customerId) throws IllegalArgumentException {
        if (paystatementReport == null) throw new IllegalArgumentException("\"paystatementReport\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GeneratePayStatementReportRequestBuilder(paystatementReport, customerId);
    }
    private okhttp3.Call generateVOETransactionsReportCall(String customerId, VOETransactionsReportConstraints voETransactionsReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voETransactionsReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/voeTransactions"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateVOETransactionsReportValidateBeforeCall(String customerId, VOETransactionsReportConstraints voETransactionsReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateVOETransactionsReport(Async)");
        }

        // verify the required parameter 'voETransactionsReportConstraints' is set
        if (voETransactionsReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'voETransactionsReportConstraints' when calling generateVOETransactionsReport(Async)");
        }

        return generateVOETransactionsReportCall(customerId, voETransactionsReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<VOETransactionsReportAck> generateVOETransactionsReportWithHttpInfo(String customerId, VOETransactionsReportConstraints voETransactionsReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = generateVOETransactionsReportValidateBeforeCall(customerId, voETransactionsReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<VOETransactionsReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateVOETransactionsReportAsync(String customerId, VOETransactionsReportConstraints voETransactionsReportConstraints, String callbackUrl, final ApiCallback<VOETransactionsReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateVOETransactionsReportValidateBeforeCall(customerId, voETransactionsReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<VOETransactionsReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateVOETransactionsReportRequestBuilder {
        private final String customerId;
        private String reportId;
        private String accountIds;
        private List<ReportCustomField> reportCustomFields;
        private Long fromDate;
        private Integer incomeStreamConfidenceMinimum;
        private String callbackUrl;

        private GenerateVOETransactionsReportRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set reportId
         * @param reportId A report ID (optional)
         * @return GenerateVOETransactionsReportRequestBuilder
         */
        public GenerateVOETransactionsReportRequestBuilder reportId(String reportId) {
            this.reportId = reportId;
            return this;
        }
        
        /**
         * Set accountIds
         * @param accountIds A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set) (optional)
         * @return GenerateVOETransactionsReportRequestBuilder
         */
        public GenerateVOETransactionsReportRequestBuilder accountIds(String accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GenerateVOETransactionsReportRequestBuilder
         */
        public GenerateVOETransactionsReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return GenerateVOETransactionsReportRequestBuilder
         */
        public GenerateVOETransactionsReportRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set incomeStreamConfidenceMinimum
         * @param incomeStreamConfidenceMinimum Include income streams in the report, based on the income stream&#39;s confidence score. For example, Use the value 50 to include only income streams with a confidence score of 50 or higher. (optional)
         * @return GenerateVOETransactionsReportRequestBuilder
         */
        public GenerateVOETransactionsReportRequestBuilder incomeStreamConfidenceMinimum(Integer incomeStreamConfidenceMinimum) {
            this.incomeStreamConfidenceMinimum = incomeStreamConfidenceMinimum;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GenerateVOETransactionsReportRequestBuilder
         */
        public GenerateVOETransactionsReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for generateVOETransactionsReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VOETransactionsReportConstraints voETransactionsReportConstraints = buildBodyParams();
            return generateVOETransactionsReportCall(customerId, voETransactionsReportConstraints, callbackUrl, _callback);
        }

        private VOETransactionsReportConstraints buildBodyParams() {
            VOETransactionsReportConstraints voETransactionsReportConstraints = new VOETransactionsReportConstraints();
            voETransactionsReportConstraints.reportId(this.reportId);
            voETransactionsReportConstraints.accountIds(this.accountIds);
            voETransactionsReportConstraints.reportCustomFields(this.reportCustomFields);
            voETransactionsReportConstraints.fromDate(this.fromDate);
            voETransactionsReportConstraints.incomeStreamConfidenceMinimum(this.incomeStreamConfidenceMinimum);
            return voETransactionsReportConstraints;
        }

        /**
         * Execute generateVOETransactionsReport request
         * @return VOETransactionsReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public VOETransactionsReportAck execute() throws ApiException {
            VOETransactionsReportConstraints voETransactionsReportConstraints = buildBodyParams();
            ApiResponse<VOETransactionsReportAck> localVarResp = generateVOETransactionsReportWithHttpInfo(customerId, voETransactionsReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateVOETransactionsReport request with HTTP info returned
         * @return ApiResponse&lt;VOETransactionsReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VOETransactionsReportAck> executeWithHttpInfo() throws ApiException {
            VOETransactionsReportConstraints voETransactionsReportConstraints = buildBodyParams();
            return generateVOETransactionsReportWithHttpInfo(customerId, voETransactionsReportConstraints, callbackUrl);
        }

        /**
         * Execute generateVOETransactionsReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VOETransactionsReportAck> _callback) throws ApiException {
            VOETransactionsReportConstraints voETransactionsReportConstraints = buildBodyParams();
            return generateVOETransactionsReportAsync(customerId, voETransactionsReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate VOE - Transactions Report
     * Premium Service: A billable event when the API response is successful.  MVS-Direct integration developers only.  Used as a complimentary report to the VOA with Income and VOIE - Paystub (with TXVerify) reports and used to fulfill the pre-close VOE requirements.  Retrieve the latest credit transaction information from the borrower&#39;s connected bank accounts and groups them into income streams so that you can view their payment history to ensure a direct deport was made within the expected cadence. The report displays transaction descriptions without any dollar amounts so that income re-verification isn&#39;t necessary.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param voETransactionsReportConstraints  (required)
     * @return GenerateVOETransactionsReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateVOETransactionsReportRequestBuilder generateVOETransactionsReport(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateVOETransactionsReportRequestBuilder(customerId);
    }
    private okhttp3.Call generateVOIEPaystubWithTxVerifyReportCall(String customerId, VOIEWithTXVerifyReportConstraints voIEWithTXVerifyReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voIEWithTXVerifyReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/voieTxVerify/withInterview"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateVOIEPaystubWithTxVerifyReportValidateBeforeCall(String customerId, VOIEWithTXVerifyReportConstraints voIEWithTXVerifyReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateVOIEPaystubWithTxVerifyReport(Async)");
        }

        // verify the required parameter 'voIEWithTXVerifyReportConstraints' is set
        if (voIEWithTXVerifyReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'voIEWithTXVerifyReportConstraints' when calling generateVOIEPaystubWithTxVerifyReport(Async)");
        }

        return generateVOIEPaystubWithTxVerifyReportCall(customerId, voIEWithTXVerifyReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<VOIEPaystubWithTXVerifyReportAck> generateVOIEPaystubWithTxVerifyReportWithHttpInfo(String customerId, VOIEWithTXVerifyReportConstraints voIEWithTXVerifyReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = generateVOIEPaystubWithTxVerifyReportValidateBeforeCall(customerId, voIEWithTXVerifyReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<VOIEPaystubWithTXVerifyReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateVOIEPaystubWithTxVerifyReportAsync(String customerId, VOIEWithTXVerifyReportConstraints voIEWithTXVerifyReportConstraints, String callbackUrl, final ApiCallback<VOIEPaystubWithTXVerifyReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateVOIEPaystubWithTxVerifyReportValidateBeforeCall(customerId, voIEWithTXVerifyReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<VOIEPaystubWithTXVerifyReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateVOIEPaystubWithTxVerifyReportRequestBuilder {
        private final VOIEWithInterviewData voieWithInterviewData;
        private final String customerId;
        private String accountIds;
        private List<ReportCustomField> reportCustomFields;
        private Long fromDate;
        private Integer incomeStreamConfidenceMinimum;
        private String callbackUrl;

        private GenerateVOIEPaystubWithTxVerifyReportRequestBuilder(VOIEWithInterviewData voieWithInterviewData, String customerId) {
            this.voieWithInterviewData = voieWithInterviewData;
            this.customerId = customerId;
        }

        /**
         * Set accountIds
         * @param accountIds A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set) (optional)
         * @return GenerateVOIEPaystubWithTxVerifyReportRequestBuilder
         */
        public GenerateVOIEPaystubWithTxVerifyReportRequestBuilder accountIds(String accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GenerateVOIEPaystubWithTxVerifyReportRequestBuilder
         */
        public GenerateVOIEPaystubWithTxVerifyReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return GenerateVOIEPaystubWithTxVerifyReportRequestBuilder
         */
        public GenerateVOIEPaystubWithTxVerifyReportRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set incomeStreamConfidenceMinimum
         * @param incomeStreamConfidenceMinimum Include income streams in the report, based on the income stream&#39;s confidence score. For example, Use the value 50 to include only income streams with a confidence score of 50 or higher. (optional)
         * @return GenerateVOIEPaystubWithTxVerifyReportRequestBuilder
         */
        public GenerateVOIEPaystubWithTxVerifyReportRequestBuilder incomeStreamConfidenceMinimum(Integer incomeStreamConfidenceMinimum) {
            this.incomeStreamConfidenceMinimum = incomeStreamConfidenceMinimum;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GenerateVOIEPaystubWithTxVerifyReportRequestBuilder
         */
        public GenerateVOIEPaystubWithTxVerifyReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for generateVOIEPaystubWithTxVerifyReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VOIEWithTXVerifyReportConstraints voIEWithTXVerifyReportConstraints = buildBodyParams();
            return generateVOIEPaystubWithTxVerifyReportCall(customerId, voIEWithTXVerifyReportConstraints, callbackUrl, _callback);
        }

        private VOIEWithTXVerifyReportConstraints buildBodyParams() {
            VOIEWithTXVerifyReportConstraints voIEWithTXVerifyReportConstraints = new VOIEWithTXVerifyReportConstraints();
            voIEWithTXVerifyReportConstraints.accountIds(this.accountIds);
            voIEWithTXVerifyReportConstraints.voieWithInterviewData(this.voieWithInterviewData);
            voIEWithTXVerifyReportConstraints.reportCustomFields(this.reportCustomFields);
            voIEWithTXVerifyReportConstraints.fromDate(this.fromDate);
            voIEWithTXVerifyReportConstraints.incomeStreamConfidenceMinimum(this.incomeStreamConfidenceMinimum);
            return voIEWithTXVerifyReportConstraints;
        }

        /**
         * Execute generateVOIEPaystubWithTxVerifyReport request
         * @return VOIEPaystubWithTXVerifyReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public VOIEPaystubWithTXVerifyReportAck execute() throws ApiException {
            VOIEWithTXVerifyReportConstraints voIEWithTXVerifyReportConstraints = buildBodyParams();
            ApiResponse<VOIEPaystubWithTXVerifyReportAck> localVarResp = generateVOIEPaystubWithTxVerifyReportWithHttpInfo(customerId, voIEWithTXVerifyReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateVOIEPaystubWithTxVerifyReport request with HTTP info returned
         * @return ApiResponse&lt;VOIEPaystubWithTXVerifyReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VOIEPaystubWithTXVerifyReportAck> executeWithHttpInfo() throws ApiException {
            VOIEWithTXVerifyReportConstraints voIEWithTXVerifyReportConstraints = buildBodyParams();
            return generateVOIEPaystubWithTxVerifyReportWithHttpInfo(customerId, voIEWithTXVerifyReportConstraints, callbackUrl);
        }

        /**
         * Execute generateVOIEPaystubWithTxVerifyReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VOIEPaystubWithTXVerifyReportAck> _callback) throws ApiException {
            VOIEWithTXVerifyReportConstraints voIEWithTXVerifyReportConstraints = buildBodyParams();
            return generateVOIEPaystubWithTxVerifyReportAsync(customerId, voIEWithTXVerifyReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate VOIE - Paystub (with TXVerify) Report
     * Generate a VOIE - Paystub (with TXVerify) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given accounts. It then uses this information as well as the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub (with TXVerify) report.  Note: if you are using this API to refresh the bank transactions, use the same asset ID from the first report. A new paystub is not required unless the paystub is too old for underwriting requirements. Using the same asset ID that was on the original report and the previously extracted details will be used to speed up report generation response time.  This is a premium service. The billing rate is the variable rate for VOIE TXVerify under the current subscription plan. The billable event is the successful generation of a VOIE TXVerify Report.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param voIEWithTXVerifyReportConstraints  (required)
     * @return GenerateVOIEPaystubWithTxVerifyReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateVOIEPaystubWithTxVerifyReportRequestBuilder generateVOIEPaystubWithTxVerifyReport(VOIEWithInterviewData voieWithInterviewData, String customerId) throws IllegalArgumentException {
        if (voieWithInterviewData == null) throw new IllegalArgumentException("\"voieWithInterviewData\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateVOIEPaystubWithTxVerifyReportRequestBuilder(voieWithInterviewData, customerId);
    }
    private okhttp3.Call generateVoePayrollReportCall(String customerId, PayrollReportConstraints payrollReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payrollReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/voePayroll"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateVoePayrollReportValidateBeforeCall(String customerId, PayrollReportConstraints payrollReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateVoePayrollReport(Async)");
        }

        // verify the required parameter 'payrollReportConstraints' is set
        if (payrollReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'payrollReportConstraints' when calling generateVoePayrollReport(Async)");
        }

        return generateVoePayrollReportCall(customerId, payrollReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<PayrollReportAck> generateVoePayrollReportWithHttpInfo(String customerId, PayrollReportConstraints payrollReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = generateVoePayrollReportValidateBeforeCall(customerId, payrollReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<PayrollReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateVoePayrollReportAsync(String customerId, PayrollReportConstraints payrollReportConstraints, String callbackUrl, final ApiCallback<PayrollReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateVoePayrollReportValidateBeforeCall(customerId, payrollReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<PayrollReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateVoePayrollReportRequestBuilder {
        private final PayrollData payrollData;
        private final String customerId;
        private List<ReportCustomField> reportCustomFields;
        private Long payStatementsFromDate;
        private String marketSegment;
        private Boolean excludeEmpInfo;
        private String purpose;
        private String callbackUrl;

        private GenerateVoePayrollReportRequestBuilder(PayrollData payrollData, String customerId) {
            this.payrollData = payrollData;
            this.customerId = customerId;
        }

        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GenerateVoePayrollReportRequestBuilder
         */
        public GenerateVoePayrollReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set payStatementsFromDate
         * @param payStatementsFromDate Limits the pay statement history in the VOIE - Payroll report income record. Pay statements are only included if the payDate of the statement is equal to or greater than the start date requested. Date should be in Unix epoch time (in seconds). See: Handling Epoch Dates and Times. (optional)
         * @return GenerateVoePayrollReportRequestBuilder
         */
        public GenerateVoePayrollReportRequestBuilder payStatementsFromDate(Long payStatementsFromDate) {
            this.payStatementsFromDate = payStatementsFromDate;
            return this;
        }
        
        /**
         * Set marketSegment
         * @param marketSegment Use case for requesting the consumer&#39;s data. Current supported enumerations are \\\&quot;Mortgage\\\&quot; and \\\&quot;KYC\\\&quot;. If your use case doesn&#39;t match one of these please reach out to your technical point of contact. (optional)
         * @return GenerateVoePayrollReportRequestBuilder
         */
        public GenerateVoePayrollReportRequestBuilder marketSegment(String marketSegment) {
            this.marketSegment = marketSegment;
            return this;
        }
        
        /**
         * Set excludeEmpInfo
         * @param excludeEmpInfo Only used on an exception basis for clients that need to exclude EmpInfo data from the VOE-Payroll or VOIE-Payroll report. If true is passed EmpInfo payroll provider&#39;s data will not be searched or returned. (optional)
         * @return GenerateVoePayrollReportRequestBuilder
         */
        public GenerateVoePayrollReportRequestBuilder excludeEmpInfo(Boolean excludeEmpInfo) {
            this.excludeEmpInfo = excludeEmpInfo;
            return this;
        }
        
        /**
         * Set purpose
         * @param purpose FCRA required 2-digit Permissible Purpose Code, specifying the reason for retrieving this report. (optional)
         * @return GenerateVoePayrollReportRequestBuilder
         */
        public GenerateVoePayrollReportRequestBuilder purpose(String purpose) {
            this.purpose = purpose;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GenerateVoePayrollReportRequestBuilder
         */
        public GenerateVoePayrollReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for generateVoePayrollReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayrollReportConstraints payrollReportConstraints = buildBodyParams();
            return generateVoePayrollReportCall(customerId, payrollReportConstraints, callbackUrl, _callback);
        }

        private PayrollReportConstraints buildBodyParams() {
            PayrollReportConstraints payrollReportConstraints = new PayrollReportConstraints();
            payrollReportConstraints.payrollData(this.payrollData);
            payrollReportConstraints.reportCustomFields(this.reportCustomFields);
            payrollReportConstraints.payStatementsFromDate(this.payStatementsFromDate);
            payrollReportConstraints.marketSegment(this.marketSegment);
            payrollReportConstraints.excludeEmpInfo(this.excludeEmpInfo);
            payrollReportConstraints.purpose(this.purpose);
            return payrollReportConstraints;
        }

        /**
         * Execute generateVoePayrollReport request
         * @return PayrollReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public PayrollReportAck execute() throws ApiException {
            PayrollReportConstraints payrollReportConstraints = buildBodyParams();
            ApiResponse<PayrollReportAck> localVarResp = generateVoePayrollReportWithHttpInfo(customerId, payrollReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateVoePayrollReport request with HTTP info returned
         * @return ApiResponse&lt;PayrollReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayrollReportAck> executeWithHttpInfo() throws ApiException {
            PayrollReportConstraints payrollReportConstraints = buildBodyParams();
            return generateVoePayrollReportWithHttpInfo(customerId, payrollReportConstraints, callbackUrl);
        }

        /**
         * Execute generateVoePayrollReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayrollReportAck> _callback) throws ApiException {
            PayrollReportConstraints payrollReportConstraints = buildBodyParams();
            return generateVoePayrollReportAsync(customerId, payrollReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate VOE - Payroll Report
     * Generate or refresh a VOE - Payroll report. Often used as a complementary report to the VOIE-Payroll report to fulfill the pre-close VOE requirements. It retrieves the customer&#39;s employment details and employment status through the payroll source without any income information.  This is a premium service. The billable event is the successful generation of a VOE - Payroll report.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param payrollReportConstraints  (required)
     * @return GenerateVoePayrollReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateVoePayrollReportRequestBuilder generateVoePayrollReport(PayrollData payrollData, String customerId) throws IllegalArgumentException {
        if (payrollData == null) throw new IllegalArgumentException("\"payrollData\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateVoePayrollReportRequestBuilder(payrollData, customerId);
    }
    private okhttp3.Call generateVoiePaystubReportCall(String customerId, VOIEReportConstraints voIEReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voIEReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/voieTxVerify/withStatement"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateVoiePaystubReportValidateBeforeCall(String customerId, VOIEReportConstraints voIEReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateVoiePaystubReport(Async)");
        }

        // verify the required parameter 'voIEReportConstraints' is set
        if (voIEReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'voIEReportConstraints' when calling generateVoiePaystubReport(Async)");
        }

        return generateVoiePaystubReportCall(customerId, voIEReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<VOIEPaystubReportAck> generateVoiePaystubReportWithHttpInfo(String customerId, VOIEReportConstraints voIEReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = generateVoiePaystubReportValidateBeforeCall(customerId, voIEReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<VOIEPaystubReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateVoiePaystubReportAsync(String customerId, VOIEReportConstraints voIEReportConstraints, String callbackUrl, final ApiCallback<VOIEPaystubReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateVoiePaystubReportValidateBeforeCall(customerId, voIEReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<VOIEPaystubReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateVoiePaystubReportRequestBuilder {
        private final VOIEWithStatementData voieWithStatementData;
        private final String customerId;
        private List<ReportCustomField> reportCustomFields;
        private String callbackUrl;

        private GenerateVoiePaystubReportRequestBuilder(VOIEWithStatementData voieWithStatementData, String customerId) {
            this.voieWithStatementData = voieWithStatementData;
            this.customerId = customerId;
        }

        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GenerateVoiePaystubReportRequestBuilder
         */
        public GenerateVoiePaystubReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GenerateVoiePaystubReportRequestBuilder
         */
        public GenerateVoiePaystubReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for generateVoiePaystubReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VOIEReportConstraints voIEReportConstraints = buildBodyParams();
            return generateVoiePaystubReportCall(customerId, voIEReportConstraints, callbackUrl, _callback);
        }

        private VOIEReportConstraints buildBodyParams() {
            VOIEReportConstraints voIEReportConstraints = new VOIEReportConstraints();
            voIEReportConstraints.voieWithStatementData(this.voieWithStatementData);
            voIEReportConstraints.reportCustomFields(this.reportCustomFields);
            return voIEReportConstraints;
        }

        /**
         * Execute generateVoiePaystubReport request
         * @return VOIEPaystubReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public VOIEPaystubReportAck execute() throws ApiException {
            VOIEReportConstraints voIEReportConstraints = buildBodyParams();
            ApiResponse<VOIEPaystubReportAck> localVarResp = generateVoiePaystubReportWithHttpInfo(customerId, voIEReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateVoiePaystubReport request with HTTP info returned
         * @return ApiResponse&lt;VOIEPaystubReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VOIEPaystubReportAck> executeWithHttpInfo() throws ApiException {
            VOIEReportConstraints voIEReportConstraints = buildBodyParams();
            return generateVoiePaystubReportWithHttpInfo(customerId, voIEReportConstraints, callbackUrl);
        }

        /**
         * Execute generateVoiePaystubReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VOIEPaystubReportAck> _callback) throws ApiException {
            VOIEReportConstraints voIEReportConstraints = buildBodyParams();
            return generateVoiePaystubReportAsync(customerId, voIEReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate VOIE - Paystub Report
     * Generate a VOIE - Paystub report. This service uses the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub report with digitized paystub details.  This is a premium service. The billing rate is the variable rate for VOIE - Paystub under the current subscription plan. The billable event is the successful generation of a VOIE - Paystub Report.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param voIEReportConstraints  (required)
     * @return GenerateVoiePaystubReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateVoiePaystubReportRequestBuilder generateVoiePaystubReport(VOIEWithStatementData voieWithStatementData, String customerId) throws IllegalArgumentException {
        if (voieWithStatementData == null) throw new IllegalArgumentException("\"voieWithStatementData\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateVoiePaystubReportRequestBuilder(voieWithStatementData, customerId);
    }
    private okhttp3.Call refreshVOIEPayrollReportCall(String customerId, PayrollReportConstraints payrollReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payrollReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/voiePayroll"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshVOIEPayrollReportValidateBeforeCall(String customerId, PayrollReportConstraints payrollReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling refreshVOIEPayrollReport(Async)");
        }

        // verify the required parameter 'payrollReportConstraints' is set
        if (payrollReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'payrollReportConstraints' when calling refreshVOIEPayrollReport(Async)");
        }

        return refreshVOIEPayrollReportCall(customerId, payrollReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<PayrollReportAck> refreshVOIEPayrollReportWithHttpInfo(String customerId, PayrollReportConstraints payrollReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = refreshVOIEPayrollReportValidateBeforeCall(customerId, payrollReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<PayrollReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call refreshVOIEPayrollReportAsync(String customerId, PayrollReportConstraints payrollReportConstraints, String callbackUrl, final ApiCallback<PayrollReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshVOIEPayrollReportValidateBeforeCall(customerId, payrollReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<PayrollReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RefreshVOIEPayrollReportRequestBuilder {
        private final PayrollData payrollData;
        private final String customerId;
        private List<ReportCustomField> reportCustomFields;
        private Long payStatementsFromDate;
        private String marketSegment;
        private Boolean excludeEmpInfo;
        private String purpose;
        private String callbackUrl;

        private RefreshVOIEPayrollReportRequestBuilder(PayrollData payrollData, String customerId) {
            this.payrollData = payrollData;
            this.customerId = customerId;
        }

        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return RefreshVOIEPayrollReportRequestBuilder
         */
        public RefreshVOIEPayrollReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set payStatementsFromDate
         * @param payStatementsFromDate Limits the pay statement history in the VOIE - Payroll report income record. Pay statements are only included if the payDate of the statement is equal to or greater than the start date requested. Date should be in Unix epoch time (in seconds). See: Handling Epoch Dates and Times. (optional)
         * @return RefreshVOIEPayrollReportRequestBuilder
         */
        public RefreshVOIEPayrollReportRequestBuilder payStatementsFromDate(Long payStatementsFromDate) {
            this.payStatementsFromDate = payStatementsFromDate;
            return this;
        }
        
        /**
         * Set marketSegment
         * @param marketSegment Use case for requesting the consumer&#39;s data. Current supported enumerations are \\\&quot;Mortgage\\\&quot; and \\\&quot;KYC\\\&quot;. If your use case doesn&#39;t match one of these please reach out to your technical point of contact. (optional)
         * @return RefreshVOIEPayrollReportRequestBuilder
         */
        public RefreshVOIEPayrollReportRequestBuilder marketSegment(String marketSegment) {
            this.marketSegment = marketSegment;
            return this;
        }
        
        /**
         * Set excludeEmpInfo
         * @param excludeEmpInfo Only used on an exception basis for clients that need to exclude EmpInfo data from the VOE-Payroll or VOIE-Payroll report. If true is passed EmpInfo payroll provider&#39;s data will not be searched or returned. (optional)
         * @return RefreshVOIEPayrollReportRequestBuilder
         */
        public RefreshVOIEPayrollReportRequestBuilder excludeEmpInfo(Boolean excludeEmpInfo) {
            this.excludeEmpInfo = excludeEmpInfo;
            return this;
        }
        
        /**
         * Set purpose
         * @param purpose FCRA required 2-digit Permissible Purpose Code, specifying the reason for retrieving this report. (optional)
         * @return RefreshVOIEPayrollReportRequestBuilder
         */
        public RefreshVOIEPayrollReportRequestBuilder purpose(String purpose) {
            this.purpose = purpose;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return RefreshVOIEPayrollReportRequestBuilder
         */
        public RefreshVOIEPayrollReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for refreshVOIEPayrollReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayrollReportConstraints payrollReportConstraints = buildBodyParams();
            return refreshVOIEPayrollReportCall(customerId, payrollReportConstraints, callbackUrl, _callback);
        }

        private PayrollReportConstraints buildBodyParams() {
            PayrollReportConstraints payrollReportConstraints = new PayrollReportConstraints();
            payrollReportConstraints.payrollData(this.payrollData);
            payrollReportConstraints.reportCustomFields(this.reportCustomFields);
            payrollReportConstraints.payStatementsFromDate(this.payStatementsFromDate);
            payrollReportConstraints.marketSegment(this.marketSegment);
            payrollReportConstraints.excludeEmpInfo(this.excludeEmpInfo);
            payrollReportConstraints.purpose(this.purpose);
            return payrollReportConstraints;
        }

        /**
         * Execute refreshVOIEPayrollReport request
         * @return PayrollReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public PayrollReportAck execute() throws ApiException {
            PayrollReportConstraints payrollReportConstraints = buildBodyParams();
            ApiResponse<PayrollReportAck> localVarResp = refreshVOIEPayrollReportWithHttpInfo(customerId, payrollReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute refreshVOIEPayrollReport request with HTTP info returned
         * @return ApiResponse&lt;PayrollReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayrollReportAck> executeWithHttpInfo() throws ApiException {
            PayrollReportConstraints payrollReportConstraints = buildBodyParams();
            return refreshVOIEPayrollReportWithHttpInfo(customerId, payrollReportConstraints, callbackUrl);
        }

        /**
         * Execute refreshVOIEPayrollReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayrollReportAck> _callback) throws ApiException {
            PayrollReportConstraints payrollReportConstraints = buildBodyParams();
            return refreshVOIEPayrollReportAsync(customerId, payrollReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate VOIE - Payroll Report
     * Generate or refresh a VOIE - Payroll report. For clients using the product via a consumer permissioning experience via Connect, the original VOIE - Payroll report generates when the consumer completes the Connect experience, and this API is only used for future report refreshes without reengaging the consumer.  This is a premium service. The billable event is the successful generation of a VOIE - Payroll report.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param payrollReportConstraints  (required)
     * @return RefreshVOIEPayrollReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public RefreshVOIEPayrollReportRequestBuilder refreshVOIEPayrollReport(PayrollData payrollData, String customerId) throws IllegalArgumentException {
        if (payrollData == null) throw new IllegalArgumentException("\"payrollData\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new RefreshVOIEPayrollReportRequestBuilder(payrollData, customerId);
    }
}
