/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Business;
import com.konfigthis.client.model.NewAddress;
import com.konfigthis.client.model.NewBusiness;
import com.konfigthis.client.model.PhoneNumberFormat;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BusinessesApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BusinessesApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessesApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewBusinessCall(String customerId, NewBusiness newBusiness, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newBusiness;

        // create path and map variables
        String localVarPath = "/business-services/customers/{customer_id}/businesses"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewBusinessValidateBeforeCall(String customerId, NewBusiness newBusiness, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling createNewBusiness(Async)");
        }

        // verify the required parameter 'newBusiness' is set
        if (newBusiness == null) {
            throw new ApiException("Missing the required parameter 'newBusiness' when calling createNewBusiness(Async)");
        }

        return createNewBusinessCall(customerId, newBusiness, _callback);

    }


    private ApiResponse<Business> createNewBusinessWithHttpInfo(String customerId, NewBusiness newBusiness) throws ApiException {
        okhttp3.Call localVarCall = createNewBusinessValidateBeforeCall(customerId, newBusiness, null);
        Type localVarReturnType = new TypeToken<Business>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewBusinessAsync(String customerId, NewBusiness newBusiness, final ApiCallback<Business> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewBusinessValidateBeforeCall(customerId, newBusiness, _callback);
        Type localVarReturnType = new TypeToken<Business>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewBusinessRequestBuilder {
        private final String name;
        private final Boolean personallyLiable;
        private final NewAddress address;
        private final PhoneNumberFormat phoneNumber;
        private final String customerId;
        private URI url;
        private String email;
        private String type;
        private String taxId;

        private CreateNewBusinessRequestBuilder(String name, Boolean personallyLiable, NewAddress address, PhoneNumberFormat phoneNumber, String customerId) {
            this.name = name;
            this.personallyLiable = personallyLiable;
            this.address = address;
            this.phoneNumber = phoneNumber;
            this.customerId = customerId;
        }

        /**
         * Set url
         * @param url A URL for the business website (optional)
         * @return CreateNewBusinessRequestBuilder
         */
        public CreateNewBusinessRequestBuilder url(URI url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set email
         * @param email An email address (optional)
         * @return CreateNewBusinessRequestBuilder
         */
        public CreateNewBusinessRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set type
         * @param type The business type eg LLC, Corp, S Corp, C Corp, B Corp, Sole Propriertorship, Nonprofit, etc. (optional)
         * @return CreateNewBusinessRequestBuilder
         */
        public CreateNewBusinessRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set taxId
         * @param taxId Provide details of the tax id for the business (optional)
         * @return CreateNewBusinessRequestBuilder
         */
        public CreateNewBusinessRequestBuilder taxId(String taxId) {
            this.taxId = taxId;
            return this;
        }
        
        /**
         * Build call for createNewBusiness
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business was successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewBusiness newBusiness = buildBodyParams();
            return createNewBusinessCall(customerId, newBusiness, _callback);
        }

        private NewBusiness buildBodyParams() {
            NewBusiness newBusiness = new NewBusiness();
            newBusiness.name(this.name);
            newBusiness.personallyLiable(this.personallyLiable);
            newBusiness.address(this.address);
            newBusiness.phoneNumber(this.phoneNumber);
            newBusiness.url(this.url);
            newBusiness.email(this.email);
            newBusiness.type(this.type);
            newBusiness.taxId(this.taxId);
            return newBusiness;
        }

        /**
         * Execute createNewBusiness request
         * @return Business
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business was successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public Business execute() throws ApiException {
            NewBusiness newBusiness = buildBodyParams();
            ApiResponse<Business> localVarResp = createNewBusinessWithHttpInfo(customerId, newBusiness);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewBusiness request with HTTP info returned
         * @return ApiResponse&lt;Business&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business was successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Business> executeWithHttpInfo() throws ApiException {
            NewBusiness newBusiness = buildBodyParams();
            return createNewBusinessWithHttpInfo(customerId, newBusiness);
        }

        /**
         * Execute createNewBusiness request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business was successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Business> _callback) throws ApiException {
            NewBusiness newBusiness = buildBodyParams();
            return createNewBusinessAsync(customerId, newBusiness, _callback);
        }
    }

    /**
     * Create a New Business for a Customer
     * Create a new business record for the associated customer. A customer can have one business record associated.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId Unique identifier of the customer (required)
     * @param newBusiness  (required)
     * @return CreateNewBusinessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The business was successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewBusinessRequestBuilder createNewBusiness(String name, Boolean personallyLiable, NewAddress address, PhoneNumberFormat phoneNumber, String customerId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (personallyLiable == null) throw new IllegalArgumentException("\"personallyLiable\" is required but got null");
        if (address == null) throw new IllegalArgumentException("\"address\" is required but got null");
        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new CreateNewBusinessRequestBuilder(name, personallyLiable, address, phoneNumber, customerId);
    }
    private okhttp3.Call getDetailsByCustomerIdCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/business-services/customers/{customer_id}/businesses"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsByCustomerIdValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getDetailsByCustomerId(Async)");
        }

        return getDetailsByCustomerIdCall(customerId, _callback);

    }


    private ApiResponse<List<Business>> getDetailsByCustomerIdWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsByCustomerIdValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<List<Business>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsByCustomerIdAsync(String customerId, final ApiCallback<List<Business>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsByCustomerIdValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<List<Business>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsByCustomerIdRequestBuilder {
        private final String customerId;

        private GetDetailsByCustomerIdRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for getDetailsByCustomerId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsByCustomerIdCall(customerId, _callback);
        }


        /**
         * Execute getDetailsByCustomerId request
         * @return List&lt;Business&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public List<Business> execute() throws ApiException {
            ApiResponse<List<Business>> localVarResp = getDetailsByCustomerIdWithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetailsByCustomerId request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Business&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Business>> executeWithHttpInfo() throws ApiException {
            return getDetailsByCustomerIdWithHttpInfo(customerId);
        }

        /**
         * Execute getDetailsByCustomerId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Business>> _callback) throws ApiException {
            return getDetailsByCustomerIdAsync(customerId, _callback);
        }
    }

    /**
     * Get Business for Customer
     * Retrieve business details associated with a specific customer. By providing the unique customer identifier, details about the associated business can be accessed.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId Unique identifier of the customer (required)
     * @return GetDetailsByCustomerIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The business information was successfully retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsByCustomerIdRequestBuilder getDetailsByCustomerId(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetDetailsByCustomerIdRequestBuilder(customerId);
    }
    private okhttp3.Call getDetailsByIdCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/business-services/businesses/{business_id}"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsByIdValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getDetailsById(Async)");
        }

        return getDetailsByIdCall(customerId, _callback);

    }


    private ApiResponse<List<Business>> getDetailsByIdWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsByIdValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<List<Business>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsByIdAsync(String customerId, final ApiCallback<List<Business>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsByIdValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<List<Business>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsByIdRequestBuilder {
        private final String customerId;

        private GetDetailsByIdRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for getDetailsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsByIdCall(customerId, _callback);
        }


        /**
         * Execute getDetailsById request
         * @return List&lt;Business&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public List<Business> execute() throws ApiException {
            ApiResponse<List<Business>> localVarResp = getDetailsByIdWithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetailsById request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Business&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Business>> executeWithHttpInfo() throws ApiException {
            return getDetailsByIdWithHttpInfo(customerId);
        }

        /**
         * Execute getDetailsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Business>> _callback) throws ApiException {
            return getDetailsByIdAsync(customerId, _callback);
        }
    }

    /**
     * Get Business by ID
     * Retrieve business details.  _Supported regions_: ![\\U0001F1FA\\U0001F1F8](https://flagcdn.com/20x15/us.png)
     * @param customerId Unique identifier of the customer (required)
     * @return GetDetailsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The business information was successfully retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsByIdRequestBuilder getDetailsById(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetDetailsByIdRequestBuilder(customerId);
    }
    private okhttp3.Call updateByIdCall(String customerId, NewBusiness newBusiness, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newBusiness;

        // create path and map variables
        String localVarPath = "/business-services/businesses/{business_id}"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String customerId, NewBusiness newBusiness, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateById(Async)");
        }

        // verify the required parameter 'newBusiness' is set
        if (newBusiness == null) {
            throw new ApiException("Missing the required parameter 'newBusiness' when calling updateById(Async)");
        }

        return updateByIdCall(customerId, newBusiness, _callback);

    }


    private ApiResponse<Business> updateByIdWithHttpInfo(String customerId, NewBusiness newBusiness) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(customerId, newBusiness, null);
        Type localVarReturnType = new TypeToken<Business>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(String customerId, NewBusiness newBusiness, final ApiCallback<Business> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(customerId, newBusiness, _callback);
        Type localVarReturnType = new TypeToken<Business>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String name;
        private final Boolean personallyLiable;
        private final NewAddress address;
        private final PhoneNumberFormat phoneNumber;
        private final String customerId;
        private URI url;
        private String email;
        private String type;
        private String taxId;

        private UpdateByIdRequestBuilder(String name, Boolean personallyLiable, NewAddress address, PhoneNumberFormat phoneNumber, String customerId) {
            this.name = name;
            this.personallyLiable = personallyLiable;
            this.address = address;
            this.phoneNumber = phoneNumber;
            this.customerId = customerId;
        }

        /**
         * Set url
         * @param url A URL for the business website (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder url(URI url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set email
         * @param email An email address (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set type
         * @param type The business type eg LLC, Corp, S Corp, C Corp, B Corp, Sole Propriertorship, Nonprofit, etc. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set taxId
         * @param taxId Provide details of the tax id for the business (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder taxId(String taxId) {
            this.taxId = taxId;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewBusiness newBusiness = buildBodyParams();
            return updateByIdCall(customerId, newBusiness, _callback);
        }

        private NewBusiness buildBodyParams() {
            NewBusiness newBusiness = new NewBusiness();
            newBusiness.name(this.name);
            newBusiness.personallyLiable(this.personallyLiable);
            newBusiness.address(this.address);
            newBusiness.phoneNumber(this.phoneNumber);
            newBusiness.url(this.url);
            newBusiness.email(this.email);
            newBusiness.type(this.type);
            newBusiness.taxId(this.taxId);
            return newBusiness;
        }

        /**
         * Execute updateById request
         * @return Business
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was updated. </td><td>  -  </td></tr>
         </table>
         */
        public Business execute() throws ApiException {
            NewBusiness newBusiness = buildBodyParams();
            ApiResponse<Business> localVarResp = updateByIdWithHttpInfo(customerId, newBusiness);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;Business&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was updated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Business> executeWithHttpInfo() throws ApiException {
            NewBusiness newBusiness = buildBodyParams();
            return updateByIdWithHttpInfo(customerId, newBusiness);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business information was updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Business> _callback) throws ApiException {
            NewBusiness newBusiness = buildBodyParams();
            return updateByIdAsync(customerId, newBusiness, _callback);
        }
    }

    /**
     * Update Business by ID
     * Update the details of a business based on its unique identifier. By providing the specific business ID and the updated information in the request, modifications can be made to the business&#39;s profile.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId Unique identifier of the customer (required)
     * @param newBusiness  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The business information was updated. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String name, Boolean personallyLiable, NewAddress address, PhoneNumberFormat phoneNumber, String customerId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (personallyLiable == null) throw new IllegalArgumentException("\"personallyLiable\" is required but got null");
        if (address == null) throw new IllegalArgumentException("\"address\" is required but got null");
        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(name, personallyLiable, address, phoneNumber, customerId);
    }
}
