/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreatedCustomer;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.CustomerUpdate;
import com.konfigthis.client.model.CustomerWithAppData;
import com.konfigthis.client.model.Customers;
import com.konfigthis.client.model.NewCustomer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call enrollActiveCustomerCall(NewCustomer newCustomer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newCustomer;

        // create path and map variables
        String localVarPath = "/aggregation/v2/customers/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollActiveCustomerValidateBeforeCall(NewCustomer newCustomer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'newCustomer' is set
        if (newCustomer == null) {
            throw new ApiException("Missing the required parameter 'newCustomer' when calling enrollActiveCustomer(Async)");
        }

        return enrollActiveCustomerCall(newCustomer, _callback);

    }


    private ApiResponse<CreatedCustomer> enrollActiveCustomerWithHttpInfo(NewCustomer newCustomer) throws ApiException {
        okhttp3.Call localVarCall = enrollActiveCustomerValidateBeforeCall(newCustomer, null);
        Type localVarReturnType = new TypeToken<CreatedCustomer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enrollActiveCustomerAsync(NewCustomer newCustomer, final ApiCallback<CreatedCustomer> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollActiveCustomerValidateBeforeCall(newCustomer, _callback);
        Type localVarReturnType = new TypeToken<CreatedCustomer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnrollActiveCustomerRequestBuilder {
        private final String username;
        private String firstName;
        private String lastName;
        private String applicationId;
        private String phone;
        private String email;

        private EnrollActiveCustomerRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Set firstName
         * @param firstName The first name of the account holder (optional)
         * @return EnrollActiveCustomerRequestBuilder
         */
        public EnrollActiveCustomerRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name of the account holder (optional)
         * @return EnrollActiveCustomerRequestBuilder
         */
        public EnrollActiveCustomerRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set applicationId
         * @param applicationId &#x60;applicationId&#x60; value returned from the Get App Registration Status API and the partner assign the customers to. This cannot be changed once set. Only applicable in cases of partners with multiple registered applications. If the partner only has one app, this can usually be omitted. This field is populated after the app is in a status approved. (optional)
         * @return EnrollActiveCustomerRequestBuilder
         */
        public EnrollActiveCustomerRequestBuilder applicationId(String applicationId) {
            this.applicationId = applicationId;
            return this;
        }
        
        /**
         * Set phone
         * @param phone A phone number (max length 15). (optional)
         * @return EnrollActiveCustomerRequestBuilder
         */
        public EnrollActiveCustomerRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set email
         * @param email An email address (optional)
         * @return EnrollActiveCustomerRequestBuilder
         */
        public EnrollActiveCustomerRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for enrollActiveCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The customer was successfully created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewCustomer newCustomer = buildBodyParams();
            return enrollActiveCustomerCall(newCustomer, _callback);
        }

        private NewCustomer buildBodyParams() {
            NewCustomer newCustomer = new NewCustomer();
            newCustomer.username(this.username);
            newCustomer.firstName(this.firstName);
            newCustomer.lastName(this.lastName);
            newCustomer.applicationId(this.applicationId);
            newCustomer.phone(this.phone);
            newCustomer.email(this.email);
            return newCustomer;
        }

        /**
         * Execute enrollActiveCustomer request
         * @return CreatedCustomer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The customer was successfully created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public CreatedCustomer execute() throws ApiException {
            NewCustomer newCustomer = buildBodyParams();
            ApiResponse<CreatedCustomer> localVarResp = enrollActiveCustomerWithHttpInfo(newCustomer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enrollActiveCustomer request with HTTP info returned
         * @return ApiResponse&lt;CreatedCustomer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The customer was successfully created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreatedCustomer> executeWithHttpInfo() throws ApiException {
            NewCustomer newCustomer = buildBodyParams();
            return enrollActiveCustomerWithHttpInfo(newCustomer);
        }

        /**
         * Execute enrollActiveCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The customer was successfully created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreatedCustomer> _callback) throws ApiException {
            NewCustomer newCustomer = buildBodyParams();
            return enrollActiveCustomerAsync(newCustomer, _callback);
        }
    }

    /**
     * Add Customer
     * Enroll an active customer, which is the actual owner of one or more real-world accounts. This is a billable customer.  Active customers must use the \&quot;FinBank Billable\&quot; profiles for testing purposes.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param newCustomer  (required)
     * @return EnrollActiveCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The customer was successfully created </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The service can&#39;t accept more requests or is not available from the Test Drive. </td><td>  -  </td></tr>
     </table>
     */
    public EnrollActiveCustomerRequestBuilder enrollActiveCustomer(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new EnrollActiveCustomerRequestBuilder(username);
    }
    private okhttp3.Call enrollTestingCustomerCall(NewCustomer newCustomer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newCustomer;

        // create path and map variables
        String localVarPath = "/aggregation/v2/customers/testing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollTestingCustomerValidateBeforeCall(NewCustomer newCustomer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'newCustomer' is set
        if (newCustomer == null) {
            throw new ApiException("Missing the required parameter 'newCustomer' when calling enrollTestingCustomer(Async)");
        }

        return enrollTestingCustomerCall(newCustomer, _callback);

    }


    private ApiResponse<CreatedCustomer> enrollTestingCustomerWithHttpInfo(NewCustomer newCustomer) throws ApiException {
        okhttp3.Call localVarCall = enrollTestingCustomerValidateBeforeCall(newCustomer, null);
        Type localVarReturnType = new TypeToken<CreatedCustomer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enrollTestingCustomerAsync(NewCustomer newCustomer, final ApiCallback<CreatedCustomer> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollTestingCustomerValidateBeforeCall(newCustomer, _callback);
        Type localVarReturnType = new TypeToken<CreatedCustomer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnrollTestingCustomerRequestBuilder {
        private final String username;
        private String firstName;
        private String lastName;
        private String applicationId;
        private String phone;
        private String email;

        private EnrollTestingCustomerRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Set firstName
         * @param firstName The first name of the account holder (optional)
         * @return EnrollTestingCustomerRequestBuilder
         */
        public EnrollTestingCustomerRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name of the account holder (optional)
         * @return EnrollTestingCustomerRequestBuilder
         */
        public EnrollTestingCustomerRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set applicationId
         * @param applicationId &#x60;applicationId&#x60; value returned from the Get App Registration Status API and the partner assign the customers to. This cannot be changed once set. Only applicable in cases of partners with multiple registered applications. If the partner only has one app, this can usually be omitted. This field is populated after the app is in a status approved. (optional)
         * @return EnrollTestingCustomerRequestBuilder
         */
        public EnrollTestingCustomerRequestBuilder applicationId(String applicationId) {
            this.applicationId = applicationId;
            return this;
        }
        
        /**
         * Set phone
         * @param phone A phone number (max length 15). (optional)
         * @return EnrollTestingCustomerRequestBuilder
         */
        public EnrollTestingCustomerRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set email
         * @param email An email address (optional)
         * @return EnrollTestingCustomerRequestBuilder
         */
        public EnrollTestingCustomerRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for enrollTestingCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The customer was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewCustomer newCustomer = buildBodyParams();
            return enrollTestingCustomerCall(newCustomer, _callback);
        }

        private NewCustomer buildBodyParams() {
            NewCustomer newCustomer = new NewCustomer();
            newCustomer.username(this.username);
            newCustomer.firstName(this.firstName);
            newCustomer.lastName(this.lastName);
            newCustomer.applicationId(this.applicationId);
            newCustomer.phone(this.phone);
            newCustomer.email(this.email);
            return newCustomer;
        }

        /**
         * Execute enrollTestingCustomer request
         * @return CreatedCustomer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The customer was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public CreatedCustomer execute() throws ApiException {
            NewCustomer newCustomer = buildBodyParams();
            ApiResponse<CreatedCustomer> localVarResp = enrollTestingCustomerWithHttpInfo(newCustomer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enrollTestingCustomer request with HTTP info returned
         * @return ApiResponse&lt;CreatedCustomer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The customer was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreatedCustomer> executeWithHttpInfo() throws ApiException {
            NewCustomer newCustomer = buildBodyParams();
            return enrollTestingCustomerWithHttpInfo(newCustomer);
        }

        /**
         * Execute enrollTestingCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The customer was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreatedCustomer> _callback) throws ApiException {
            NewCustomer newCustomer = buildBodyParams();
            return enrollTestingCustomerAsync(newCustomer, _callback);
        }
    }

    /**
     * Add Testing Customer
     * Enroll a testing customer (Test Drive accounts).  For using testing customers with FinBank OAuth, you must register a test application with your systems engineer or account manager. Then, use that testing &#x60;applicationId&#x60; when creating testing customers.  Testing Customers can access FinBank profiles (except \&quot;FinBank Billable\&quot; profiles), and cannot access live financial institutions.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param newCustomer  (required)
     * @return EnrollTestingCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The customer was successfully created </td><td>  -  </td></tr>
     </table>
     */
    public EnrollTestingCustomerRequestBuilder enrollTestingCustomer(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new EnrollTestingCustomerRequestBuilder(username);
    }
    private okhttp3.Call findEnrolledUsersCall(String username, String type, String search, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findEnrolledUsersValidateBeforeCall(String username, String type, String search, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        return findEnrolledUsersCall(username, type, search, start, limit, _callback);

    }


    private ApiResponse<Customers> findEnrolledUsersWithHttpInfo(String username, String type, String search, Integer start, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = findEnrolledUsersValidateBeforeCall(username, type, search, start, limit, null);
        Type localVarReturnType = new TypeToken<Customers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findEnrolledUsersAsync(String username, String type, String search, Integer start, Integer limit, final ApiCallback<Customers> _callback) throws ApiException {

        okhttp3.Call localVarCall = findEnrolledUsersValidateBeforeCall(username, type, search, start, limit, _callback);
        Type localVarReturnType = new TypeToken<Customers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindEnrolledUsersRequestBuilder {
        private String username;
        private String type;
        private String search;
        private Integer start;
        private Integer limit;

        private FindEnrolledUsersRequestBuilder() {
        }

        /**
         * Set username
         * @param username Username for exact match (will return 0 or 1 record) (optional)
         * @return FindEnrolledUsersRequestBuilder
         */
        public FindEnrolledUsersRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set type
         * @param type \&quot;testing\&quot; or \&quot;active\&quot; to return only customers of that type, or leave empty to return all customers (optional)
         * @return FindEnrolledUsersRequestBuilder
         */
        public FindEnrolledUsersRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set search
         * @param search The text you wish to match. Leave this empty if you wish to return all customers. Must be URL-encoded (see: [Handling Spaces in Queries](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/)). (optional)
         * @return FindEnrolledUsersRequestBuilder
         */
        public FindEnrolledUsersRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set start
         * @param start Index of the page of results to return (optional, default to 1)
         * @return FindEnrolledUsersRequestBuilder
         */
        public FindEnrolledUsersRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of results per page (optional, default to 25)
         * @return FindEnrolledUsersRequestBuilder
         */
        public FindEnrolledUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for findEnrolledUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customers were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findEnrolledUsersCall(username, type, search, start, limit, _callback);
        }


        /**
         * Execute findEnrolledUsers request
         * @return Customers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customers were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public Customers execute() throws ApiException {
            ApiResponse<Customers> localVarResp = findEnrolledUsersWithHttpInfo(username, type, search, start, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findEnrolledUsers request with HTTP info returned
         * @return ApiResponse&lt;Customers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customers were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Customers> executeWithHttpInfo() throws ApiException {
            return findEnrolledUsersWithHttpInfo(username, type, search, start, limit);
        }

        /**
         * Execute findEnrolledUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customers were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Customers> _callback) throws ApiException {
            return findEnrolledUsersAsync(username, type, search, start, limit, _callback);
        }
    }

    /**
     * Get Customers
     * Find all customers enrolled by the current partner, where the search text is found in the customer&#39;s username or any combination of &#x60;firstName&#x60; and &#x60;lastName&#x60; fields. If no search text is provided, all customers will be returned.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @return FindEnrolledUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Customers were successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public FindEnrolledUsersRequestBuilder findEnrolledUsers() throws IllegalArgumentException {
        return new FindEnrolledUsersRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getById(Async)");
        }

        return getByIdCall(customerId, _callback);

    }


    private ApiResponse<Customer> getByIdWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String customerId, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String customerId;

        private GetByIdRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The customer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(customerId, _callback);
        }


        /**
         * Execute getById request
         * @return Customer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The customer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public Customer execute() throws ApiException {
            ApiResponse<Customer> localVarResp = getByIdWithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The customer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Customer> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(customerId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The customer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Customer> _callback) throws ApiException {
            return getByIdAsync(customerId, _callback);
        }
    }

    /**
     * Get Customer by ID
     * Retrieve a customer by ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The customer was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetByIdRequestBuilder(customerId);
    }
    private okhttp3.Call getWithAppDataByIdCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/application"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWithAppDataByIdValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getWithAppDataById(Async)");
        }

        return getWithAppDataByIdCall(customerId, _callback);

    }


    private ApiResponse<CustomerWithAppData> getWithAppDataByIdWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getWithAppDataByIdValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<CustomerWithAppData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWithAppDataByIdAsync(String customerId, final ApiCallback<CustomerWithAppData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWithAppDataByIdValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<CustomerWithAppData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWithAppDataByIdRequestBuilder {
        private final String customerId;

        private GetWithAppDataByIdRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for getWithAppDataById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The customer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWithAppDataByIdCall(customerId, _callback);
        }


        /**
         * Execute getWithAppDataById request
         * @return CustomerWithAppData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The customer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CustomerWithAppData execute() throws ApiException {
            ApiResponse<CustomerWithAppData> localVarResp = getWithAppDataByIdWithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWithAppDataById request with HTTP info returned
         * @return ApiResponse&lt;CustomerWithAppData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The customer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerWithAppData> executeWithHttpInfo() throws ApiException {
            return getWithAppDataByIdWithHttpInfo(customerId);
        }

        /**
         * Execute getWithAppDataById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The customer was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerWithAppData> _callback) throws ApiException {
            return getWithAppDataByIdAsync(customerId, _callback);
        }
    }

    /**
     * Get Customer With App Data by ID
     * Retrieve a customer along with additional details about the OAuth application.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return GetWithAppDataByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The customer was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetWithAppDataByIdRequestBuilder getWithAppDataById(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetWithAppDataByIdRequestBuilder(customerId);
    }
    private okhttp3.Call modifyByIdCall(String customerId, CustomerUpdate customerUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerUpdate;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyByIdValidateBeforeCall(String customerId, CustomerUpdate customerUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling modifyById(Async)");
        }

        // verify the required parameter 'customerUpdate' is set
        if (customerUpdate == null) {
            throw new ApiException("Missing the required parameter 'customerUpdate' when calling modifyById(Async)");
        }

        return modifyByIdCall(customerId, customerUpdate, _callback);

    }


    private ApiResponse<Void> modifyByIdWithHttpInfo(String customerId, CustomerUpdate customerUpdate) throws ApiException {
        okhttp3.Call localVarCall = modifyByIdValidateBeforeCall(customerId, customerUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call modifyByIdAsync(String customerId, CustomerUpdate customerUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyByIdValidateBeforeCall(customerId, customerUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ModifyByIdRequestBuilder {
        private final String customerId;
        private String firstName;
        private String lastName;

        private ModifyByIdRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set firstName
         * @param firstName The first name of the account holder (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name of the account holder (optional)
         * @return ModifyByIdRequestBuilder
         */
        public ModifyByIdRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Build call for modifyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomerUpdate customerUpdate = buildBodyParams();
            return modifyByIdCall(customerId, customerUpdate, _callback);
        }

        private CustomerUpdate buildBodyParams() {
            CustomerUpdate customerUpdate = new CustomerUpdate();
            customerUpdate.firstName(this.firstName);
            customerUpdate.lastName(this.lastName);
            return customerUpdate;
        }

        /**
         * Execute modifyById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CustomerUpdate customerUpdate = buildBodyParams();
            modifyByIdWithHttpInfo(customerId, customerUpdate);
        }

        /**
         * Execute modifyById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CustomerUpdate customerUpdate = buildBodyParams();
            return modifyByIdWithHttpInfo(customerId, customerUpdate);
        }

        /**
         * Execute modifyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CustomerUpdate customerUpdate = buildBodyParams();
            return modifyByIdAsync(customerId, customerUpdate, _callback);
        }
    }

    /**
     * Modify Customer by ID
     * Modify an enrolled customer by ID.  You must specify either &#x60;firstName&#x60;, &#x60;lastName&#x60;, or both in the request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param customerUpdate  (required)
     * @return ModifyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The customer was successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public ModifyByIdRequestBuilder modifyById(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new ModifyByIdRequestBuilder(customerId);
    }
    private okhttp3.Call removeByIdCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling removeById(Async)");
        }

        return removeByIdCall(customerId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(customerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String customerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(customerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String customerId;

        private RemoveByIdRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(customerId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(customerId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(customerId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(customerId, _callback);
        }
    }

    /**
     * Delete Customer by ID
     * Completely remove a customer from the system. This will remove the customer and all associated accounts and transactions.  ⚠️ Use this service carefully! It will not pause for confirmation before performing the operation!  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The customer was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(customerId);
    }
}
