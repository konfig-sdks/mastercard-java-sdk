/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomerAccount;
import com.konfigthis.client.model.CustomerAccounts;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v2/customers/{customerId}/accounts/{accountId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getById(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getById(Async)");
        }

        return getByIdCall(customerId, accountId, _callback);

    }


    private ApiResponse<CustomerAccount> getByIdWithHttpInfo(String customerId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(customerId, accountId, null);
        Type localVarReturnType = new TypeToken<CustomerAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String customerId, String accountId, final ApiCallback<CustomerAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(customerId, accountId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String customerId;
        private final String accountId;

        private GetByIdRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(customerId, accountId, _callback);
        }


        /**
         * Execute getById request
         * @return CustomerAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccount execute() throws ApiException {
            ApiResponse<CustomerAccount> localVarResp = getByIdWithHttpInfo(customerId, accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccount> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccount> _callback) throws ApiException {
            return getByIdAsync(customerId, accountId, _callback);
        }
    }

    /**
     * Get Customer Account by ID
     * Get a customer account by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetByIdRequestBuilder(customerId, accountId);
    }
    private okhttp3.Call getByInstitutionLoginCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "institutionLoginId" + "}", localVarApiClient.escapeString(institutionLoginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByInstitutionLoginValidateBeforeCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getByInstitutionLogin(Async)");
        }

        // verify the required parameter 'institutionLoginId' is set
        if (institutionLoginId == null) {
            throw new ApiException("Missing the required parameter 'institutionLoginId' when calling getByInstitutionLogin(Async)");
        }

        return getByInstitutionLoginCall(customerId, institutionLoginId, _callback);

    }


    private ApiResponse<CustomerAccounts> getByInstitutionLoginWithHttpInfo(String customerId, String institutionLoginId) throws ApiException {
        okhttp3.Call localVarCall = getByInstitutionLoginValidateBeforeCall(customerId, institutionLoginId, null);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByInstitutionLoginAsync(String customerId, String institutionLoginId, final ApiCallback<CustomerAccounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByInstitutionLoginValidateBeforeCall(customerId, institutionLoginId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByInstitutionLoginRequestBuilder {
        private final String customerId;
        private final String institutionLoginId;

        private GetByInstitutionLoginRequestBuilder(String customerId, String institutionLoginId) {
            this.customerId = customerId;
            this.institutionLoginId = institutionLoginId;
        }

        /**
         * Build call for getByInstitutionLogin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByInstitutionLoginCall(customerId, institutionLoginId, _callback);
        }


        /**
         * Execute getByInstitutionLogin request
         * @return CustomerAccounts
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccounts execute() throws ApiException {
            ApiResponse<CustomerAccounts> localVarResp = getByInstitutionLoginWithHttpInfo(customerId, institutionLoginId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByInstitutionLogin request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccounts&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccounts> executeWithHttpInfo() throws ApiException {
            return getByInstitutionLoginWithHttpInfo(customerId, institutionLoginId);
        }

        /**
         * Execute getByInstitutionLogin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccounts> _callback) throws ApiException {
            return getByInstitutionLoginAsync(customerId, institutionLoginId, _callback);
        }
    }

    /**
     * Get Customer Accounts by Institution Login ID
     * Get all accounts associated with the given institution login. All accounts returned are accessible by a single set of credentials on a single institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param institutionLoginId The institution login ID (required)
     * @return GetByInstitutionLoginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetByInstitutionLoginRequestBuilder getByInstitutionLogin(String customerId, String institutionLoginId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (institutionLoginId == null) throw new IllegalArgumentException("\"institutionLoginId\" is required but got null");
            

        return new GetByInstitutionLoginRequestBuilder(customerId, institutionLoginId);
    }
    private okhttp3.Call getCustomerAccountsCall(String customerId, String status, String accountType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (accountType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_type", accountType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerAccountsValidateBeforeCall(String customerId, String status, String accountType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerAccounts(Async)");
        }

        return getCustomerAccountsCall(customerId, status, accountType, _callback);

    }


    private ApiResponse<CustomerAccounts> getCustomerAccountsWithHttpInfo(String customerId, String status, String accountType) throws ApiException {
        okhttp3.Call localVarCall = getCustomerAccountsValidateBeforeCall(customerId, status, accountType, null);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerAccountsAsync(String customerId, String status, String accountType, final ApiCallback<CustomerAccounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerAccountsValidateBeforeCall(customerId, status, accountType, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomerAccountsRequestBuilder {
        private final String customerId;
        private String status;
        private String accountType;

        private GetCustomerAccountsRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set status
         * @param status A filter to fetch account in the given status (optional)
         * @return GetCustomerAccountsRequestBuilder
         */
        public GetCustomerAccountsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType A filter to fetch accounts for the given type. Currently supported types: \&quot;ava\&quot; (optional)
         * @return GetCustomerAccountsRequestBuilder
         */
        public GetCustomerAccountsRequestBuilder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Build call for getCustomerAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerAccountsCall(customerId, status, accountType, _callback);
        }


        /**
         * Execute getCustomerAccounts request
         * @return CustomerAccounts
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccounts execute() throws ApiException {
            ApiResponse<CustomerAccounts> localVarResp = getCustomerAccountsWithHttpInfo(customerId, status, accountType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomerAccounts request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccounts&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccounts> executeWithHttpInfo() throws ApiException {
            return getCustomerAccountsWithHttpInfo(customerId, status, accountType);
        }

        /**
         * Execute getCustomerAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccounts> _callback) throws ApiException {
            return getCustomerAccountsAsync(customerId, status, accountType, _callback);
        }
    }

    /**
     * Get Customer Accounts
     * Get all accounts owned by the given customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return GetCustomerAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerAccountsRequestBuilder getCustomerAccounts(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetCustomerAccountsRequestBuilder(customerId);
    }
    private okhttp3.Call getCustomerInstitutionAccountsCall(String customerId, Long institutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/institutions/{institutionId}/accounts"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "institutionId" + "}", localVarApiClient.escapeString(institutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerInstitutionAccountsValidateBeforeCall(String customerId, Long institutionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerInstitutionAccounts(Async)");
        }

        // verify the required parameter 'institutionId' is set
        if (institutionId == null) {
            throw new ApiException("Missing the required parameter 'institutionId' when calling getCustomerInstitutionAccounts(Async)");
        }

        return getCustomerInstitutionAccountsCall(customerId, institutionId, _callback);

    }


    private ApiResponse<CustomerAccounts> getCustomerInstitutionAccountsWithHttpInfo(String customerId, Long institutionId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerInstitutionAccountsValidateBeforeCall(customerId, institutionId, null);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerInstitutionAccountsAsync(String customerId, Long institutionId, final ApiCallback<CustomerAccounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerInstitutionAccountsValidateBeforeCall(customerId, institutionId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomerInstitutionAccountsRequestBuilder {
        private final String customerId;
        private final Long institutionId;

        private GetCustomerInstitutionAccountsRequestBuilder(String customerId, Long institutionId) {
            this.customerId = customerId;
            this.institutionId = institutionId;
        }

        /**
         * Build call for getCustomerInstitutionAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerInstitutionAccountsCall(customerId, institutionId, _callback);
        }


        /**
         * Execute getCustomerInstitutionAccounts request
         * @return CustomerAccounts
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccounts execute() throws ApiException {
            ApiResponse<CustomerAccounts> localVarResp = getCustomerInstitutionAccountsWithHttpInfo(customerId, institutionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomerInstitutionAccounts request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccounts&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccounts> executeWithHttpInfo() throws ApiException {
            return getCustomerInstitutionAccountsWithHttpInfo(customerId, institutionId);
        }

        /**
         * Execute getCustomerInstitutionAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccounts> _callback) throws ApiException {
            return getCustomerInstitutionAccountsAsync(customerId, institutionId, _callback);
        }
    }

    /**
     * Get Customer Accounts by Institution ID
     * Get all active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param institutionId The institution ID (required)
     * @return GetCustomerInstitutionAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account list was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerInstitutionAccountsRequestBuilder getCustomerInstitutionAccounts(String customerId, Long institutionId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (institutionId == null) throw new IllegalArgumentException("\"institutionId\" is required but got null");
        return new GetCustomerInstitutionAccountsRequestBuilder(customerId, institutionId);
    }
    private okhttp3.Call refreshCustomerAccountByInstitutionLoginCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "institutionLoginId" + "}", localVarApiClient.escapeString(institutionLoginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshCustomerAccountByInstitutionLoginValidateBeforeCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling refreshCustomerAccountByInstitutionLogin(Async)");
        }

        // verify the required parameter 'institutionLoginId' is set
        if (institutionLoginId == null) {
            throw new ApiException("Missing the required parameter 'institutionLoginId' when calling refreshCustomerAccountByInstitutionLogin(Async)");
        }

        return refreshCustomerAccountByInstitutionLoginCall(customerId, institutionLoginId, _callback);

    }


    private ApiResponse<Void> refreshCustomerAccountByInstitutionLoginWithHttpInfo(String customerId, String institutionLoginId) throws ApiException {
        okhttp3.Call localVarCall = refreshCustomerAccountByInstitutionLoginValidateBeforeCall(customerId, institutionLoginId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call refreshCustomerAccountByInstitutionLoginAsync(String customerId, String institutionLoginId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshCustomerAccountByInstitutionLoginValidateBeforeCall(customerId, institutionLoginId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RefreshCustomerAccountByInstitutionLoginRequestBuilder {
        private final String customerId;
        private final String institutionLoginId;

        private RefreshCustomerAccountByInstitutionLoginRequestBuilder(String customerId, String institutionLoginId) {
            this.customerId = customerId;
            this.institutionLoginId = institutionLoginId;
        }

        /**
         * Build call for refreshCustomerAccountByInstitutionLogin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return refreshCustomerAccountByInstitutionLoginCall(customerId, institutionLoginId, _callback);
        }


        /**
         * Execute refreshCustomerAccountByInstitutionLogin request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            refreshCustomerAccountByInstitutionLoginWithHttpInfo(customerId, institutionLoginId);
        }

        /**
         * Execute refreshCustomerAccountByInstitutionLogin request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return refreshCustomerAccountByInstitutionLoginWithHttpInfo(customerId, institutionLoginId);
        }

        /**
         * Execute refreshCustomerAccountByInstitutionLogin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return refreshCustomerAccountByInstitutionLoginAsync(customerId, institutionLoginId, _callback);
        }
    }

    /**
     * Refresh Customer Account by Institution Login ID for Data Access Tiers
     * Refresh account and transaction data for all accounts associated with a given &#39;institutionLoginId&#x60; with a connection to the institution. Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for dynamic billing tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param institutionLoginId The institution login ID (required)
     * @return RefreshCustomerAccountByInstitutionLoginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
     </table>
     */
    public RefreshCustomerAccountByInstitutionLoginRequestBuilder refreshCustomerAccountByInstitutionLogin(String customerId, String institutionLoginId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (institutionLoginId == null) throw new IllegalArgumentException("\"institutionLoginId\" is required but got null");
            

        return new RefreshCustomerAccountByInstitutionLoginRequestBuilder(customerId, institutionLoginId);
    }
    private okhttp3.Call refreshCustomerAggregationCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshCustomerAggregationValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling refreshCustomerAggregation(Async)");
        }

        return refreshCustomerAggregationCall(customerId, _callback);

    }


    private ApiResponse<CustomerAccounts> refreshCustomerAggregationWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = refreshCustomerAggregationValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call refreshCustomerAggregationAsync(String customerId, final ApiCallback<CustomerAccounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshCustomerAggregationValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RefreshCustomerAggregationRequestBuilder {
        private final String customerId;

        private RefreshCustomerAggregationRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for refreshCustomerAggregation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return refreshCustomerAggregationCall(customerId, _callback);
        }


        /**
         * Execute refreshCustomerAggregation request
         * @return CustomerAccounts
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccounts execute() throws ApiException {
            ApiResponse<CustomerAccounts> localVarResp = refreshCustomerAggregationWithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute refreshCustomerAggregation request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccounts&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccounts> executeWithHttpInfo() throws ApiException {
            return refreshCustomerAggregationWithHttpInfo(customerId);
        }

        /**
         * Execute refreshCustomerAggregation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccounts> _callback) throws ApiException {
            return refreshCustomerAggregationAsync(customerId, _callback);
        }
    }

    /**
     * Refresh Customer Accounts
     * Refresh account and transaction data for all accounts associated with the  given &#x60;customerId&#x60; with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh services repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all tiers of dynamic billing.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return RefreshCustomerAggregationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
     </table>
     */
    public RefreshCustomerAggregationRequestBuilder refreshCustomerAggregation(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new RefreshCustomerAggregationRequestBuilder(customerId);
    }
    private okhttp3.Call refreshCustomerByInstitutionLoginCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "institutionLoginId" + "}", localVarApiClient.escapeString(institutionLoginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshCustomerByInstitutionLoginValidateBeforeCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling refreshCustomerByInstitutionLogin(Async)");
        }

        // verify the required parameter 'institutionLoginId' is set
        if (institutionLoginId == null) {
            throw new ApiException("Missing the required parameter 'institutionLoginId' when calling refreshCustomerByInstitutionLogin(Async)");
        }

        return refreshCustomerByInstitutionLoginCall(customerId, institutionLoginId, _callback);

    }


    private ApiResponse<CustomerAccounts> refreshCustomerByInstitutionLoginWithHttpInfo(String customerId, String institutionLoginId) throws ApiException {
        okhttp3.Call localVarCall = refreshCustomerByInstitutionLoginValidateBeforeCall(customerId, institutionLoginId, null);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call refreshCustomerByInstitutionLoginAsync(String customerId, String institutionLoginId, final ApiCallback<CustomerAccounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshCustomerByInstitutionLoginValidateBeforeCall(customerId, institutionLoginId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RefreshCustomerByInstitutionLoginRequestBuilder {
        private final String customerId;
        private final String institutionLoginId;

        private RefreshCustomerByInstitutionLoginRequestBuilder(String customerId, String institutionLoginId) {
            this.customerId = customerId;
            this.institutionLoginId = institutionLoginId;
        }

        /**
         * Build call for refreshCustomerByInstitutionLogin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return refreshCustomerByInstitutionLoginCall(customerId, institutionLoginId, _callback);
        }


        /**
         * Execute refreshCustomerByInstitutionLogin request
         * @return CustomerAccounts
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccounts execute() throws ApiException {
            ApiResponse<CustomerAccounts> localVarResp = refreshCustomerByInstitutionLoginWithHttpInfo(customerId, institutionLoginId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute refreshCustomerByInstitutionLogin request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccounts&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccounts> executeWithHttpInfo() throws ApiException {
            return refreshCustomerByInstitutionLoginWithHttpInfo(customerId, institutionLoginId);
        }

        /**
         * Execute refreshCustomerByInstitutionLogin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccounts> _callback) throws ApiException {
            return refreshCustomerByInstitutionLoginAsync(customerId, institutionLoginId, _callback);
        }
    }

    /**
     * Refresh Customer Accounts by Institution Login ID
     * Refresh account and transaction data for all accounts associated with a given &#x60;institutionLoginId&#x60; with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all tiers of dynamic billing.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param institutionLoginId The institution login ID (required)
     * @return RefreshCustomerByInstitutionLoginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
     </table>
     */
    public RefreshCustomerByInstitutionLoginRequestBuilder refreshCustomerByInstitutionLogin(String customerId, String institutionLoginId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (institutionLoginId == null) throw new IllegalArgumentException("\"institutionLoginId\" is required but got null");
            

        return new RefreshCustomerByInstitutionLoginRequestBuilder(customerId, institutionLoginId);
    }
    private okhttp3.Call refreshCustomerDataCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v2/customers/{customerId}/accounts"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshCustomerDataValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling refreshCustomerData(Async)");
        }

        return refreshCustomerDataCall(customerId, _callback);

    }


    private ApiResponse<Void> refreshCustomerDataWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = refreshCustomerDataValidateBeforeCall(customerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call refreshCustomerDataAsync(String customerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshCustomerDataValidateBeforeCall(customerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RefreshCustomerDataRequestBuilder {
        private final String customerId;

        private RefreshCustomerDataRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for refreshCustomerData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return refreshCustomerDataCall(customerId, _callback);
        }


        /**
         * Execute refreshCustomerData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            refreshCustomerDataWithHttpInfo(customerId);
        }

        /**
         * Execute refreshCustomerData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return refreshCustomerDataWithHttpInfo(customerId);
        }

        /**
         * Execute refreshCustomerData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return refreshCustomerDataAsync(customerId, _callback);
        }
    }

    /**
     * Refresh Customer Accounts for Data Access Tiers
     * Refresh account and transaction data for all accounts associated with the  given &#x60;customerId&#x60; with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for dynamic billing tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @return RefreshCustomerDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The account list was successfully refreshed </td><td>  -  </td></tr>
     </table>
     */
    public RefreshCustomerDataRequestBuilder refreshCustomerData(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new RefreshCustomerDataRequestBuilder(customerId);
    }
    private okhttp3.Call removeByCustomerIdAndAccountIdCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/{accountId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByCustomerIdAndAccountIdValidateBeforeCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling removeByCustomerIdAndAccountId(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling removeByCustomerIdAndAccountId(Async)");
        }

        return removeByCustomerIdAndAccountIdCall(customerId, accountId, _callback);

    }


    private ApiResponse<Void> removeByCustomerIdAndAccountIdWithHttpInfo(String customerId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = removeByCustomerIdAndAccountIdValidateBeforeCall(customerId, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByCustomerIdAndAccountIdAsync(String customerId, String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByCustomerIdAndAccountIdValidateBeforeCall(customerId, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByCustomerIdAndAccountIdRequestBuilder {
        private final String customerId;
        private final String accountId;

        private RemoveByCustomerIdAndAccountIdRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for removeByCustomerIdAndAccountId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer account was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByCustomerIdAndAccountIdCall(customerId, accountId, _callback);
        }


        /**
         * Execute removeByCustomerIdAndAccountId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer account was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByCustomerIdAndAccountIdWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute removeByCustomerIdAndAccountId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer account was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByCustomerIdAndAccountIdWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute removeByCustomerIdAndAccountId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer account was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByCustomerIdAndAccountIdAsync(customerId, accountId, _callback);
        }
    }

    /**
     * Delete Customer Account by ID
     * Remove the given account from Finicity aggregation.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return RemoveByCustomerIdAndAccountIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The customer account was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByCustomerIdAndAccountIdRequestBuilder removeByCustomerIdAndAccountId(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new RemoveByCustomerIdAndAccountIdRequestBuilder(customerId, accountId);
    }
    private okhttp3.Call removeByInstitutionLoginCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "institutionLoginId" + "}", localVarApiClient.escapeString(institutionLoginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByInstitutionLoginValidateBeforeCall(String customerId, String institutionLoginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling removeByInstitutionLogin(Async)");
        }

        // verify the required parameter 'institutionLoginId' is set
        if (institutionLoginId == null) {
            throw new ApiException("Missing the required parameter 'institutionLoginId' when calling removeByInstitutionLogin(Async)");
        }

        return removeByInstitutionLoginCall(customerId, institutionLoginId, _callback);

    }


    private ApiResponse<Void> removeByInstitutionLoginWithHttpInfo(String customerId, String institutionLoginId) throws ApiException {
        okhttp3.Call localVarCall = removeByInstitutionLoginValidateBeforeCall(customerId, institutionLoginId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByInstitutionLoginAsync(String customerId, String institutionLoginId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByInstitutionLoginValidateBeforeCall(customerId, institutionLoginId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByInstitutionLoginRequestBuilder {
        private final String customerId;
        private final String institutionLoginId;

        private RemoveByInstitutionLoginRequestBuilder(String customerId, String institutionLoginId) {
            this.customerId = customerId;
            this.institutionLoginId = institutionLoginId;
        }

        /**
         * Build call for removeByInstitutionLogin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer accounts were successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByInstitutionLoginCall(customerId, institutionLoginId, _callback);
        }


        /**
         * Execute removeByInstitutionLogin request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer accounts were successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByInstitutionLoginWithHttpInfo(customerId, institutionLoginId);
        }

        /**
         * Execute removeByInstitutionLogin request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer accounts were successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByInstitutionLoginWithHttpInfo(customerId, institutionLoginId);
        }

        /**
         * Execute removeByInstitutionLogin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The customer accounts were successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByInstitutionLoginAsync(customerId, institutionLoginId, _callback);
        }
    }

    /**
     * Delete Customer Accounts by Institution Login ID
     * Remove from Finicity aggregation the set of accounts matching the institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param institutionLoginId The institution login ID (required)
     * @return RemoveByInstitutionLoginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The customer accounts were successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByInstitutionLoginRequestBuilder removeByInstitutionLogin(String customerId, String institutionLoginId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (institutionLoginId == null) throw new IllegalArgumentException("\"institutionLoginId\" is required but got null");
            

        return new RemoveByInstitutionLoginRequestBuilder(customerId, institutionLoginId);
    }
}
