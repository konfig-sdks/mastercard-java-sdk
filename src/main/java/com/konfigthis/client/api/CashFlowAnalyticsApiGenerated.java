/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AnalyticsReportAck;
import com.konfigthis.client.model.AnalyticsReportConstraints;
import com.konfigthis.client.model.AnalyticsReportData;
import com.konfigthis.client.model.BalanceAndCashFlowAnalyticsReportConstraints;
import java.io.File;
import com.konfigthis.client.model.ObbAnalyticsReport;
import com.konfigthis.client.model.ObbAnalyticsReportAck;
import com.konfigthis.client.model.ReportCustomField;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CashFlowAnalyticsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CashFlowAnalyticsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CashFlowAnalyticsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateAnalyticsCall(String customerId, BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints, String referenceNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = balanceAndCashFlowAnalyticsReportConstraints;

        // create path and map variables
        String localVarPath = "/analytics/cashflow/v1/customer/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference-number", referenceNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateAnalyticsValidateBeforeCall(String customerId, BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints, String referenceNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateAnalytics(Async)");
        }

        // verify the required parameter 'balanceAndCashFlowAnalyticsReportConstraints' is set
        if (balanceAndCashFlowAnalyticsReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'balanceAndCashFlowAnalyticsReportConstraints' when calling generateAnalytics(Async)");
        }

        return generateAnalyticsCall(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber, _callback);

    }


    private ApiResponse<ObbAnalyticsReportAck> generateAnalyticsWithHttpInfo(String customerId, BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints, String referenceNumber) throws ApiException {
        okhttp3.Call localVarCall = generateAnalyticsValidateBeforeCall(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber, null);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateAnalyticsAsync(String customerId, BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints, String referenceNumber, final ApiCallback<ObbAnalyticsReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateAnalyticsValidateBeforeCall(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber, _callback);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateAnalyticsRequestBuilder {
        private final String customerId;
        private List<Long> accountIds;
        private Integer lengthOfReport;
        private String referenceNumber;

        private GenerateAnalyticsRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set accountIds
         * @param accountIds The list of account IDs to include in the report. If omitted, all accounts on record for the customer will be used. (optional)
         * @return GenerateAnalyticsRequestBuilder
         */
        public GenerateAnalyticsRequestBuilder accountIds(List<Long> accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set lengthOfReport
         * @param lengthOfReport Number of days to search for transactions. Must be one of 30, 90, 180, 270, 365, or 730. If omitted, defaults to 2 years from current time at which the request was received (730 days). (optional)
         * @return GenerateAnalyticsRequestBuilder
         */
        public GenerateAnalyticsRequestBuilder lengthOfReport(Integer lengthOfReport) {
            this.lengthOfReport = lengthOfReport;
            return this;
        }
        
        /**
         * Set referenceNumber
         * @param referenceNumber Partner-provided reference number to correlate reports. (optional)
         * @return GenerateAnalyticsRequestBuilder
         */
        public GenerateAnalyticsRequestBuilder referenceNumber(String referenceNumber) {
            this.referenceNumber = referenceNumber;
            return this;
        }
        
        /**
         * Build call for generateAnalytics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when cash flow analytics were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints = buildBodyParams();
            return generateAnalyticsCall(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber, _callback);
        }

        private BalanceAndCashFlowAnalyticsReportConstraints buildBodyParams() {
            BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints = new BalanceAndCashFlowAnalyticsReportConstraints();
            balanceAndCashFlowAnalyticsReportConstraints.accountIds(this.accountIds);
            balanceAndCashFlowAnalyticsReportConstraints.lengthOfReport(this.lengthOfReport);
            return balanceAndCashFlowAnalyticsReportConstraints;
        }

        /**
         * Execute generateAnalytics request
         * @return ObbAnalyticsReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when cash flow analytics were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public ObbAnalyticsReportAck execute() throws ApiException {
            BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints = buildBodyParams();
            ApiResponse<ObbAnalyticsReportAck> localVarResp = generateAnalyticsWithHttpInfo(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateAnalytics request with HTTP info returned
         * @return ApiResponse&lt;ObbAnalyticsReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when cash flow analytics were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObbAnalyticsReportAck> executeWithHttpInfo() throws ApiException {
            BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints = buildBodyParams();
            return generateAnalyticsWithHttpInfo(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber);
        }

        /**
         * Execute generateAnalytics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when cash flow analytics were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObbAnalyticsReportAck> _callback) throws ApiException {
            BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints = buildBodyParams();
            return generateAnalyticsAsync(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber, _callback);
        }
    }

    /**
     * Generate Cash Flow Analytics
     * Cash Flow Analytics for Business analyzes cash flow over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Average transaction value by month over the requested time period * Net cash flow over the requested time period and broken down by month * Count and report of weeks in the requested time period where there   were zero transactions posted to the customer&#39;s accounts  * Minimum/maximum/average/sum/count of deposits by month * Minimum/maximum/average/sum/count of withdrawals by month * Estimated amount of deposits that can be classified as business   revenue  * Number of transactions posted incurring a non-sufficient funds (NSF)   fee, and net amount charged in NSF fees   This version of the API is intended for piloting and integration testing your application with the Cash Flow Analytics product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Cash Flow Analytics - FCRA_ for the FCRA compliant version of this API.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Cash Flow Analytics Report_ (operation: _GetCashFlowAnalyticsReport_).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param balanceAndCashFlowAnalyticsReportConstraints  (required)
     * @return GenerateAnalyticsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response given when cash flow analytics were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateAnalyticsRequestBuilder generateAnalytics(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateAnalyticsRequestBuilder(customerId);
    }
    private okhttp3.Call generateFcraAnalyticsReportCall(String customerId, BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints, String referenceNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = balanceAndCashFlowAnalyticsReportConstraints;

        // create path and map variables
        String localVarPath = "/analytics/cashflow/v1/customer/{customerId}/fcra"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference-number", referenceNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateFcraAnalyticsReportValidateBeforeCall(String customerId, BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints, String referenceNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateFcraAnalyticsReport(Async)");
        }

        // verify the required parameter 'balanceAndCashFlowAnalyticsReportConstraints' is set
        if (balanceAndCashFlowAnalyticsReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'balanceAndCashFlowAnalyticsReportConstraints' when calling generateFcraAnalyticsReport(Async)");
        }

        return generateFcraAnalyticsReportCall(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber, _callback);

    }


    private ApiResponse<ObbAnalyticsReportAck> generateFcraAnalyticsReportWithHttpInfo(String customerId, BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints, String referenceNumber) throws ApiException {
        okhttp3.Call localVarCall = generateFcraAnalyticsReportValidateBeforeCall(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber, null);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateFcraAnalyticsReportAsync(String customerId, BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints, String referenceNumber, final ApiCallback<ObbAnalyticsReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateFcraAnalyticsReportValidateBeforeCall(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber, _callback);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateFcraAnalyticsReportRequestBuilder {
        private final String customerId;
        private List<Long> accountIds;
        private Integer lengthOfReport;
        private String referenceNumber;

        private GenerateFcraAnalyticsReportRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set accountIds
         * @param accountIds The list of account IDs to include in the report. If omitted, all accounts on record for the customer will be used. (optional)
         * @return GenerateFcraAnalyticsReportRequestBuilder
         */
        public GenerateFcraAnalyticsReportRequestBuilder accountIds(List<Long> accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set lengthOfReport
         * @param lengthOfReport Number of days to search for transactions. Must be one of 30, 90, 180, 270, 365, or 730. If omitted, defaults to 2 years from current time at which the request was received (730 days). (optional)
         * @return GenerateFcraAnalyticsReportRequestBuilder
         */
        public GenerateFcraAnalyticsReportRequestBuilder lengthOfReport(Integer lengthOfReport) {
            this.lengthOfReport = lengthOfReport;
            return this;
        }
        
        /**
         * Set referenceNumber
         * @param referenceNumber Partner-provided reference number to correlate reports. (optional)
         * @return GenerateFcraAnalyticsReportRequestBuilder
         */
        public GenerateFcraAnalyticsReportRequestBuilder referenceNumber(String referenceNumber) {
            this.referenceNumber = referenceNumber;
            return this;
        }
        
        /**
         * Build call for generateFcraAnalyticsReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when cash flow analytics (FCRA) were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints = buildBodyParams();
            return generateFcraAnalyticsReportCall(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber, _callback);
        }

        private BalanceAndCashFlowAnalyticsReportConstraints buildBodyParams() {
            BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints = new BalanceAndCashFlowAnalyticsReportConstraints();
            balanceAndCashFlowAnalyticsReportConstraints.accountIds(this.accountIds);
            balanceAndCashFlowAnalyticsReportConstraints.lengthOfReport(this.lengthOfReport);
            return balanceAndCashFlowAnalyticsReportConstraints;
        }

        /**
         * Execute generateFcraAnalyticsReport request
         * @return ObbAnalyticsReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when cash flow analytics (FCRA) were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public ObbAnalyticsReportAck execute() throws ApiException {
            BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints = buildBodyParams();
            ApiResponse<ObbAnalyticsReportAck> localVarResp = generateFcraAnalyticsReportWithHttpInfo(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateFcraAnalyticsReport request with HTTP info returned
         * @return ApiResponse&lt;ObbAnalyticsReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when cash flow analytics (FCRA) were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObbAnalyticsReportAck> executeWithHttpInfo() throws ApiException {
            BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints = buildBodyParams();
            return generateFcraAnalyticsReportWithHttpInfo(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber);
        }

        /**
         * Execute generateFcraAnalyticsReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response given when cash flow analytics (FCRA) were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObbAnalyticsReportAck> _callback) throws ApiException {
            BalanceAndCashFlowAnalyticsReportConstraints balanceAndCashFlowAnalyticsReportConstraints = buildBodyParams();
            return generateFcraAnalyticsReportAsync(customerId, balanceAndCashFlowAnalyticsReportConstraints, referenceNumber, _callback);
        }
    }

    /**
     * Generate Cash Flow Analytics - FCRA
     * Cash Flow Analytics for Business analyzes cash flow over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Average transaction value by month over the requested time period * Net cash flow over the requested time period and broken down by month * Count and report of weeks in the requested time period where there   were zero transactions posted to the customer&#39;s accounts  * Minimum/maximum/average/sum/count of deposits by month * Minimum/maximum/average/sum/count of withdrawals by month * Estimated amount of deposits that can be classified as business   revenue  * Number of transactions posted incurring a non-sufficient funds (NSF)   fee, and net amount charged in NSF fees   This version of the API is intended for production use. It maintains and enforces all compliance with FCRA rules and requirements.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Cash Flow Analytics Report - FCRA_ (operation: _GetCashFlowAnalyticsReportFCRA_).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param balanceAndCashFlowAnalyticsReportConstraints  (required)
     * @return GenerateFcraAnalyticsReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response given when cash flow analytics (FCRA) were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateFcraAnalyticsReportRequestBuilder generateFcraAnalyticsReport(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateFcraAnalyticsReportRequestBuilder(customerId);
    }
    private okhttp3.Call generateReportCall(String customerId, String userType, AnalyticsReportConstraints analyticsReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyticsReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/reports/cashflow-analytics/userTypes/{userType}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "userType" + "}", localVarApiClient.escapeString(userType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateReportValidateBeforeCall(String customerId, String userType, AnalyticsReportConstraints analyticsReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateReport(Async)");
        }

        // verify the required parameter 'userType' is set
        if (userType == null) {
            throw new ApiException("Missing the required parameter 'userType' when calling generateReport(Async)");
        }

        // verify the required parameter 'analyticsReportConstraints' is set
        if (analyticsReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'analyticsReportConstraints' when calling generateReport(Async)");
        }

        return generateReportCall(customerId, userType, analyticsReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<AnalyticsReportAck> generateReportWithHttpInfo(String customerId, String userType, AnalyticsReportConstraints analyticsReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = generateReportValidateBeforeCall(customerId, userType, analyticsReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<AnalyticsReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateReportAsync(String customerId, String userType, AnalyticsReportConstraints analyticsReportConstraints, String callbackUrl, final ApiCallback<AnalyticsReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateReportValidateBeforeCall(customerId, userType, analyticsReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateReportRequestBuilder {
        private final String customerId;
        private final String userType;
        private AnalyticsReportData analyticsReportData;
        private String accountIds;
        private List<ReportCustomField> reportCustomFields;
        private Long fromDate;
        private String callbackUrl;

        private GenerateReportRequestBuilder(String customerId, String userType) {
            this.customerId = customerId;
            this.userType = userType;
        }

        /**
         * Set analyticsReportData
         * @param analyticsReportData  (optional)
         * @return GenerateReportRequestBuilder
         */
        public GenerateReportRequestBuilder analyticsReportData(AnalyticsReportData analyticsReportData) {
            this.analyticsReportData = analyticsReportData;
            return this;
        }
        
        /**
         * Set accountIds
         * @param accountIds A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set) (optional)
         * @return GenerateReportRequestBuilder
         */
        public GenerateReportRequestBuilder accountIds(String accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GenerateReportRequestBuilder
         */
        public GenerateReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return GenerateReportRequestBuilder
         */
        public GenerateReportRequestBuilder fromDate(Long fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GenerateReportRequestBuilder
         */
        public GenerateReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for generateReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  * Location - Please Check the Report status at URL /decisioning/v4/consumers/{consumer_id}/reports/{report_id} /decisioning/v4/customers/{customer_id}/reports/{report_id} <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AnalyticsReportConstraints analyticsReportConstraints = buildBodyParams();
            return generateReportCall(customerId, userType, analyticsReportConstraints, callbackUrl, _callback);
        }

        private AnalyticsReportConstraints buildBodyParams() {
            AnalyticsReportConstraints analyticsReportConstraints = new AnalyticsReportConstraints();
            analyticsReportConstraints.analyticsReportData(this.analyticsReportData);
            analyticsReportConstraints.accountIds(this.accountIds);
            analyticsReportConstraints.reportCustomFields(this.reportCustomFields);
            analyticsReportConstraints.fromDate(this.fromDate);
            return analyticsReportConstraints;
        }

        /**
         * Execute generateReport request
         * @return AnalyticsReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  * Location - Please Check the Report status at URL /decisioning/v4/consumers/{consumer_id}/reports/{report_id} /decisioning/v4/customers/{customer_id}/reports/{report_id} <br>  </td></tr>
         </table>
         */
        public AnalyticsReportAck execute() throws ApiException {
            AnalyticsReportConstraints analyticsReportConstraints = buildBodyParams();
            ApiResponse<AnalyticsReportAck> localVarResp = generateReportWithHttpInfo(customerId, userType, analyticsReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateReport request with HTTP info returned
         * @return ApiResponse&lt;AnalyticsReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  * Location - Please Check the Report status at URL /decisioning/v4/consumers/{consumer_id}/reports/{report_id} /decisioning/v4/customers/{customer_id}/reports/{report_id} <br>  </td></tr>
         </table>
         */
        public ApiResponse<AnalyticsReportAck> executeWithHttpInfo() throws ApiException {
            AnalyticsReportConstraints analyticsReportConstraints = buildBodyParams();
            return generateReportWithHttpInfo(customerId, userType, analyticsReportConstraints, callbackUrl);
        }

        /**
         * Execute generateReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  * Location - Please Check the Report status at URL /decisioning/v4/consumers/{consumer_id}/reports/{report_id} /decisioning/v4/customers/{customer_id}/reports/{report_id} <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnalyticsReportAck> _callback) throws ApiException {
            AnalyticsReportConstraints analyticsReportConstraints = buildBodyParams();
            return generateReportAsync(customerId, userType, analyticsReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate Cashflow Analytics Report - Personal/Business
     * Generate a Cashflow Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Cashflow Analytics analyzes transaction over time to report metrics and identify behavior that may indicate risk.  Before calling this API, A consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param userType UserType indicates if the request is for a business or personal use case, Allowed values: business/personal. (required)
     * @param analyticsReportConstraints  (required)
     * @return GenerateReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  * Location - Please Check the Report status at URL /decisioning/v4/consumers/{consumer_id}/reports/{report_id} /decisioning/v4/customers/{customer_id}/reports/{report_id} <br>  </td></tr>
     </table>
     */
    public GenerateReportRequestBuilder generateReport(String customerId, String userType) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (userType == null) throw new IllegalArgumentException("\"userType\" is required but got null");
            

        return new GenerateReportRequestBuilder(customerId, userType);
    }
    private okhttp3.Call getReportDataCall(String obbReportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analytics/data/v1/{obb_report_id}"
            .replace("{" + "obb_report_id" + "}", localVarApiClient.escapeString(obbReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportDataValidateBeforeCall(String obbReportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'obbReportId' is set
        if (obbReportId == null) {
            throw new ApiException("Missing the required parameter 'obbReportId' when calling getReportData(Async)");
        }

        return getReportDataCall(obbReportId, _callback);

    }


    private ApiResponse<ObbAnalyticsReport> getReportDataWithHttpInfo(String obbReportId) throws ApiException {
        okhttp3.Call localVarCall = getReportDataValidateBeforeCall(obbReportId, null);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReportDataAsync(String obbReportId, final ApiCallback<ObbAnalyticsReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportDataValidateBeforeCall(obbReportId, _callback);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetReportDataRequestBuilder {
        private final String obbReportId;

        private GetReportDataRequestBuilder(String obbReportId) {
            this.obbReportId = obbReportId;
        }

        /**
         * Build call for getReportData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReportDataCall(obbReportId, _callback);
        }


        /**
         * Execute getReportData request
         * @return ObbAnalyticsReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public ObbAnalyticsReport execute() throws ApiException {
            ApiResponse<ObbAnalyticsReport> localVarResp = getReportDataWithHttpInfo(obbReportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getReportData request with HTTP info returned
         * @return ApiResponse&lt;ObbAnalyticsReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObbAnalyticsReport> executeWithHttpInfo() throws ApiException {
            return getReportDataWithHttpInfo(obbReportId);
        }

        /**
         * Execute getReportData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObbAnalyticsReport> _callback) throws ApiException {
            return getReportDataAsync(obbReportId, _callback);
        }
    }

    /**
     * Get OBB Analytics Report
     * Retrieve the report saved by _Generate Balance Analytics_, _Generate Cash Flow Analytics_, or _Generate Payment History_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param obbReportId Report ID generated and returned by OBB products (required)
     * @return GetReportDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OBB Analytics report data as JSON or PDF </td><td>  -  </td></tr>
     </table>
     */
    public GetReportDataRequestBuilder getReportData(String obbReportId) throws IllegalArgumentException {
        if (obbReportId == null) throw new IllegalArgumentException("\"obbReportId\" is required but got null");
            

        return new GetReportDataRequestBuilder(obbReportId);
    }
    private okhttp3.Call getReportDataFcraCall(String obbReportId, String purpose, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analytics/data/v1/{obb_report_id}/fcra"
            .replace("{" + "obb_report_id" + "}", localVarApiClient.escapeString(obbReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (purpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purpose", purpose));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportDataFcraValidateBeforeCall(String obbReportId, String purpose, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'obbReportId' is set
        if (obbReportId == null) {
            throw new ApiException("Missing the required parameter 'obbReportId' when calling getReportDataFcra(Async)");
        }

        // verify the required parameter 'purpose' is set
        if (purpose == null) {
            throw new ApiException("Missing the required parameter 'purpose' when calling getReportDataFcra(Async)");
        }

        return getReportDataFcraCall(obbReportId, purpose, _callback);

    }


    private ApiResponse<ObbAnalyticsReport> getReportDataFcraWithHttpInfo(String obbReportId, String purpose) throws ApiException {
        okhttp3.Call localVarCall = getReportDataFcraValidateBeforeCall(obbReportId, purpose, null);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReportDataFcraAsync(String obbReportId, String purpose, final ApiCallback<ObbAnalyticsReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportDataFcraValidateBeforeCall(obbReportId, purpose, _callback);
        Type localVarReturnType = new TypeToken<ObbAnalyticsReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetReportDataFcraRequestBuilder {
        private final String obbReportId;
        private final String purpose;

        private GetReportDataFcraRequestBuilder(String obbReportId, String purpose) {
            this.obbReportId = obbReportId;
            this.purpose = purpose;
        }

        /**
         * Build call for getReportDataFcra
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics FCRA report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReportDataFcraCall(obbReportId, purpose, _callback);
        }


        /**
         * Execute getReportDataFcra request
         * @return ObbAnalyticsReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics FCRA report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public ObbAnalyticsReport execute() throws ApiException {
            ApiResponse<ObbAnalyticsReport> localVarResp = getReportDataFcraWithHttpInfo(obbReportId, purpose);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getReportDataFcra request with HTTP info returned
         * @return ApiResponse&lt;ObbAnalyticsReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics FCRA report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObbAnalyticsReport> executeWithHttpInfo() throws ApiException {
            return getReportDataFcraWithHttpInfo(obbReportId, purpose);
        }

        /**
         * Execute getReportDataFcra request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OBB Analytics FCRA report data as JSON or PDF </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObbAnalyticsReport> _callback) throws ApiException {
            return getReportDataFcraAsync(obbReportId, purpose, _callback);
        }
    }

    /**
     * Get OBB Analytics Report - FCRA
     * Retrieve the report saved by _Generate Balance Analytics - FCRA_, _Generate Cash Flow Analytics - FCRA_, or _Generate Payment History - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param obbReportId Report ID generated and returned by OBB products (required)
     * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (required)
     * @return GetReportDataFcraRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OBB Analytics FCRA report data as JSON or PDF </td><td>  -  </td></tr>
     </table>
     */
    public GetReportDataFcraRequestBuilder getReportDataFcra(String obbReportId, String purpose) throws IllegalArgumentException {
        if (obbReportId == null) throw new IllegalArgumentException("\"obbReportId\" is required but got null");
            

        if (purpose == null) throw new IllegalArgumentException("\"purpose\" is required but got null");
            

        return new GetReportDataFcraRequestBuilder(obbReportId, purpose);
    }
}
