/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreatedTestTxPushTransaction;
import com.konfigthis.client.model.TestTxPushTransaction;
import com.konfigthis.client.model.TxPushSubscriptionParameters;
import com.konfigthis.client.model.TxPushSubscriptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TxPushApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TxPushApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TxPushApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteSubscriptionCall(String customerId, Long subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/subscriptions/{subscriptionId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscriptionValidateBeforeCall(String customerId, Long subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling deleteSubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteSubscription(Async)");
        }

        return deleteSubscriptionCall(customerId, subscriptionId, _callback);

    }


    private ApiResponse<Void> deleteSubscriptionWithHttpInfo(String customerId, Long subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(customerId, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSubscriptionAsync(String customerId, Long subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(customerId, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSubscriptionRequestBuilder {
        private final String customerId;
        private final Long subscriptionId;

        private DeleteSubscriptionRequestBuilder(String customerId, Long subscriptionId) {
            this.customerId = customerId;
            this.subscriptionId = subscriptionId;
        }

        /**
         * Build call for deleteSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The subscription was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSubscriptionCall(customerId, subscriptionId, _callback);
        }


        /**
         * Execute deleteSubscription request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The subscription was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSubscriptionWithHttpInfo(customerId, subscriptionId);
        }

        /**
         * Execute deleteSubscription request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The subscription was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSubscriptionWithHttpInfo(customerId, subscriptionId);
        }

        /**
         * Execute deleteSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The subscription was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSubscriptionAsync(customerId, subscriptionId, _callback);
        }
    }

    /**
     * Delete TxPush Subscription
     * Delete a specific subscription to TxPush notifications for the given account. This could be individual deleting the account or transactions events. No more events will be sent for that specific subscription.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param subscriptionId The subscription ID (required)
     * @return DeleteSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The subscription was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSubscriptionRequestBuilder deleteSubscription(String customerId, Long subscriptionId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
        return new DeleteSubscriptionRequestBuilder(customerId, subscriptionId);
    }
    private okhttp3.Call disableNotificationsCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/{accountId}/txpush"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableNotificationsValidateBeforeCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling disableNotifications(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling disableNotifications(Async)");
        }

        return disableNotificationsCall(customerId, accountId, _callback);

    }


    private ApiResponse<Void> disableNotificationsWithHttpInfo(String customerId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = disableNotificationsValidateBeforeCall(customerId, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call disableNotificationsAsync(String customerId, String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableNotificationsValidateBeforeCall(customerId, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DisableNotificationsRequestBuilder {
        private final String customerId;
        private final String accountId;

        private DisableNotificationsRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for disableNotifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Subscriptions were successfully deleted for the given account </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disableNotificationsCall(customerId, accountId, _callback);
        }


        /**
         * Execute disableNotifications request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Subscriptions were successfully deleted for the given account </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            disableNotificationsWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute disableNotifications request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Subscriptions were successfully deleted for the given account </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return disableNotificationsWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute disableNotifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Subscriptions were successfully deleted for the given account </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return disableNotificationsAsync(customerId, accountId, _callback);
        }
    }

    /**
     * Disable TxPush Notifications
     * Delete all TxPush subscriptions with their notifications for the given account. No more notifications will be sent for account or transaction events.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return DisableNotificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscriptions were successfully deleted for the given account </td><td>  -  </td></tr>
     </table>
     */
    public DisableNotificationsRequestBuilder disableNotifications(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new DisableNotificationsRequestBuilder(customerId, accountId);
    }
    private okhttp3.Call injectTestTransactionCall(String customerId, String accountId, TestTxPushTransaction testTxPushTransaction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testTxPushTransaction;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/{accountId}/transactions"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call injectTestTransactionValidateBeforeCall(String customerId, String accountId, TestTxPushTransaction testTxPushTransaction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling injectTestTransaction(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling injectTestTransaction(Async)");
        }

        // verify the required parameter 'testTxPushTransaction' is set
        if (testTxPushTransaction == null) {
            throw new ApiException("Missing the required parameter 'testTxPushTransaction' when calling injectTestTransaction(Async)");
        }

        return injectTestTransactionCall(customerId, accountId, testTxPushTransaction, _callback);

    }


    private ApiResponse<CreatedTestTxPushTransaction> injectTestTransactionWithHttpInfo(String customerId, String accountId, TestTxPushTransaction testTxPushTransaction) throws ApiException {
        okhttp3.Call localVarCall = injectTestTransactionValidateBeforeCall(customerId, accountId, testTxPushTransaction, null);
        Type localVarReturnType = new TypeToken<CreatedTestTxPushTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call injectTestTransactionAsync(String customerId, String accountId, TestTxPushTransaction testTxPushTransaction, final ApiCallback<CreatedTestTxPushTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = injectTestTransactionValidateBeforeCall(customerId, accountId, testTxPushTransaction, _callback);
        Type localVarReturnType = new TypeToken<CreatedTestTxPushTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InjectTestTransactionRequestBuilder {
        private final String description;
        private final Double amount;
        private final Long transactionDate;
        private final String customerId;
        private final String accountId;
        private String status;
        private Long postedDate;

        private InjectTestTransactionRequestBuilder(String description, double amount, Long transactionDate, String customerId, String accountId) {
            this.description = description;
            this.amount = amount;
            this.transactionDate = transactionDate;
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Set status
         * @param status \\\&quot;active\\\&quot; or \\\&quot;pending\\\&quot; (optional) (optional, default to active)
         * @return InjectTestTransactionRequestBuilder
         */
        public InjectTestTransactionRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set postedDate
         * @param postedDate A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). (optional)
         * @return InjectTestTransactionRequestBuilder
         */
        public InjectTestTransactionRequestBuilder postedDate(Long postedDate) {
            this.postedDate = postedDate;
            return this;
        }
        
        /**
         * Build call for injectTestTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The test notification was successfully sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TestTxPushTransaction testTxPushTransaction = buildBodyParams();
            return injectTestTransactionCall(customerId, accountId, testTxPushTransaction, _callback);
        }

        private TestTxPushTransaction buildBodyParams() {
            TestTxPushTransaction testTxPushTransaction = new TestTxPushTransaction();
            testTxPushTransaction.description(this.description);
            testTxPushTransaction.amount(this.amount);
            testTxPushTransaction.status(this.status);
            testTxPushTransaction.postedDate(this.postedDate);
            testTxPushTransaction.transactionDate(this.transactionDate);
            return testTxPushTransaction;
        }

        /**
         * Execute injectTestTransaction request
         * @return CreatedTestTxPushTransaction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The test notification was successfully sent </td><td>  -  </td></tr>
         </table>
         */
        public CreatedTestTxPushTransaction execute() throws ApiException {
            TestTxPushTransaction testTxPushTransaction = buildBodyParams();
            ApiResponse<CreatedTestTxPushTransaction> localVarResp = injectTestTransactionWithHttpInfo(customerId, accountId, testTxPushTransaction);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute injectTestTransaction request with HTTP info returned
         * @return ApiResponse&lt;CreatedTestTxPushTransaction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The test notification was successfully sent </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreatedTestTxPushTransaction> executeWithHttpInfo() throws ApiException {
            TestTxPushTransaction testTxPushTransaction = buildBodyParams();
            return injectTestTransactionWithHttpInfo(customerId, accountId, testTxPushTransaction);
        }

        /**
         * Execute injectTestTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The test notification was successfully sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreatedTestTxPushTransaction> _callback) throws ApiException {
            TestTxPushTransaction testTxPushTransaction = buildBodyParams();
            return injectTestTransactionAsync(customerId, accountId, testTxPushTransaction, _callback);
        }
    }

    /**
     * Create TxPush Test Transaction
     * Inject a transaction into the transaction list for a testing account. This allows an app to trigger TxPush notifications for the account in order to test the app&#39;s TxPush Listener service. This causes the platform to send one transaction event and one account event (showing that the account balance has changed). This service is only supported for testing accounts.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @param testTxPushTransaction  (required)
     * @return InjectTestTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The test notification was successfully sent </td><td>  -  </td></tr>
     </table>
     */
    public InjectTestTransactionRequestBuilder injectTestTransaction(String description, double amount, Long transactionDate, String customerId, String accountId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        
        if (transactionDate == null) throw new IllegalArgumentException("\"transactionDate\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new InjectTestTransactionRequestBuilder(description, amount, transactionDate, customerId, accountId);
    }
    private okhttp3.Call subscribeNotificationsCall(String customerId, String accountId, TxPushSubscriptionParameters txPushSubscriptionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = txPushSubscriptionParameters;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/{accountId}/txpush"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeNotificationsValidateBeforeCall(String customerId, String accountId, TxPushSubscriptionParameters txPushSubscriptionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling subscribeNotifications(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling subscribeNotifications(Async)");
        }

        // verify the required parameter 'txPushSubscriptionParameters' is set
        if (txPushSubscriptionParameters == null) {
            throw new ApiException("Missing the required parameter 'txPushSubscriptionParameters' when calling subscribeNotifications(Async)");
        }

        return subscribeNotificationsCall(customerId, accountId, txPushSubscriptionParameters, _callback);

    }


    private ApiResponse<TxPushSubscriptions> subscribeNotificationsWithHttpInfo(String customerId, String accountId, TxPushSubscriptionParameters txPushSubscriptionParameters) throws ApiException {
        okhttp3.Call localVarCall = subscribeNotificationsValidateBeforeCall(customerId, accountId, txPushSubscriptionParameters, null);
        Type localVarReturnType = new TypeToken<TxPushSubscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call subscribeNotificationsAsync(String customerId, String accountId, TxPushSubscriptionParameters txPushSubscriptionParameters, final ApiCallback<TxPushSubscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscribeNotificationsValidateBeforeCall(customerId, accountId, txPushSubscriptionParameters, _callback);
        Type localVarReturnType = new TypeToken<TxPushSubscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubscribeNotificationsRequestBuilder {
        private final String callbackUrl;
        private final String customerId;
        private final String accountId;

        private SubscribeNotificationsRequestBuilder(String callbackUrl, String customerId, String accountId) {
            this.callbackUrl = callbackUrl;
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for subscribeNotifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The subscription was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TxPushSubscriptionParameters txPushSubscriptionParameters = buildBodyParams();
            return subscribeNotificationsCall(customerId, accountId, txPushSubscriptionParameters, _callback);
        }

        private TxPushSubscriptionParameters buildBodyParams() {
            TxPushSubscriptionParameters txPushSubscriptionParameters = new TxPushSubscriptionParameters();
            txPushSubscriptionParameters.callbackUrl(this.callbackUrl);
            return txPushSubscriptionParameters;
        }

        /**
         * Execute subscribeNotifications request
         * @return TxPushSubscriptions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The subscription was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public TxPushSubscriptions execute() throws ApiException {
            TxPushSubscriptionParameters txPushSubscriptionParameters = buildBodyParams();
            ApiResponse<TxPushSubscriptions> localVarResp = subscribeNotificationsWithHttpInfo(customerId, accountId, txPushSubscriptionParameters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute subscribeNotifications request with HTTP info returned
         * @return ApiResponse&lt;TxPushSubscriptions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The subscription was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TxPushSubscriptions> executeWithHttpInfo() throws ApiException {
            TxPushSubscriptionParameters txPushSubscriptionParameters = buildBodyParams();
            return subscribeNotificationsWithHttpInfo(customerId, accountId, txPushSubscriptionParameters);
        }

        /**
         * Execute subscribeNotifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The subscription was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TxPushSubscriptions> _callback) throws ApiException {
            TxPushSubscriptionParameters txPushSubscriptionParameters = buildBodyParams();
            return subscribeNotificationsAsync(customerId, accountId, txPushSubscriptionParameters, _callback);
        }
    }

    /**
     * Subscribe to TxPush Notifications
     * Register a client app&#39;s TxPush Listener to receive TxPush notifications related to the given account.  Each call to this service will return two records, one with class account and one with class transaction. Account events are sent when values change in the account&#39;s fields (such as &#x60;balance&#x60; or &#x60;interestRate&#x60;). Transaction events are sent whenever a new transaction is posted for the account. For institutions that do not provide TxPush services, notifications are sent as soon as Finicity finds a new transaction or new account data through regular aggregation processes.  The listener&#39;s URL must be secure (HTTPS) for any real-world account. In addition, the client&#39;s TxPush Listener will need to be verified. HTTP and HTTPS connections are only allowed on the standard ports 80 (HTTP) and 443 (HTTPS). The use of other ports will result with the call failing.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @param txPushSubscriptionParameters  (required)
     * @return SubscribeNotificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The subscription was successfully created </td><td>  -  </td></tr>
     </table>
     */
    public SubscribeNotificationsRequestBuilder subscribeNotifications(String callbackUrl, String customerId, String accountId) throws IllegalArgumentException {
        if (callbackUrl == null) throw new IllegalArgumentException("\"callbackUrl\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new SubscribeNotificationsRequestBuilder(callbackUrl, customerId, accountId);
    }
}
