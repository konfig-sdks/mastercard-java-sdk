/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ACHDetails;
import com.konfigthis.client.model.AccountOwner;
import com.konfigthis.client.model.AccountOwnerHolders;
import com.konfigthis.client.model.AvailableBalance;
import com.konfigthis.client.model.LoanPaymentDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAccountOwnerDetailsCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/{accountId}/owner"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountOwnerDetailsValidateBeforeCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getAccountOwnerDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountOwnerDetails(Async)");
        }

        return getAccountOwnerDetailsCall(customerId, accountId, _callback);

    }


    private ApiResponse<AccountOwner> getAccountOwnerDetailsWithHttpInfo(String customerId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountOwnerDetailsValidateBeforeCall(customerId, accountId, null);
        Type localVarReturnType = new TypeToken<AccountOwner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountOwnerDetailsAsync(String customerId, String accountId, final ApiCallback<AccountOwner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountOwnerDetailsValidateBeforeCall(customerId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AccountOwner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccountOwnerDetailsRequestBuilder {
        private final String customerId;
        private final String accountId;

        private GetAccountOwnerDetailsRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for getAccountOwnerDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account owner was successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountOwnerDetailsCall(customerId, accountId, _callback);
        }


        /**
         * Execute getAccountOwnerDetails request
         * @return AccountOwner
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account owner was successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public AccountOwner execute() throws ApiException {
            ApiResponse<AccountOwner> localVarResp = getAccountOwnerDetailsWithHttpInfo(customerId, accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccountOwnerDetails request with HTTP info returned
         * @return ApiResponse&lt;AccountOwner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account owner was successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountOwner> executeWithHttpInfo() throws ApiException {
            return getAccountOwnerDetailsWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute getAccountOwnerDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account owner was successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountOwner> _callback) throws ApiException {
            return getAccountOwnerDetailsAsync(customerId, accountId, _callback);
        }
    }

    /**
     * Get Account Owner
     * Retrieve the names and addresses of the account owner from a financial institution.  Note: this is a premium service, billable per every successful API call.  This service retrieves account data from the institution. This usually returns quickly, but in some scenarios may take a few minutes to complete. In the event of a timeout condition, retry the call.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetAccountOwnerDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account owner was successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountOwnerDetailsRequestBuilder getAccountOwnerDetails(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetAccountOwnerDetailsRequestBuilder(customerId, accountId);
    }
    private okhttp3.Call getAccountOwnerDetails_0Call(String customerId, String accountId, Boolean withInsights, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v3/customers/{customerId}/accounts/{accountId}/owner"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withInsights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withInsights", withInsights));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountOwnerDetails_0ValidateBeforeCall(String customerId, String accountId, Boolean withInsights, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getAccountOwnerDetails_0(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountOwnerDetails_0(Async)");
        }

        return getAccountOwnerDetails_0Call(customerId, accountId, withInsights, _callback);

    }


    private ApiResponse<AccountOwnerHolders> getAccountOwnerDetails_0WithHttpInfo(String customerId, String accountId, Boolean withInsights) throws ApiException {
        okhttp3.Call localVarCall = getAccountOwnerDetails_0ValidateBeforeCall(customerId, accountId, withInsights, null);
        Type localVarReturnType = new TypeToken<AccountOwnerHolders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountOwnerDetails_0Async(String customerId, String accountId, Boolean withInsights, final ApiCallback<AccountOwnerHolders> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountOwnerDetails_0ValidateBeforeCall(customerId, accountId, withInsights, _callback);
        Type localVarReturnType = new TypeToken<AccountOwnerHolders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccountOwnerDetails0RequestBuilder {
        private final String customerId;
        private final String accountId;
        private Boolean withInsights;

        private GetAccountOwnerDetails0RequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Set withInsights
         * @param withInsights If this parameter is true, Identity Insights data will be returned along with the account owner information (optional)
         * @return GetAccountOwnerDetails0RequestBuilder
         */
        public GetAccountOwnerDetails0RequestBuilder withInsights(Boolean withInsights) {
            this.withInsights = withInsights;
            return this;
        }
        
        /**
         * Build call for getAccountOwnerDetails_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account owner was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountOwnerDetails_0Call(customerId, accountId, withInsights, _callback);
        }


        /**
         * Execute getAccountOwnerDetails_0 request
         * @return AccountOwnerHolders
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account owner was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public AccountOwnerHolders execute() throws ApiException {
            ApiResponse<AccountOwnerHolders> localVarResp = getAccountOwnerDetails_0WithHttpInfo(customerId, accountId, withInsights);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccountOwnerDetails_0 request with HTTP info returned
         * @return ApiResponse&lt;AccountOwnerHolders&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account owner was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountOwnerHolders> executeWithHttpInfo() throws ApiException {
            return getAccountOwnerDetails_0WithHttpInfo(customerId, accountId, withInsights);
        }

        /**
         * Execute getAccountOwnerDetails_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account owner was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountOwnerHolders> _callback) throws ApiException {
            return getAccountOwnerDetails_0Async(customerId, accountId, withInsights, _callback);
        }
    }

    /**
     * Get Account Owner Details
     * This service retrieves the account details for an account holder from an institution. The following data objects are available.  * Account holders  * Addresses  * Emails  * Phones  * Documentations  * Identity Insights   Note: The data returned varies from institution to institution as not all of them make the same data available. This is a premium service, billable per each successful API call.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetAccountOwnerDetails0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account owner was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountOwnerDetails0RequestBuilder getAccountOwnerDetails_0(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetAccountOwnerDetails0RequestBuilder(customerId, accountId);
    }
    private okhttp3.Call getAchDetailsCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/{accountId}/details"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAchDetailsValidateBeforeCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getAchDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAchDetails(Async)");
        }

        return getAchDetailsCall(customerId, accountId, _callback);

    }


    private ApiResponse<ACHDetails> getAchDetailsWithHttpInfo(String customerId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAchDetailsValidateBeforeCall(customerId, accountId, null);
        Type localVarReturnType = new TypeToken<ACHDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAchDetailsAsync(String customerId, String accountId, final ApiCallback<ACHDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAchDetailsValidateBeforeCall(customerId, accountId, _callback);
        Type localVarReturnType = new TypeToken<ACHDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAchDetailsRequestBuilder {
        private final String customerId;
        private final String accountId;

        private GetAchDetailsRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for getAchDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account ACH details were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAchDetailsCall(customerId, accountId, _callback);
        }


        /**
         * Execute getAchDetails request
         * @return ACHDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account ACH details were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ACHDetails execute() throws ApiException {
            ApiResponse<ACHDetails> localVarResp = getAchDetailsWithHttpInfo(customerId, accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAchDetails request with HTTP info returned
         * @return ApiResponse&lt;ACHDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account ACH details were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ACHDetails> executeWithHttpInfo() throws ApiException {
            return getAchDetailsWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute getAchDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account ACH details were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ACHDetails> _callback) throws ApiException {
            return getAchDetailsAsync(customerId, accountId, _callback);
        }
    }

    /**
     * Get Account ACH Details
     * Return the real account number and routing number details for an ACH payment.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \&quot;checking\&quot;, \&quot;savings\&quot;, \&quot;moneyMarket\&quot;, \&quot;cd\&quot;  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetAchDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account ACH details were successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetAchDetailsRequestBuilder getAchDetails(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetAchDetailsRequestBuilder(customerId, accountId);
    }
    private okhttp3.Call getAvailableBalanceLiveCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/{accountId}/availableBalance/live"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableBalanceLiveValidateBeforeCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getAvailableBalanceLive(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAvailableBalanceLive(Async)");
        }

        return getAvailableBalanceLiveCall(customerId, accountId, _callback);

    }


    private ApiResponse<AvailableBalance> getAvailableBalanceLiveWithHttpInfo(String customerId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAvailableBalanceLiveValidateBeforeCall(customerId, accountId, null);
        Type localVarReturnType = new TypeToken<AvailableBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAvailableBalanceLiveAsync(String customerId, String accountId, final ApiCallback<AvailableBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableBalanceLiveValidateBeforeCall(customerId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AvailableBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAvailableBalanceLiveRequestBuilder {
        private final String customerId;
        private final String accountId;

        private GetAvailableBalanceLiveRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for getAvailableBalanceLive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The live balance was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvailableBalanceLiveCall(customerId, accountId, _callback);
        }


        /**
         * Execute getAvailableBalanceLive request
         * @return AvailableBalance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The live balance was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public AvailableBalance execute() throws ApiException {
            ApiResponse<AvailableBalance> localVarResp = getAvailableBalanceLiveWithHttpInfo(customerId, accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAvailableBalanceLive request with HTTP info returned
         * @return ApiResponse&lt;AvailableBalance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The live balance was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailableBalance> executeWithHttpInfo() throws ApiException {
            return getAvailableBalanceLiveWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute getAvailableBalanceLive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The live balance was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailableBalance> _callback) throws ApiException {
            return getAvailableBalanceLiveAsync(customerId, accountId, _callback);
        }
    }

    /**
     * Get Available Balance - Live
     * Retrieve the available and cleared account balances for a single account in real-time directly from a financial institution.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \&quot;checking\&quot;, \&quot;savings\&quot;, \&quot;moneyMarket\&quot;, \&quot;cd\&quot;  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetAvailableBalanceLiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The live balance was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableBalanceLiveRequestBuilder getAvailableBalanceLive(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetAvailableBalanceLiveRequestBuilder(customerId, accountId);
    }
    private okhttp3.Call getLatestCachedBalanceCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/{accountId}/availableBalance"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestCachedBalanceValidateBeforeCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getLatestCachedBalance(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getLatestCachedBalance(Async)");
        }

        return getLatestCachedBalanceCall(customerId, accountId, _callback);

    }


    private ApiResponse<AvailableBalance> getLatestCachedBalanceWithHttpInfo(String customerId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getLatestCachedBalanceValidateBeforeCall(customerId, accountId, null);
        Type localVarReturnType = new TypeToken<AvailableBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLatestCachedBalanceAsync(String customerId, String accountId, final ApiCallback<AvailableBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestCachedBalanceValidateBeforeCall(customerId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AvailableBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLatestCachedBalanceRequestBuilder {
        private final String customerId;
        private final String accountId;

        private GetLatestCachedBalanceRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for getLatestCachedBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The balance was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLatestCachedBalanceCall(customerId, accountId, _callback);
        }


        /**
         * Execute getLatestCachedBalance request
         * @return AvailableBalance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The balance was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public AvailableBalance execute() throws ApiException {
            ApiResponse<AvailableBalance> localVarResp = getLatestCachedBalanceWithHttpInfo(customerId, accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLatestCachedBalance request with HTTP info returned
         * @return ApiResponse&lt;AvailableBalance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The balance was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailableBalance> executeWithHttpInfo() throws ApiException {
            return getLatestCachedBalanceWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute getLatestCachedBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The balance was successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailableBalance> _callback) throws ApiException {
            return getLatestCachedBalanceAsync(customerId, accountId, _callback);
        }
    }

    /**
     * Get Available Balance
     * Retrieve the latest cached available and cleared account balances for a customer. Since we update and store balances throughout the day, this is the most accurate balance information available when a connection to a financial institution is unavailable or when a faster response is needed. Only deposit account types are supported: Checking, Savings, Money Market, and CD.  Note: this is a premium service, billable per every successful API call. Enrollment is required.  _Supported account types_: \&quot;checking\&quot;, \&quot;savings\&quot;, \&quot;moneyMarket\&quot;, \&quot;cd\&quot;  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetLatestCachedBalanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The balance was successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetLatestCachedBalanceRequestBuilder getLatestCachedBalance(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetLatestCachedBalanceRequestBuilder(customerId, accountId);
    }
    private okhttp3.Call getLoanPaymentDetailsCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v2/customers/{customerId}/accounts/{accountId}/loanDetails"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoanPaymentDetailsValidateBeforeCall(String customerId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getLoanPaymentDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getLoanPaymentDetails(Async)");
        }

        return getLoanPaymentDetailsCall(customerId, accountId, _callback);

    }


    private ApiResponse<LoanPaymentDetails> getLoanPaymentDetailsWithHttpInfo(String customerId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getLoanPaymentDetailsValidateBeforeCall(customerId, accountId, null);
        Type localVarReturnType = new TypeToken<LoanPaymentDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLoanPaymentDetailsAsync(String customerId, String accountId, final ApiCallback<LoanPaymentDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoanPaymentDetailsValidateBeforeCall(customerId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LoanPaymentDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLoanPaymentDetailsRequestBuilder {
        private final String customerId;
        private final String accountId;

        private GetLoanPaymentDetailsRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Build call for getLoanPaymentDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The loan payment details were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLoanPaymentDetailsCall(customerId, accountId, _callback);
        }


        /**
         * Execute getLoanPaymentDetails request
         * @return LoanPaymentDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The loan payment details were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public LoanPaymentDetails execute() throws ApiException {
            ApiResponse<LoanPaymentDetails> localVarResp = getLoanPaymentDetailsWithHttpInfo(customerId, accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLoanPaymentDetails request with HTTP info returned
         * @return ApiResponse&lt;LoanPaymentDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The loan payment details were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LoanPaymentDetails> executeWithHttpInfo() throws ApiException {
            return getLoanPaymentDetailsWithHttpInfo(customerId, accountId);
        }

        /**
         * Execute getLoanPaymentDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The loan payment details were successfully retrieved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LoanPaymentDetails> _callback) throws ApiException {
            return getLoanPaymentDetailsAsync(customerId, accountId, _callback);
        }
    }

    /**
     * Get Loan Payment Details
     * Return the loan payment details of the customer for a loan-type account.  Note: this is a premium service, billable per every successful API call.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetLoanPaymentDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The loan payment details were successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetLoanPaymentDetailsRequestBuilder getLoanPaymentDetails(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetLoanPaymentDetailsRequestBuilder(customerId, accountId);
    }
}
