/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomerAccountMultipleStatements;
import java.io.File;
import com.konfigthis.client.model.ReportCustomField;
import com.konfigthis.client.model.StatementData;
import com.konfigthis.client.model.StatementReportAck;
import com.konfigthis.client.model.StatementReportConstraints;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BankStatementsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BankStatementsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BankStatementsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getFinicityAppKey() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Key\" is required but no API key was provided. Please set \"Finicity-App-Key\" with ApiClient#setFinicityAppKey(String).");
        }
        if (apiClient.getFinicityAppToken() == null) {
            throw new IllegalArgumentException("\"Finicity-App-Token\" is required but no API key was provided. Please set \"Finicity-App-Token\" with ApiClient#setFinicityAppToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateReportCall(String customerId, StatementReportConstraints statementReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statementReportConstraints;

        // create path and map variables
        String localVarPath = "/decisioning/v2/customers/{customerId}/statement"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callbackUrl", callbackUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateReportValidateBeforeCall(String customerId, StatementReportConstraints statementReportConstraints, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling generateReport(Async)");
        }

        // verify the required parameter 'statementReportConstraints' is set
        if (statementReportConstraints == null) {
            throw new ApiException("Missing the required parameter 'statementReportConstraints' when calling generateReport(Async)");
        }

        return generateReportCall(customerId, statementReportConstraints, callbackUrl, _callback);

    }


    private ApiResponse<StatementReportAck> generateReportWithHttpInfo(String customerId, StatementReportConstraints statementReportConstraints, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = generateReportValidateBeforeCall(customerId, statementReportConstraints, callbackUrl, null);
        Type localVarReturnType = new TypeToken<StatementReportAck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateReportAsync(String customerId, StatementReportConstraints statementReportConstraints, String callbackUrl, final ApiCallback<StatementReportAck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateReportValidateBeforeCall(customerId, statementReportConstraints, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<StatementReportAck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateReportRequestBuilder {
        private final StatementData statementReportData;
        private final String customerId;
        private List<ReportCustomField> reportCustomFields;
        private String callbackUrl;

        private GenerateReportRequestBuilder(StatementData statementReportData, String customerId) {
            this.statementReportData = statementReportData;
            this.customerId = customerId;
        }

        /**
         * Set reportCustomFields
         * @param reportCustomFields The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \\\&quot;true\\\&quot; or \\\&quot;false\\\&quot;. * \\\&quot;true\\\&quot;: (default) display the custom field in the PDF report * \\\&quot;false\\\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API. (optional)
         * @return GenerateReportRequestBuilder
         */
        public GenerateReportRequestBuilder reportCustomFields(List<ReportCustomField> reportCustomFields) {
            this.reportCustomFields = reportCustomFields;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code. (optional)
         * @return GenerateReportRequestBuilder
         */
        public GenerateReportRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for generateReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StatementReportConstraints statementReportConstraints = buildBodyParams();
            return generateReportCall(customerId, statementReportConstraints, callbackUrl, _callback);
        }

        private StatementReportConstraints buildBodyParams() {
            StatementReportConstraints statementReportConstraints = new StatementReportConstraints();
            statementReportConstraints.statementReportData(this.statementReportData);
            statementReportConstraints.reportCustomFields(this.reportCustomFields);
            return statementReportConstraints;
        }

        /**
         * Execute generateReport request
         * @return StatementReportAck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public StatementReportAck execute() throws ApiException {
            StatementReportConstraints statementReportConstraints = buildBodyParams();
            ApiResponse<StatementReportAck> localVarResp = generateReportWithHttpInfo(customerId, statementReportConstraints, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateReport request with HTTP info returned
         * @return ApiResponse&lt;StatementReportAck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatementReportAck> executeWithHttpInfo() throws ApiException {
            StatementReportConstraints statementReportConstraints = buildBodyParams();
            return generateReportWithHttpInfo(customerId, statementReportConstraints, callbackUrl);
        }

        /**
         * Execute generateReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatementReportAck> _callback) throws ApiException {
            StatementReportConstraints statementReportConstraints = buildBodyParams();
            return generateReportAsync(customerId, statementReportConstraints, callbackUrl, _callback);
        }
    }

    /**
     * Generate Statement Report
     * Generate a Statement Report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param statementReportConstraints  (required)
     * @return GenerateReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The report is being generated. When finished, a notification will be sent to the specified callback URL (Report Listener Service) and the report can be fetched using Get Report APIs. If you don&#39;t use a callback URL, Get Report returns a minimal report with the following status: &#39;inProgress&#39;. Repeat the call every 20 seconds until Get Report returns a different status. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateReportRequestBuilder generateReport(StatementData statementReportData, String customerId) throws IllegalArgumentException {
        if (statementReportData == null) throw new IllegalArgumentException("\"statementReportData\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GenerateReportRequestBuilder(statementReportData, customerId);
    }
    private okhttp3.Call getCustomerStatementInPdfCall(String customerId, String accountId, Integer index, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v1/customers/{customerId}/accounts/{accountId}/statement"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (index != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("index", index));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerStatementInPdfValidateBeforeCall(String customerId, String accountId, Integer index, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerStatementInPdf(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getCustomerStatementInPdf(Async)");
        }

        return getCustomerStatementInPdfCall(customerId, accountId, index, type, _callback);

    }


    private ApiResponse<File> getCustomerStatementInPdfWithHttpInfo(String customerId, String accountId, Integer index, String type) throws ApiException {
        okhttp3.Call localVarCall = getCustomerStatementInPdfValidateBeforeCall(customerId, accountId, index, type, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerStatementInPdfAsync(String customerId, String accountId, Integer index, String type, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerStatementInPdfValidateBeforeCall(customerId, accountId, index, type, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomerStatementInPdfRequestBuilder {
        private final String customerId;
        private final String accountId;
        private Integer index;
        private String type;

        private GetCustomerStatementInPdfRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Set index
         * @param index Request statements from 1-24. By default, 1 is the most recent statement. Increase the index value to count back (by month) and retrieve its most recent statement. (optional, default to 1)
         * @return GetCustomerStatementInPdfRequestBuilder
         */
        public GetCustomerStatementInPdfRequestBuilder index(Integer index) {
            this.index = index;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of statement to retrieve (optional)
         * @return GetCustomerStatementInPdfRequestBuilder
         */
        public GetCustomerStatementInPdfRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for getCustomerStatementInPdf
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The statement was successfully downloaded as a PDF file </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerStatementInPdfCall(customerId, accountId, index, type, _callback);
        }


        /**
         * Execute getCustomerStatementInPdf request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The statement was successfully downloaded as a PDF file </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getCustomerStatementInPdfWithHttpInfo(customerId, accountId, index, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomerStatementInPdf request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The statement was successfully downloaded as a PDF file </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getCustomerStatementInPdfWithHttpInfo(customerId, accountId, index, type);
        }

        /**
         * Execute getCustomerStatementInPdf request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The statement was successfully downloaded as a PDF file </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getCustomerStatementInPdfAsync(customerId, accountId, index, type, _callback);
        }
    }

    /**
     * Get Customer Account Statement
     * Retrieve the customer&#39;s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.  For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetCustomerStatementInPdfRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The statement was successfully downloaded as a PDF file </td><td>  -  </td></tr>
        <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerStatementInPdfRequestBuilder getCustomerStatementInPdf(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetCustomerStatementInPdfRequestBuilder(customerId, accountId);
    }
    private okhttp3.Call getMultipleStatementsCall(String customerId, String accountId, String index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregation/v3/customers/{customerId}/accounts/{accountId}/statement"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (index != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("index", index));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "FinicityAppKey", "FinicityAppToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleStatementsValidateBeforeCall(String customerId, String accountId, String index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getMultipleStatements(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getMultipleStatements(Async)");
        }

        return getMultipleStatementsCall(customerId, accountId, index, _callback);

    }


    private ApiResponse<CustomerAccountMultipleStatements> getMultipleStatementsWithHttpInfo(String customerId, String accountId, String index) throws ApiException {
        okhttp3.Call localVarCall = getMultipleStatementsValidateBeforeCall(customerId, accountId, index, null);
        Type localVarReturnType = new TypeToken<CustomerAccountMultipleStatements>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultipleStatementsAsync(String customerId, String accountId, String index, final ApiCallback<CustomerAccountMultipleStatements> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleStatementsValidateBeforeCall(customerId, accountId, index, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccountMultipleStatements>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMultipleStatementsRequestBuilder {
        private final String customerId;
        private final String accountId;
        private String index;

        private GetMultipleStatementsRequestBuilder(String customerId, String accountId) {
            this.customerId = customerId;
            this.accountId = accountId;
        }

        /**
         * Set index
         * @param index Request statements with comma-separated indexes ranged between 1-24. The default value is 1 and it will return the most recent statement. Increasing the index will return older statements, for example, setting the index value to 6 will return a statement from six months ago. (optional, default to 1)
         * @return GetMultipleStatementsRequestBuilder
         */
        public GetMultipleStatementsRequestBuilder index(String index) {
            this.index = index;
            return this;
        }
        
        /**
         * Build call for getMultipleStatements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account statements were successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultipleStatementsCall(customerId, accountId, index, _callback);
        }


        /**
         * Execute getMultipleStatements request
         * @return CustomerAccountMultipleStatements
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account statements were successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAccountMultipleStatements execute() throws ApiException {
            ApiResponse<CustomerAccountMultipleStatements> localVarResp = getMultipleStatementsWithHttpInfo(customerId, accountId, index);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMultipleStatements request with HTTP info returned
         * @return ApiResponse&lt;CustomerAccountMultipleStatements&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account statements were successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAccountMultipleStatements> executeWithHttpInfo() throws ApiException {
            return getMultipleStatementsWithHttpInfo(customerId, accountId, index);
        }

        /**
         * Execute getMultipleStatements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The account statements were successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAccountMultipleStatements> _callback) throws ApiException {
            return getMultipleStatementsAsync(customerId, accountId, index, _callback);
        }
    }

    /**
     * Get Customer Account Multiple Statements
     * This endpoint is retrieving the account statement for a given customer. The maximum number of indexes it will fetch for a single login is 24.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @param customerId A customer ID (required)
     * @param accountId The account ID (required)
     * @return GetMultipleStatementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account statements were successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 203 </td><td> The response contains an MFA challenge in XML or JSON format. Contact your Account Manager or Systems Engineers to determine the best route to handle this error. </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipleStatementsRequestBuilder getMultipleStatements(String customerId, String accountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetMultipleStatementsRequestBuilder(customerId, accountId);
    }
}
